"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5235],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(r),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return r?n.createElement(m,l(l({ref:t},c),{},{components:r})):n.createElement(m,l({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8981:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={title:"Adding flavor-specific tasks to Gradle"},l=void 0,i={permalink:"/blog/2016/01/13/gradle",source:"@site/blog/2016-01-13-gradle.md",title:"Adding flavor-specific tasks to Gradle",description:"Suppose you have a multi-flavored project. Each flavor is a separate app, so you have to use separate google-services.json file for each flavor.",date:"2016-01-13T00:00:00.000Z",formattedDate:"January 13, 2016",tags:[],readingTime:1.1,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Adding flavor-specific tasks to Gradle"},prevItem:{title:"Email-\u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430: \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u044b\u0435 \u043a\u0430\u043c\u043d\u0438",permalink:"/blog/2016/01/17/email"},nextItem:{title:"\u041f\u043e\u0447\u0435\u043c\u0443 \u044f \u043d\u0435 \u043c\u043e\u0433\u0443 \u0441\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c?",permalink:"/blog/2014/09/22/django-email"}},s={authorsImageUrls:[]},p=[],c={toc:p};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Suppose you have a multi-flavored project. Each flavor is a separate app, so you have to use separate ",(0,a.kt)("inlineCode",{parentName:"p"},"google-services.json")," file for each flavor."),(0,a.kt)("p",null,"The problem is that ",(0,a.kt)("inlineCode",{parentName:"p"},"google-services.json")," file must be placed in the ",(0,a.kt)("inlineCode",{parentName:"p"},"app/")," directory (",(0,a.kt)("strong",{parentName:"p"},"update:")," as of version 2.0.0-alpha3 of the plugin support was added for build types), so we have to copy this file to ",(0,a.kt)("inlineCode",{parentName:"p"},"app/")," directory on every flavor build process."),(0,a.kt)("p",null,"If we want to automate this process, we can add flavor-specific tasks to our ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle")," file and make them run depending on what flavor we are building."),(0,a.kt)("p",null,"Here is my way of achieving this."),(0,a.kt)("p",null,"First of all, Add this code to ",(0,a.kt)("inlineCode",{parentName:"p"},"productFlavors")," section:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},'all { flavor ->\n    task("${flavor.name}GoogleServices", type: Copy) {\n      description = \'Switches to google-services.json depending on flavor\'\n      from "src/${flavor.name}"\n      include "google-services.json"\n      into "."\n    }\n}\n')),(0,a.kt)("p",null,"This will create tasks ",(0,a.kt)("inlineCode",{parentName:"p"},"flavor1GoogleServices"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"flavor2GoogleServices")," and so on. This task will copy ",(0,a.kt)("inlineCode",{parentName:"p"},"google-services.json")," file from ",(0,a.kt)("inlineCode",{parentName:"p"},"src/flavor1/")," folder to ",(0,a.kt)("inlineCode",{parentName:"p"},"app/")," folder."),(0,a.kt)("p",null,"Now add this code to the end of the ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},'afterEvaluate {\n    android.productFlavors.all {\n      flavor ->\n        tasks."generate${flavor.name.capitalize()}DebugResources".dependsOn "${flavor.name}GoogleServices"\n        tasks."generate${flavor.name.capitalize()}ReleaseResources".dependsOn "${flavor.name}GoogleServices"\n    }\n}\n')),(0,a.kt)("p",null,"This code runs after a project is evaluated. It adds dependencies to tasks ",(0,a.kt)("inlineCode",{parentName:"p"},"generateFlavor1DebugResources"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"generateFlavor2DebugResources")," etc. on our tasks."),(0,a.kt)("p",null,"That\u2019s all. After switching build variant in Android Studio the right task for this variant will run and update json-file."))}d.isMDXComponent=!0}}]);