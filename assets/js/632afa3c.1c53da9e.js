"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2517],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4966:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={title:"DCM: When the Built-In Analyzer Isn't Enough"},i=void 0,l={permalink:"/blog/2023/11/21/dcm",source:"@site/blog/2023-11-21-dcm/index.md",title:"DCM: When the Built-In Analyzer Isn't Enough",description:"This is the text version of my presentation at Flutter Czechia Meetup, where we delved into how Dart Code Metrics elevates your development game, making your coding process more efficient.",date:"2023-11-21T00:00:00.000Z",formattedDate:"November 21, 2023",tags:[],readingTime:7.5,hasTruncateMarker:!0,authors:[],frontMatter:{title:"DCM: When the Built-In Analyzer Isn't Enough"},prevItem:{title:"App Architecture: Faster, Better\u2026 Simpler",permalink:"/blog/2024/10/15/app-architecture"},nextItem:{title:'"Clean" Architecture vs pragmatic architecture',permalink:"/blog/2023/02/14/clean-architecture-vs-pragmatic-architecture"}},s={authorsImageUrls:[]},c=[],u={toc:c};function p(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is the text version of my presentation at ",(0,r.kt)("a",{parentName:"p",href:"https://www.meetup.com/flutter-czechia/events/295776194/"},"Flutter Czechia Meetup"),", where we delved into how Dart Code Metrics elevates your development game, making your coding process more efficient."),(0,r.kt)("p",null,'Let\'s start with a simple question: "Why do we need an analyzer at all?"'),(0,r.kt)("p",null,"One significant benefit is its ability to help us enforce code style within our team. Ask yourself, how often during code reviews do you encounter comments like these:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"A trailing comma is unnecessary when you have only one callback argument..."'),(0,r.kt)("li",{parentName:"ul"},'"Please include a blank line before a return statement..."'),(0,r.kt)("li",{parentName:"ul"},'"We typically avoid using the .call() method explicitly..."')),(0,r.kt)("p",null,"If these situations occur frequently, especially when onboarding a new developer, then automation might be the solution. While this is most useful for team environments, it's essential to remember that even two developers can be considered a team (sometimes even one developer is a team)."),(0,r.kt)("p",null,"Another area where an analyzer can be invaluable is in identifying potential errors. Have you ever received or left comments such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"Is this unused parameter intentional?"'),(0,r.kt)("li",{parentName:"ul"},'"This variable will never be of that type..."'),(0,r.kt)("li",{parentName:"ul"},'"This switch statement has the same code in another case; this could be a copy-paste error..."')),(0,r.kt)("p",null,"A robust analyzer can detect such issues."),(0,r.kt)("p",null,"In general, the goal of this tool is to increase your efficiency in several ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You'll make fewer bugs because you won't overlook issues like unused parameters, duplicate if conditions, or incorrect type casting."),(0,r.kt)("li",{parentName:"ul"},"Your team won't have to debate code style \u2013 you can establish a single style and rely on the tool to ensure compliance."),(0,r.kt)("li",{parentName:"ul"},"During code reviews, you can focus on aspects that can't be automatically checked, such as architecture, readability, maintainability, and solving the actual business problem."),(0,r.kt)("li",{parentName:"ul"},"Onboarding new developers becomes faster and simpler, as they won't need to read a comprehensive code style guide (even if you have one). The analyzer will promptly flag any violations.")),(0,r.kt)("p",null,'Now, you might be wondering, "Why do we need another analyzer, especially a paid one, when Dart already has a built-in one?"'),(0,r.kt)("p",null,"Regarding Dart Code Metrics (DCM), it offers over 250 configurable rules. Some of them cater to commonly used libraries like ",(0,r.kt)("inlineCode",{parentName:"p"},"provider"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bloc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"patrol"),", and others\u2014features that the built-in analyzer can't provide."),(0,r.kt)("p",null,"The development cycle is much faster. While the built-in analyzer updates alongside the language, DCM releases updates approximately every month, consistently introducing new rules. For instance, in October, there were 14 new rules, 13 in September, 17 in August, and so on."),(0,r.kt)("p",null,"In essence, DCM aims to make you and your team even more efficient. If you're uncertain about the price-to-benefit ratio or need to convince stakeholders, refer to ",(0,r.kt)("a",{parentName:"p",href:"https://dcm.dev/blog/2023/04/23/dcm-return-on-investment/"},"this article")," on the official blog."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"...let's take a typical team of 5 people. Having introduced DCM, we can expect that, thanks to the saved time, the team will be able to perform useful work that will cost:")),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Skeptic:\xa0$24.000")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Reality:\xa0$36.000"))),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"And the Teams version for 5 people costs\xa0$840."))),(0,r.kt)("p",null,"I wholeheartedly endorse the calculations presented in the article and would even argue that the author might be underestimating the benefits DCM can bring to a team."),(0,r.kt)("p",null,"Let's now discuss the specific rules we've enabled in our configuration. Reading through all the rules doesn't make sense within this article (I'll give you a link to the full list at the end), so I'll touch on a few of them and provide examples."),(0,r.kt)("p",null,"When it comes to rules, I typically categorize them into several groups."),(0,r.kt)("p",null,'The first category, "code style lints," as I mentioned earlier, simplifies your life more than it enhances your safety. The exact style guide you follow doesn\'t matter as long as you have one.'),(0,r.kt)("p",null,"For instance, in our team, we've decided that an explicit call method for callable objects slightly reduces code readability. Therefore, we've enabled a rule that checks if we can use a shorter form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// BAD\n\nreturn _getPaymentsForCheckIn\n    .call(\n      reservation: reservation,\n      session: _session,\n      allProducts: allProducts,\n      allServices: allServices,\n    )\n    .letAsync(bind);\n\n// GOOD\n\nreturn _getPaymentsForCheckIn(\n  reservation: reservation,\n  session: _session,\n  allProducts: allProducts,\n  allServices: allServices,\n).letAsync(bind);\n")),(0,r.kt)("p",null,'The next, more critical category involves rules that enforce "best practices." While the boundary may sometimes be blurry, these rules typically have more or less formal justifications for their inclusion.'),(0,r.kt)("p",null,'For example, one of these "best practice" rules requires commenting on all analyzer ignores:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"if (resource.hasParent) {\n  // ignore: avoid-recursive-calls, base case is handled when the resource has no parent.\n  addNode(filteredResources[resource.parentId]!, node);\n}\n\nchild: Padding(\n  padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 40),\n  // TODO(KB): Check whether Row is needed here\n  // ignore: avoid-single-child-column-or-row\n  child: widget.isExpanded ? Row(children: [Expanded(child: content)]) : content,\n),\n")),(0,r.kt)("p",null,"No matter how reliable your analyzer is, there will be moments when you disagree with a rule. If these cases are infrequent, it's better to locally ignore the rule while providing a rationale. This is crucial because sometimes the analyzer may lack the necessary context or even contain a bug (yeah, that happens as well, life hurts)."),(0,r.kt)("p",null,"The next, even more critical category involves potential errors. These could be copy-paste errors, unused parameters, or obscure syntax or language behavior."),(0,r.kt)("p",null,"For instance, can you spot the error in the following code block?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// BAD\n\nif (accessInfo != null) {\n  await _processAccessInfo(accessInfo, emit);\n} else if (accessInfo != null) {\n  emit(const AuthState.pinRequired());\n}\n\n// GOOD\n\nif (accessInfo != null) {\n  await _processAccessInfo(accessInfo, emit);\n} else if (authenticator != null) {\n  emit(const AuthState.pinRequired());\n}\n")),(0,r.kt)("p",null,"Would you still spot this error if there were hundreds of other changes in the pull request? DCM does, and with the ",(0,r.kt)("inlineCode",{parentName:"p"},"no-equal-conditions")," rule enabled, it warns you that the second branch doesn't make sense because it has the same condition."),(0,r.kt)("p",null,"Another example of a potential error is the unnecessary use of the late keyword:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// BAD\n\nlate final String x;\n\nswitch (someCondition) {\n  case Some.option1:\n    x = 'a';\n    break;\n  case Some.option2:\n    x = 'b';\n    break;\n}\n\n// GOOD\n\nfinal String x;\n\nswitch (someCondition) {\n  case Some.option1:\n    x = 'a';\n    break;\n  case Some.option2:\n    x = 'b';\n    break;\n}\n")),(0,r.kt)("p",null,"I've even written ",(0,r.kt)("a",{parentName:"p",href:"https://ookamikb.dev/blog/2021/10/29/late/"},"an article")," explaining why this is undesirable. Fortunately, DCM can now detect it."),(0,r.kt)("p",null,'The last category, which I refer to as "template rules," doesn\'t necessarily make sense on its own. However, with custom parameters, it becomes quite powerful.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'avoid-banned-imports:\n  severity: error\n  entries:\n    - paths: [".*/models/.+\\\\.dart"]\n      deny: [".*/(data|services|widgets|screens|ui|l10n)/.*"]\n      message: "Do not import data|services|widgets|screens|ui|l10n from models"\n\n    - paths: [".*/data/.+\\\\.dart"]\n      deny: [".*/(services|widgets|screens|ui|l10n)/.*"]\n      message: "Do not import services|widgets|screens|ui|l10n from data"\n\n    - paths: [".*/services/.+\\\\.dart"]\n      deny: [".*/(widgets|screens|ui|l10n)/.*"]\n      message: "Do not import widgets|screens|ui|l10n from services"\n')),(0,r.kt)("p",null,'For instance, you can use the avoid-banned-imports rule to enforce layered architecture. With this setup, you can only allow importing dependencies from the "upper" layers, and the tool will immediately flag any attempts to import from the wrong layer.'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Analyzer feedback",src:n(5219).Z,width:"2272",height:"1644"})),(0,r.kt)("p",null,"In another project, I used this rule to emulate modules. A folder/module could have an internal ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," folder, and other modules couldn't import anything from this ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," folder. This approach resembled the package conventional structure, where packages cannot import anything from the ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," folders of other packages."),(0,r.kt)("p",null,"If you'd like to review the configuration we use in all our projects, please check our package, ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/mews_pedantic"},"mews_pedantic"),". You don't necessarily have to adopt this or any other package verbatim for your projects. Analyzer configuration is highly team-specific, particularly when it comes to code style or best practices rules, so what works for us might not be suitable for you."),(0,r.kt)("p",null,'However, I recommend going through all the rules and considering their relevance to your project. We follow the "enabled by default" approach, implying that there should be a compelling reason to disable a rule rather than enable it.'),(0,r.kt)("p",null,"Also, for your convenience, we maintain a list of all the rules in the configuration, with disabled ones merely commented out. This helps keep the configuration in sync with new rules."),(0,r.kt)("p",null,"So, what else does DCM offer? If you remain unconvinced, consider exploring other functionality that DCM provides:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Code metrics: While we don't use them, some teams find them valuable."),(0,r.kt)("li",{parentName:"ul"},"Custom formatter: Although we don't use it, if you're dissatisfied with the default formatter, DCM offers a more configurable alternative."),(0,r.kt)("li",{parentName:"ul"},"Detection of unused files, code, and dependencies: This is a great utility for larger codebases, allowing you to eliminate dead code."),(0,r.kt)("li",{parentName:"ul"},"Various code assists in IDEs."),(0,r.kt)("li",{parentName:"ul"},"Improved performance: DCM was initially developed as a plugin for the built-in analyzer, and its performance was subpar, especially for large codebases. However, the current standalone version is significantly faster."),(0,r.kt)("li",{parentName:"ul"},"Strong support from the author is available in the Discord channel.")),(0,r.kt)("p",null,"Lastly, but certainly not least, DCM has recently introduced a new free license for open-source repositories:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Free for OSS",src:n(6156).Z,width:"2916",height:"2042"})),(0,r.kt)("p",null,"DCM proves to be an invaluable companion, helping developers and teams achieve new heights of efficiency and code quality. It's high time to embrace advanced code analysis and style enforcement, and Dart Code Metrics, especially with a new licensing policy, stands as a standout choice to achieve these objectives."))}p.isMDXComponent=!0},5219:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dcm-1-4b73f8ca1767f9322bd355925d611cce.png"},6156:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dcm-2-9cec77df49a671e515f3a43a346d071c.png"}}]);