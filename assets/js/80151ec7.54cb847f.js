"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2913],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?i.createElement(f,a(a({ref:t},d),{},{components:n})):i.createElement(f,a({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4219:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},a="Flutter & Dart tips",l={unversionedId:"flutter-dart-tips",id:"flutter-dart-tips",title:"Flutter & Dart tips",description:"A collection of different tips for Flutter and Dart, mainly some things found during code reviews.",source:"@site/docs/flutter-dart-tips.md",sourceDirName:".",slug:"/flutter-dart-tips",permalink:"/docs/flutter-dart-tips",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/intro"},next:{title:"Flutter packages",permalink:"/docs/flutter-packages"}},s={},p=[{value:"Test files suffix",id:"test-files-suffix",level:2},{value:"Beware of <code>firstWhere</code>",id:"beware-of-firstwhere",level:2},{value:"<code>setUp</code> in tests",id:"setup-in-tests",level:2},{value:"Errors &amp; Exceptions",id:"errors--exceptions",level:2},{value:"<code>switch</code> vs <code>if</code>",id:"switch-vs-if",level:2},{value:"Empty strings and lists",id:"empty-strings-and-lists",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flutter--dart-tips"},"Flutter & Dart tips"),(0,r.kt)("p",null,"A collection of different tips for Flutter and Dart, mainly some things found during code reviews."),(0,r.kt)("h2",{id:"test-files-suffix"},"Test files suffix"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Don't forget about ",(0,r.kt)("inlineCode",{parentName:"p"},"_test")," suffix.")),(0,r.kt)("p",null,"Test files should reside inside a test folder located at the root of your Flutter application or package."),(0,r.kt)("p",null,"Test files should always end with ",(0,r.kt)("inlineCode",{parentName:"p"},"_test.dart"),", this is the convention used by the test runner when searching for tests."),(0,r.kt)("p",null,"Don't forget about adding ",(0,r.kt)("inlineCode",{parentName:"p"},"_test")," suffix to you test files: this is how test runner finds tests. When you\u2019re creating your first test file, it\u2019s easy to spot the mistake, since flutter test will give you an error for no test files found."),(0,r.kt)("p",null,"But when you already have hundreds of tests, it\u2019s easy to forget about it and end up with \u201cignored\u201d test. Even during code review we\u2019re not always that watchful about file names."),(0,r.kt)("admonition",{title:"Further reading",type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.flutter.dev/testing"},"https://docs.flutter.dev/testing")))),(0,r.kt)("h2",{id:"beware-of-firstwhere"},"Beware of ",(0,r.kt)("inlineCode",{parentName:"h2"},"firstWhere")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"firstWhere")," can throw ",(0,r.kt)("inlineCode",{parentName:"p"},"StateError"),".")),(0,r.kt)("p",null,"If you don't specify ",(0,r.kt)("inlineCode",{parentName:"p"},"orElse")," function, and there's no element in collection that satisfies the given predicate, ",(0,r.kt)("inlineCode",{parentName:"p"},"firstWhere")," function will throw ",(0,r.kt)("inlineCode",{parentName:"p"},"StateError"),"."),(0,r.kt)("p",null,"Also, you cannot just return ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"orElse")," function, as it doesn't satisfy the function signature."),(0,r.kt)("p",null,'Instead, use "safer" ',(0,r.kt)("inlineCode",{parentName:"p"},"firstWhereOrNull")," function from ",(0,r.kt)("inlineCode",{parentName:"p"},"collection")," package."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void main() {\n  final list = [1, 2, 4];\n\n  // Bad state: no element\n  // This will error\n  final a = list.firstWhere((e) => e == 3);\n\n  // Won't compile:\n  // The return type `Null` isn't a `int`, as required by the closure's context.\n  // This will error\n  final b = list.firstWhere((e) => e == 3, orElse: () => null);\n\n  // c == null\n  // highlight-next-line\n  final c = list.firstWhereOrNull((e) => e == 3);\n}\n")),(0,r.kt)("admonition",{title:"Further reading",type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api.dart.dev/stable/2.8.2/dart-core/Iterable/firstWhere.html"},"https://api.dart.dev/stable/2.8.2/dart-core/Iterable/firstWhere.html")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api.flutter.dev/flutter/package-collection_collection/IterableExtension/firstWhereOrNull.html"},"https://api.flutter.dev/flutter/package-collection_collection/IterableExtension/firstWhereOrNull.html")))),(0,r.kt)("h2",{id:"setup-in-tests"},(0,r.kt)("inlineCode",{parentName:"h2"},"setUp")," in tests"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Prefer ",(0,r.kt)("inlineCode",{parentName:"p"},"setUp")," over ",(0,r.kt)("inlineCode",{parentName:"p"},"setUpAll"),".")),(0,r.kt)("p",null,"Making tests (especially, unit tests) run faster is important. But even more important is to not introduce hidden dependencies between them."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"setUpAll")," makes it very easy to accidentally introduce hidden dependencies between tests that should be isolated."),(0,r.kt)("p",null,"Avoid using ",(0,r.kt)("inlineCode",{parentName:"p"},"setUpAll")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"tearDownAll")," unless absolutely necessary, and prefer using ",(0,r.kt)("inlineCode",{parentName:"p"},"setUp")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"tearDown"),"."),(0,r.kt)("p",null,"One way to find hidden dependency is to run tests in random order:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"flutter test --test-randomize-ordering-seed random\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void main() {\n  setUpAll(() {\n    // Set up dependencies that are very slow and unpractical\n    // to do before every test.\n  });\n\n  setUp(() {\n    // Everything else.\n    //\n    // You can also reset the state of dependencies created in setUpAll\n    // to avoid hidden test dependencies.\n  });\n\n  test('add', () {\n    expect(add(1, 2), 3);\n  });\n}\n")),(0,r.kt)("admonition",{title:"Further reading",type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api.flutter.dev/flutter/flutter_test/setUpAll.html"},"https://api.flutter.dev/flutter/flutter_test/setUpAll.html")))),(0,r.kt)("h2",{id:"errors--exceptions"},"Errors & Exceptions"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Don't catch ",(0,r.kt)("inlineCode",{parentName:"p"},"Error"),".")),(0,r.kt)("p",null,"The difference between Errors and Exceptions is a common source of confusion for Dart/Flutter developers, especially for those coming from other languages."),(0,r.kt)("p",null,"Exceptions are conditions that you should plan ahead for and catch."),(0,r.kt)("p",null,"Errors are bugs in your code. You shouldn\u2019t catch them."),(0,r.kt)("p",null,"That's why, for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"tryEither")," function, our custom implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"Try")," monad, only catches ",(0,r.kt)("inlineCode",{parentName:"p"},"Exception"),"s."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void main() {\n  try {\n    functionThatThrowsException();\n  } on Exception {\n    // Do something.\n  }\n\n  try {\n    functionThatThrowsError();\n  } on Error {\n    // Don't do that!\n  }\n\n  // Result will be Left(Exception).\n  final result = tryEither((_) => functionThatThrowsException());\n\n  // Will throw Error.\n  // This will error\n  final result = tryEither((_) => functionThatThrowsError());\n}\n\nvoid functionThatThrowsException() => throw Exception();\nvoid functionThatThrowsError() => throw Error();\n")),(0,r.kt)("admonition",{title:"Further reading",type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dart.dev/guides/libraries/library-tour#exceptions"},"https://dart.dev/guides/libraries/library-tour#exceptions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api.dart.dev/stable/2.16.1/dart-core/Exception-class.html"},"https://api.dart.dev/stable/2.16.1/dart-core/Exception-class.html")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api.dart.dev/stable/2.16.1/dart-core/Error-class.html"},"https://api.dart.dev/stable/2.16.1/dart-core/Error-class.html")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/dfunc/latest/dfunc/tryEither.html"},"https://pub.dev/documentation/dfunc/latest/dfunc/tryEither.html")))),(0,r.kt)("h2",{id:"switch-vs-if"},(0,r.kt)("inlineCode",{parentName:"h2"},"switch")," vs ",(0,r.kt)("inlineCode",{parentName:"h2"},"if")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Prefer explicit ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," over ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),".")),(0,r.kt)("p",null,"Prefer ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," over ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," (or ternary operator) when dealing with ",(0,r.kt)("inlineCode",{parentName:"p"},"enum"),"s."),(0,r.kt)("p",null,"Even if you're only interested in the subset of options, prefer explicitly mentioning all the branches."),(0,r.kt)("p",null,"It will be safer to update enum in the future, since compiler will tell you all the places that need to be changed."),(0,r.kt)("admonition",{title:"Avoid using conditional expressions with enums",type:"danger"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"enum Option { optionA, optionB, optionC }\n\nString optionToString1(Option option) =>\n    option == Option.optionA ? 'A' : 'other';\n"))),(0,r.kt)("admonition",{title:"A slightly better version, but still not future-proof",type:"caution"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"enum Option { optionA, optionB, optionC }\n\nString optionToString2(Option option) {\n  switch (option) {\n    case Option.optionA:\n      return 'A';\n    default:\n      return 'other';\n  }\n}\n"))),(0,r.kt)("admonition",{title:"This is the preferable option",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You explicitly show your intentions and the compiler will force you to update it whenever enum changes."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"enum Option { optionA, optionB, optionC }\n\nString optionToString3(Option option) {\n  switch (option) {\n    case Option.optionA:\n      return 'A';\n    case Option.optionB:\n    case Option.optionC:\n      return 'other';\n  }\n}\n"))),(0,r.kt)("h2",{id:"empty-strings-and-lists"},"Empty strings and lists"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Avoid using nullable strings and lists.")),(0,r.kt)("p",null,"Some types (",(0,r.kt)("inlineCode",{parentName:"p"},"List"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),', etc) have a built-in "empty" state \u2013 empty string, empty list etc.'),(0,r.kt)("p",null,"Unless you really have a meaningful difference between ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and empty ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),", avoid making these types nullable."),(0,r.kt)("p",null,'Not only does it make handling them easier, but it\'s also less confusing for clients, as there will be only one way to define "no value" option.'),(0,r.kt)("admonition",{title:"Bad",type:"danger"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void main() {\n  List<int>? someList = [];\n  final result = someList?.map((e) => e.toString()) ?? [];\n\n  String? someString = 'some string';\n  if (someString != null && someString.isNotEmpty) {\n    print(someString);\n  }\n}\n"))),(0,r.kt)("admonition",{title:"Good",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void main() {\n  List<int> someList = [];\n  final result = someList.map((e) => e.toString());\n\n  String someString = 'some string';\n  if (someString.isNotEmpty) {\n    print(someString);\n  }\n}\n"))))}u.isMDXComponent=!0}}]);