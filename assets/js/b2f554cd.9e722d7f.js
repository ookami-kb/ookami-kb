"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/09/02/flutter-nfc","metadata":{"permalink":"/blog/2022/09/02/flutter-nfc","source":"@site/blog/2022-09-02-flutter-nfc/index.md","title":"Working with NFC in Flutter","description":"Enter our career fair project","date":"2022-09-02T00:00:00.000Z","formattedDate":"September 2, 2022","tags":[],"readingTime":10.92,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Working with NFC in Flutter","date":"2022-09-02"},"nextItem":{"title":"ViewModel \u0432\u043e Flutter \u2013 \u044d\u0442\u043e \u0430\u043d\u0442\u0438\u043f\u0430\u0442\u0442\u0435\u0440\u043d","permalink":"/blog/2021/12/19/viewmodel-ru"}},"content":"![](thumb.jpg)\\n\\n## Enter our career fair project\\n\\nFor the latest career fair at [MatFyz](https://www.mff.cuni.cz/en), we wanted to build something interesting: from one side, it should be more than just \\"here is our merch, come work with us\\"; from another side, it should showcase the products we were working on at Mews.\\n\\nSince one of our products is a kiosk for self-service check-ins at hotels, we decided to emulate a hotel check-in experience with guests entering their details into a registration card, cutting their \\"key\\" with an emulated key cutter, and later taking part in a lottery with randomly selecting winning room numbers.\\n\\n\x3c!--truncate--\x3e\\n\\n### What is a key cutter?\\n\\nIf you google \\"key cutter\\" images, it will show you something like this:\\n\\n![](key_cutter.jpg)\\n\\nThis is definitely not the device hotel guests are supposed to use to check into their rooms.\\n\\nA hotel key cutter is basically an RFID-card encoder: an electronic device that looks like a payment terminal. During \\"traditional\\" check-in, a receptionist takes an empty RFID-card and uses this device to write some information on the card. Later, the room door lock reads this information and opens the door for you. This process of \\"cutting\\" the key card is usually not visible, often cards are prepared in advance before check-in.\\n\\nWhen using the self-service kiosk, you can do this on your own: following instructions on the screen, you take a new RFID-card from the pile and place it on the key cutter:\\n\\n![](key_cutting_kiosk.png)\\n\\nThere can be more complex devices (e.g., with automatic card dispensers), but we will emulate exactly this type, which is pretty popular.\\n\\n### How did we go about it?\\n\\nThis article will be about this \\"key cutting\\" process. At first, we wanted to set up a real key cutter, but there are a lot of technical and legal problems associated with them, so we decided to create a simple mobile app that will write a room number on an NFC-card. Later, a user can just come up with this card so that we can read their room number and match it with the winning numbers.\\n\\nLet\'s talk about this overall process of key cutting and how it works in production for a real hotel kiosk:\\n\\n```mermaid\\nsequenceDiagram\\n    Kiosk->>Server: Add CutKey command\\n    Server->>Connector: CutKey command added\\n    Connector->>Server: Command is accepted\\n    Server->>Kiosk: Command is accepted\\n    Connector->>Key Cutter: Cut key\\n    Key Cutter->>Connector: Key is ready\\n    Connector->>Server: Command is processed\\n    Server->>Kiosk: Command is processed\\n```\\n\\nIn our setup, Kiosk doesn\'t communicate directly with Key Cutter. Instead, when the guest presses the \\"Cut key\\" button, Kiosk issues a command to our Web Server, and Server creates a command in the special queue. In the hotel, there is a separate desktop application (Connector) that listens to this queue and communicates with the hardware Key Cutter. When the key is cut, Key Cutter notifies Connector, and Connector sends the confirmation back to Server. After that, Server notifies Kiosk via Websocket that the key is ready.\\n\\nIt sounds like a complex setup (and it is), but it allows us to completely decouple Kiosk from Key Cutters \u2013 and since Kiosk is not the only client that deals with Key Cutters (and other peripherals), we keep all the knowledge on how to work with peripherals in one place.\\n\\nIn our \\"emulated\\" version, both the Key Cutter and Connector roles are fulfilled by the mobile app. The good thing is that Kiosk already uses our public API, the same one that is used by the Connector desktop app. That means that we already have the API implementation in Dart and can reuse it for our \\"key cutter\\".\\n\\nSo the emulated workflow looks like this:\\n\\n```mermaid\\nsequenceDiagram\\n    Kiosk->>Server: Add CutKey command\\n    Server->>App: CutKey command added\\n    App->>Server: Command is accepted\\n    Server->>Kiosk: Command is accepted\\n    App->>App: Cut key\\n    App->>Server: Command is processed\\n    Server->>Kiosk: Command is processed\\n```\\n\\nIn fact, we\'re just merging two entities, Key Cutter and Connector, into one mobile app. Kiosk still communicates with Server, but all the logic of receiving the key cutting command and \\"cutting\\" the key now happens in the custom app.\\n\\nNow let\u2019s discuss this app in detail. For that, we will need to know more about NFC.\\n\\n## What is NFC?\\n\\nLet\'s start with another question: \\"What is RFID?\\"\\n\\n:::tip _Beginning NFC_ by Tom Igoe, Don Coleman, Brian Jepson\\n\\nImagine you\u2019re sitting on your porch at night. You turn on the porch light, and you can see your neighbor as he passes close to your house because the light reflects off him back to your eyes. That\u2019s passive RFID. [...]\\n\\nNow imagine you turn on your porch light, and your neighbor in his home sees it and flicks on his porch light so that you can see him waving hello from his porch. That\u2019s active RFID. [...]\\n\\nRFID is a lot like those two porches. You and your neighbor know each other\u2019s faces, but you don\u2019t really learn a lot about each other that way. You don\u2019t exchange any meaningful messages. RFID is not a communications technology; rather, it\u2019s designed for identification. RFID tags can hold a small amount of data, and you can read and write to them from RFID readers, but the amount of data we\u2019re talking about is trivial, a thousand bytes or less.\\n\\n:::\\n\\nRFID and NFC are often conflated, but they\u2019re not the same thing. Though NFC readers can read from and write to some RFID tags, NFC has more capabilities than RFID, and enables a greater range of uses. You can think of NFC as an extension of RFID, building on a few of the many RFID standards to create a wider data exchange platform.\\n\\nSo, what is NFC?\\n\\n:::tip <https://nfc-forum.org/what-is-nfc/>\\n\\nNear Field Communication (NFC) is a contact-less communication technology based on a radio frequency (RF) field using a base frequency of 13.56 MHz. It is designed to exchange data between two devices through a simple touch gesture.\\n\\n:::\\n\\n| RFID                      | NFC                      |\\n| ------------------------- | ------------------------ |\\n| Uses radio frequency      | Uses radio frequency     |\\n| Identification technology | Communication technology |\\n| No single standard        | Standardized             |\\n\\n## Different standards\\n\\nWe decided to go with the [nfc_manager](https://pub.dev/packages/nfc_manager) plugin. It\'s a wrapper around platform specific NFC _(or rather RFID)_ capabilities.\\n\\nIt provides the following platform-tag-classes:\\n\\n| Type             | Android | iOS |\\n| ---------------- | :-----: | :-: |\\n| Ndef             |   \u2705    | \u2705  |\\n| FeliCa           |   \u274c    | \u2705  |\\n| Iso7816          |   \u274c    | \u2705  |\\n| Iso15693         |   \u274c    | \u2705  |\\n| MiFare           |   \u274c    | \u2705  |\\n| NfcA             |   \u2705    | \u274c  |\\n| NfcB             |   \u2705    | \u274c  |\\n| NfcF             |   \u2705    | \u274c  |\\n| NfcV             |   \u2705    | \u274c  |\\n| IsoDep           |   \u2705    | \u274c  |\\n| MifareClassic    |   \u2705    | \u274c  |\\n| MifareUltralight |   \u2705    | \u274c  |\\n| NdefFormatable   |   \u2705    | \u274c  |\\n\\nAs you can see, the only type that is available on both platforms is NDEF. And that is expectable, as this is the standardized format for NFC Forum Tags.\\n\\n:::tip <https://nfc-forum.org/what-is-nfc/about-the-technology/>\\n\\nNFC Forum Tags are contact-less memory cards hosting a so called NDEF message (NDEF is standing for NFC Data Exchange Format) defined by an NFC Forum Specification. NFC Forum has currently defined five different NFC Forum Tag types to allow the usage of many different existing memory card implementations as NFC Forum Tags. These different NFC Forum Tag types differ by the underlying communication protocol and data structure to store NDEF messages but the resulting overall behavior of NFC Forum Tags is identical.\\n\\n:::\\n\\nThat means if we want to go cross-platform, we should use NDEF-compatible cards. This can be a problem on its own \u2013 when we were looking for the cards for our project, we failed to find them.\\n\\nAt least we managed to find Mifare Desfire EV1 which can be formatted to NDEF format, but it can only be done with Android. So it\'s either formatting the cards in advance and then using any mobile phone for writing NDEF messages, or using Android for writing the data (later both iPhone and Android can be used for reading the data).\\n\\nWe decided to choose the second way, as Android has some other advantages for serving as an improvised key cutter.\\n\\n## iOS vs Android \u2013 UX, custom behavior\\n\\nIf you have an NDEF-formatted card, you can read and write using both Android and iPhone. But we didn\'t need a \\"B2C\\"-style app, we were going to create a key cutter emulator. And for this, Android is a better choice:\\n\\n- iOS supports NDEF-formatted cards, while Android can also operate on so-called NDEF-formattable cards, formatting them and writing NDEF messages (after that it can be read by iOS as well);\\n- iOS displays a system dialog when initiating an NFC session. Android allows you to do the scanning in the background, providing a clearer experience;\\n- there\'s one advantage in iOS devices though, at least among the devices I\'ve tested. The NFC-reader is more sensitive and can read/write data when you touch the front side of the device.\\n\\n## Implementation\\n\\nThe \\"key cutting\\" logic is pretty simple: we\'re just connecting to the server and waiting for the command. After the command is received, we fetch additional data (since the command itself contains only the room number, we need to fetch the reservation details) and validate them (it should point to the correct active reservation). If the data are valid, we start an NFC writing session: enter discovering tag mode, and write the data (room number in our case) after the tag is discovered (aka NFC-card bumped to the phone). After that, we return to the \\"waiting\\" state, and the process repeats.\\n\\n```mermaid\\nstateDiagram-v2\\n    direction LR\\n\\n    state Validating <<choice>>\\n    state \\"NFC writing session\\" as WriteSession\\n    state \\"Waiting for command\\" as Waiting\\n\\n    [*] --\x3e Waiting\\n    Waiting --\x3e FetchingData: Command received\\n    FetchingData --\x3e Validating\\n    Validating --\x3e Waiting: Invalid\\n    Validating --\x3e WriteSession: Valid\\n\\n    state WriteSession {\\n        [*] --\x3e DiscoveringTag\\n        DiscoveringTag --\x3e Writing\\n        Writing --\x3e [*]\\n    }\\n\\n    WriteSession --\x3e Waiting\\n```\\n\\nThis state diagram can be easily mapped to the BLoC code, so let\'s just take a look at the NFC writing part:\\n\\n```dart\\nFuture<void> _writeNumber(String number) {\\n  final completer = Completer<void>();\\n\\n  NfcManager.instance.startSession(\\n    onDiscovered: (tag) async {\\n      final ndef = Ndef.from(tag);\\n      final formattable = NdefFormatable.from(tag);\\n\\n      final message = NdefMessage([NdefRecord.createText(number)]);\\n      if (ndef != null) {\\n        await ndef.write(message);\\n      } else if (formattable != null) {\\n        await formattable.format(message);\\n      }\\n      await NfcManager.instance.stopSession();\\n      completer.complete();\\n    },\\n    onError: (error) async => completer.completeError(error),\\n  );\\n\\n  return completer.future;\\n}\\n```\\n\\nAs you see, we\'re starting an NFC session, and passing it a callback as `onDiscovered` parameter \u2013 it will be triggered once an NFC trigger detects a tag nearby. As I mentioned earlier, in Android we can work with either NDEF or NDEF formattable tags, so if the tag of the correct type was bumped, we just write the prepared message there (which contains just the the room number in our case) and close the session.\\n\\nThe code for the reading part of the app is pretty straightforward as well. I will show the complete source code for the `NfcReaderBloc`, but the most interesting part is the `_onTagDiscovered` method:\\n\\n```dart\\ntypedef _Event = NfcReaderEvent;\\ntypedef _State = NfcReaderState;\\ntypedef _EventHandler = EventHandler<_Event, _State>;\\ntypedef _Emitter = Emitter<_State>;\\n\\nclass NfcReaderBloc extends Bloc<_Event, _State> {\\n  NfcReaderBloc() : super(const Waiting()) {\\n    on<_Event>(_eventHandler, transformer: droppable());\\n\\n    NfcManager.instance.startSession(\\n      onDiscovered: (tag) async => add(TagDiscovered(tag)),\\n      onError: (e) async => add(Failed(e)),\\n    );\\n  }\\n\\n  _EventHandler get _eventHandler => (event, emit) => event.map(\\n        tagDiscovered: (event) => _onTagDiscovered(event, emit),\\n        failed: (event) => _onFailed(event, emit),\\n      );\\n\\n  Future<void> _onTagDiscovered(TagDiscovered event, _Emitter emit) async {\\n    try {\\n      final ndef = Ndef.from(event.tag);\\n      if (ndef == null) throw Exception(\'No NDEF tag\');\\n\\n      final data = await ndef.read();\\n\\n      emit(Success(utf8.decode(data.records.first.payload).substring(3)));\\n    } on Object {\\n      emit(const Failure());\\n    }\\n\\n    await Future<void>.delayed(const Duration(seconds: 3));\\n    emit(const Waiting());\\n  }\\n\\n  Future<void> _onFailed(Failed _, _Emitter emit) async {\\n    emit(const Failure());\\n    await Future<void>.delayed(const Duration(seconds: 3));\\n    emit(const Waiting());\\n  }\\n\\n  @override\\n  Future<void> close() {\\n    NfcManager.instance.stopSession();\\n\\n    return super.close();\\n  }\\n}\\n\\n@freezed\\nclass NfcReaderEvent with _$NfcReaderEvent {\\n  const factory NfcReaderEvent.tagDiscovered(NfcTag tag) = TagDiscovered;\\n  const factory NfcReaderEvent.failed(NfcError e) = Failed;\\n}\\n\\n@freezed\\nclass NfcReaderState with _$NfcReaderState {\\n  const factory NfcReaderState.waiting() = Waiting;\\n  const factory NfcReaderState.success(String number) = Success;\\n  const factory NfcReaderState.failure() = Failure;\\n}\\n```\\n\\nAs you see, when the tag is discovered, we just read the first record there (assuming that we read the NDEF formatted tag) and emit it as a new state. The only trick here is to skip the first three bytes of the payload. This is needed because, according to the NDEF specification, the first byte in the payload is reserved to store the length of the language code (N), then goes N bytes to store the language code itself, and then the actual record content (our message). In our case, we only use EN language (two bytes for the code), so we can hard-code to skip the three reserved bytes.\\n\\n## Demo\\n\\n<video controls width=\\"100%\\">\\n  <source src=\\"/kiosk.mp4\\"/>\\n</video>\\n\\n---\\n\\nThe result was pretty good and we received a lot of positive feedback, so we decided to reuse this idea for WebExpo 2022, but that\'s a different story."},{"id":"/2021/12/19/viewmodel-ru","metadata":{"permalink":"/blog/2021/12/19/viewmodel-ru","source":"@site/blog/2021-12-19-viewmodel-ru/index.md","title":"ViewModel \u0432\u043e Flutter \u2013 \u044d\u0442\u043e \u0430\u043d\u0442\u0438\u043f\u0430\u0442\u0442\u0435\u0440\u043d","description":"\u0412\u0441\u0435\u043c \u043f\u0440\u0438\u0432\u0435\u0442! \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e \u0432\u0430\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043c\u043e\u0435\u0433\u043e \u0434\u043e\u043a\u043b\u0430\u0434\u0430 \u043d\u0430 DartUP 2021 (\u0441\u0430\u043c \u0434\u043e\u043a\u043b\u0430\u0434 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u0434\u0435\u0441\u044c). \u041f\u043e\u0441\u0432\u044f\u0449\u0435\u043d \u043e\u043d \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u043c\u0443 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u043c\u0443 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 MVVM (\u043e\u043d \u0436\u0435 Model-View-ViewModel), \u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e \u0442\u043e\u0439 \u0435\u0433\u043e \u0447\u0430\u0441\u0442\u0438, \u0447\u0442\u043e \u043f\u0440\u043e ViewModel.","date":"2021-12-19T00:00:00.000Z","formattedDate":"December 19, 2021","tags":[],"readingTime":13.49,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"ViewModel \u0432\u043e Flutter \u2013 \u044d\u0442\u043e \u0430\u043d\u0442\u0438\u043f\u0430\u0442\u0442\u0435\u0440\u043d"},"prevItem":{"title":"Working with NFC in Flutter","permalink":"/blog/2022/09/02/flutter-nfc"},"nextItem":{"title":"Another app migrated to Flutter","permalink":"/blog/2021/11/26/flutter-kiosk"}},"content":"\u0412\u0441\u0435\u043c \u043f\u0440\u0438\u0432\u0435\u0442! \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e \u0432\u0430\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043c\u043e\u0435\u0433\u043e \u0434\u043e\u043a\u043b\u0430\u0434\u0430 \u043d\u0430 DartUP 2021 (\u0441\u0430\u043c \u0434\u043e\u043a\u043b\u0430\u0434 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 [\u0437\u0434\u0435\u0441\u044c](https://youtu.be/J7fDHul6Oao)). \u041f\u043e\u0441\u0432\u044f\u0449\u0435\u043d \u043e\u043d \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u043c\u0443 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u043c\u0443 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 MVVM (\u043e\u043d \u0436\u0435 Model-View-ViewModel), \u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e \u0442\u043e\u0439 \u0435\u0433\u043e \u0447\u0430\u0441\u0442\u0438, \u0447\u0442\u043e \u043f\u0440\u043e ViewModel.\\n\\n\u041f\u0430\u0442\u0442\u0435\u0440\u043d \u044d\u0442\u043e\u0442 \u0432\u0435\u0441\u044c\u043c\u0430 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d \u0432 \u043c\u0438\u0440\u0435 \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0439 Android-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u2013 \u0432\u043e \u043c\u043d\u043e\u0433\u043e\u043c \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0435\u0439 Google. \u0410 \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u043d\u043e\u0433\u0438\u0435 Flutter-\u0434\u0435\u0432\u0435\u043b\u043e\u043f\u0435\u0440\u044b \u043f\u043e\u043f\u0430\u043b\u0438 \u0432 \u043c\u0438\u0440 Flutter\'\u0430 \u0438\u0437 \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e Android\'\u0430, \u0442\u043e \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043e\u043d\u0438 \u0441\u043a\u043b\u043e\u043d\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0442\u0435 \u0436\u0435 \u0441\u0430\u043c\u044b\u0435. \u041a\u0430\u043a \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u0441\u044f, \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u2013 \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0439 \u0438 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043c\u0435\u043d\u044f\u0439.\\n\\n\u041d\u043e \u043a\u0430\u043a \u043f\u043e \u043c\u043d\u0435, \u0432 \u043c\u0438\u0440\u0435 Flutter\'\u0430 \u044d\u0442\u043e\u0442 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043d\u0435 \u0442\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u0430 \u0441\u043a\u043e\u0440\u0435\u0435 \u0434\u0430\u0436\u0435 \u0438 \u0432\u0440\u0435\u0434\u0435\u043d. \u0418 \u0441\u0435\u0439\u0447\u0430\u0441 \u044f \u0431\u0443\u0434\u0443 \u0432\u0430\u0441 \u0432 \u044d\u0442\u043e\u043c \u0443\u0431\u0435\u0436\u0434\u0430\u0442\u044c.\\n\\n:::note\\n\\n\u041f\u0430\u0440\u0430 \u0441\u043b\u043e\u0432 \u043e\u0431\u043e \u043c\u043d\u0435. \u041f\u043e\u043c\u0438\u043c\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u043c \u0442\u0435\u0445\u043b\u0438\u0434\u043e\u043c, \u044f \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0441\u044c \u0440\u0430\u0437\u043d\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u043c\u0435\u043d\u0442\u043e\u0440\u0438\u043d\u0433\u043e\u043c \u0438 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0430\u0440\u0442\u0430\u043f\u043e\u0432 \u043f\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432 \u0446\u0435\u043b\u043e\u043c, \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Flutter\'\u0435 \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438. \u0422\u0430\u043a \u0447\u0442\u043e \u0443 \u043c\u0435\u043d\u044f \u0431\u044b\u043b\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0437\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u043d\u0430 \u043a\u043e\u0434 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0443\u044e\u0442\u043d\u043e\u0433\u043e \u043c\u0438\u0440\u043a\u0430 \u043d\u0430\u0448\u0435\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u043a\u0440\u0443\u0433\u043e\u0437\u043e\u0440.\\n\\n:::\\n\\n## \u0418\u0441\u0442\u043e\u0440\u0438\u044f MVVM\\n\\n\u0412 \u043d\u0430\u0447\u0430\u043b\u0435, \u043a\u0430\u043a \u0432\u043e\u0434\u0438\u0442\u0441\u044f, \u0431\u044b\u043b\u043e \u0441\u043b\u043e\u0432\u043e. \u0421\u043a\u0430\u0437\u0430\u043d\u043e \u043e\u043d\u043e \u0431\u044b\u043b\u043e Microsoft\'\u043e\u043c \u0432 2005 \u0433\u043e\u0434\u0443, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0434\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u0438\u044f GUI \u043e\u0442 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438.\\n\\n![](./vm1.png)\\n\\n\u041f\u0430\u0442\u0442\u0435\u0440\u043d, \u043a\u0430\u043a \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430, \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0442\u0440\u0435\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432:\\n\\n**Model** \u2013 \u0442\u043e, \u0447\u0442\u043e \u043e\u0431\u044b\u0447\u043d\u043e \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u0440\u043e \u043d\u0435\u0435 \u043c\u044b \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u043c.\\n\\n**View** \u2013 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0438\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435. \u041d\u0438\u0447\u0435\u043c, \u043f\u043e \u0441\u0443\u0442\u0438, \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 View \u0438\u0437 MVC \u0438\u043b\u0438 MVP.\\n\\n**ViewModel** \u2013 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0433\u0435\u0440\u043e\u0439 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0438, \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u043d\u0430\u0434 View \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438.\\n\\n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c **View** \u0438 **ViewModel** \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0442 \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0441\u043b\u043e\u0439, \u0430 **Model** \u2013 \u044d\u0442\u043e \u0443\u0436\u0435 \u0441\u043b\u043e\u0439 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438.\\n\\n\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0438\u0434\u0435\u0435\u0439 MVVM \u0431\u044b\u043b\u043e \u0431\u0443\u043a\u0432\u0430\u043b\u044c\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c \u0432\u0435\u0441\u044c GUI \u043a\u043e\u0434 \u0438\u0437 \u0441\u043b\u043e\u044f View. \u0422\u043e\u0433\u0434\u0430 UX-\u0434\u0435\u0432\u0435\u043b\u043e\u043f\u0435\u0440\u044b \u0441\u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0440\u0430\u0434\u043e\u0441\u0442\u043d\u043e \u0432\u043e\u043e\u0440\u0443\u0436\u0438\u0442\u044c\u0441\u044f \u044f\u0437\u044b\u043a\u043e\u043c \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u0438 \u0441\u043e\u043e\u0440\u0443\u0434\u0438\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043c\u0435\u0447\u0442\u044b, \u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u0441\u043a\u0443\u0447\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043b\u043e\u0433\u0438\u043a\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c.\\n\\n## ViewModel \u0438 Android\\n\\n\u041f\u0440\u043e\u0448\u043b\u043e 12 \u043b\u0435\u0442. \u041d\u0430 Google I/O 2017 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0438\u0437 Android Framework \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043b\u0430 \u043d\u0430\u0431\u043e\u0440 Architecture Components. \u041e\u0434\u043d\u0438\u043c \u0438\u0437 \u044d\u0442\u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0438 \u0431\u044b\u043b\u0430 ViewModel. \u0420\u0435\u0448\u0430\u043b\u0430 \u043e\u043d\u0430, \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 \u043e\u0442\u0447\u0430\u0441\u0442\u0438, \u0441\u0443\u0433\u0443\u0431\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b Android\'\u0430.\\n\\n\u0414\u0435\u043b\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e Android \u0441\u0430\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c UI-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a Activity \u0438\u043b\u0438 Fragment. \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0441\u0430\u043c \u0440\u0435\u0448\u0430\u0435\u0442, \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0434\u043e \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0438\u0442\u044c, \u0430 \u043a\u043e\u0433\u0434\u0430 \u0432\u043e\u0441\u0441\u043e\u0437\u0434\u0430\u0442\u044c UI-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u2013 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430. \u0412\u044b, \u043a\u0430\u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u043d\u0438\u043a\u0430\u043a \u043f\u043e\u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u044d\u0442\u043e \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435. \u041e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u044d\u0442\u043e, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 Activity \u0438\u043b\u0438 Fragment\'\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u0447\u0435\u0437\u043d\u0443\u0442\u044c \u0441\u0430\u043c\u044b\u043c \u043d\u0435\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0438 \u0432 \u0441\u0430\u043c\u044b\u0439 \u043d\u0435\u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442. \u0415\u0449\u0435 \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0437\u0430 \u0432\u0441\u044f\u043a\u0438\u043c\u0438 \u0444\u043e\u043d\u043e\u0432\u044b\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0442\u043e\u0436\u0435 \u043d\u0430\u0434\u043e \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043b\u0435\u0434\u0438\u0442\u044c \u2013 \u0432\u043e\u0432\u0440\u0435\u043c\u044f \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0442\u044c \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0445 \u0437\u0430\u043d\u043e\u0432\u043e, \u0434\u0443\u043c\u0430\u0442\u044c \u043a\u0430\u043a \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\\n\\n\u0418 \u0442\u0443\u0442 \u043d\u0430 \u0441\u0446\u0435\u043d\u0443 \u0432\u044b\u0445\u043e\u0434\u0438\u0442 ViewModel, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u0430 \u043a _\u0431\u043e\u043b\u0435\u0435 \u043b\u0443\u0447\u0448\u0435\u043c\u0443_ \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u043c\u0443 \u0446\u0438\u043a\u043b\u0443. \u041e\u043d\u0430 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438, \u043f\u0435\u0440\u0435\u0436\u0438\u0432\u0430\u044f \u0432\u0437\u043b\u0435\u0442\u044b \u0438 \u043f\u0430\u0434\u0435\u043d\u0438\u044f (\u0442.\u0435. \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f) Activity, \u043f\u043e\u043a\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435 \u0441\u0433\u0438\u043d\u0435\u0442:\\n\\n![](./vm2.png)\\n\\n## \\"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\\" MVVM\\n\\n\u041f\u043e\u0447\u0435\u043c\u0443 \u0432 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u0445? \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0438\u043a\u0430\u043a\u0438\u0435 \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430, \u0432\u043e \u0432\u0441\u044f\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0432 \u043c\u0438\u0440\u0435 Flutter\'\u0430.\\n\\n### ~~\u041a\u043e\u0442\u043b\u0435\u0442\u044b~~ \u0432\u0435\u0440\u0441\u0442\u043a\u0430 \u2013 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, ~~\u043c\u0443\u0445\u0438~~ \u043a\u043e\u0434 \u2013 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\\n\\n\u0412\u044b\u0448\u0435 \u044f \u0443\u0436\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u0447\u0442\u043e \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e MVVM\'\u0430 \u0431\u044b\u043b\u043e \u0443\u0431\u0440\u0430\u0442\u044c GUI-\u043a\u043e\u0434 \u0438\u0437 \u0441\u043b\u043e\u044f View, \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u044c \u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044f\u043c _\u044d\u0442\u0438\u0445 \u0432\u0430\u0448\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432_ \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044f\u0437\u044b\u043a \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438.\\n\\n\u041d\u043e \u0432\u043e Flutter\'\u0435 \u043d\u0435\u0442 \u044f\u0437\u044b\u043a\u0430 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 (\u043a \u0441\u0447\u0430\u0441\u0442\u044c\u044e). \u0423 \u043d\u0430\u0441 \u0442\u0443\u0442 \u0432\u0435\u0440\u0441\u0442\u043a\u0430 \u2013 \u044d\u0442\u043e \u0438 \u0435\u0441\u0442\u044c \u043a\u043e\u0434! \u0411\u0435\u0440\u0435\u0448\u044c \u043c\u043d\u043e\u0433\u043e-\u043c\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432 \u0438 \u0441\u0442\u0440\u043e\u0438\u0448\u044c \u0441\u0435\u0431\u0435 UI, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0443\u044e \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044e. \u0418 \u0443\u0436 \u0442\u043e\u0447\u043d\u043e \u0442\u0443\u0442 \u043d\u0435\u0442 \u043a\u0430\u043a\u0438\u0445-\u0442\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u0435\u0440\u0441\u0442\u0430\u043b\u044c\u0449\u0438\u043a\u043e\u0432.\\n\\n\u0412\u043e\u0442 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0430 \u0441\u0430\u043c\u044b\u0439 \u0447\u0442\u043e \u043d\u0438 \u043d\u0430 \u0435\u0441\u0442\u044c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 production-\u043a\u043e\u0434. \u041f\u0440\u043e\u0441\u0442\u043e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c UI (\u043f\u0440\u0438\u0447\u0435\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 build) \u0438 UI-\u043b\u043e\u0433\u0438\u043a\u0443.\\n\\n```dart\\nclass FailureScreen extends StatefulWidget {\\n  const FailureScreen({Key? key, required this.reason}) : super(key: key);\\n\\n  final CheckOutFailureReason reason;\\n\\n  @override\\n  _FailureScreenState createState() => _FailureScreenState();\\n}\\n\\nclass _FailureScreenState extends State<FailureScreen> {\\n  @override\\n  void initState() {\\n    super.initState();\\n    context.read<AnalyticsManager>().sendEvent(AnalyticsEvent.checkOutFailed(widget.reason));\\n  }\\n\\n  void _onOkPressed() => context.read<SessionBloc>().add(const SessionEvent.initialized());\\n\\n  @override\\n  Widget build(BuildContext context) => StepScreenWrapper(\\n        child: OptimusStack(\\n          mainAxisAlignment: OptimusStackAlignment.center,\\n          spacing: OptimusStackSpacing.spacing300,\\n          children: [\\n            const OptimusSectionTitle(child: TranslatedText(TranslationKey.PleaseGoToReception)),\\n            SizedBox(\\n              width: 500,\\n              child: OptimusParagraph(child: TranslatedText(widget.reason.message, textAlign: TextAlign.center)),\\n            ),\\n            OptimusButton(\\n              variant: OptimusButtonVariant.primary,\\n              onPressed: _onOkPressed,\\n              child: const TranslatedText(TranslationKey.OkGotIt),\\n            ),\\n          ],\\n        ),\\n      );\\n}\\n```\\n\\n### UI-\u0442\u0435\u0441\u0442\u044b\\n\\n\u0412 \u043c\u0438\u0440\u0435 \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e Android\'\u0430 UI-\u0442\u0435\u0441\u0442\u044b \u2013 \u044d\u0442\u043e \u0442\u0435 \u0441\u0430\u043c\u044b\u0435 \u0431\u043b\u0430\u0433\u0438\u0435 \u043d\u0430\u043c\u0435\u0440\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e \u0447\u0442\u043e \u0438 \u043a\u0443\u0434\u0430 \u0432\u044b\u043b\u043e\u0436\u0435\u043d\u043e.\\n\\n![](./vm3.png)\\n\\n\u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u0442\u0435\u0441\u0442\u044b \u043d\u0430\u0434\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0430 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0435 \u0438\u043b\u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 CI-\u043c\u0430\u0448\u0438\u043d\u044b \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u0434\u043e\u0436\u0434\u0430\u0442\u044c\u0441\u044f \u0435\u0433\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u043e\u0434\u0443\u043c\u0430\u0442\u044c, \u043a\u0430\u043a \u0438 \u043a\u0443\u0434\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b.\\n\\n\u0412\u043e-\u0432\u0442\u043e\u0440\u044b\u0445, \u044d\u0442\u0438 \u0442\u0435\u0441\u0442\u044b _\u043d\u0430\u043c\u043d\u043e\u0433\u043e_ \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435, \u0442\u0430\u043a \u0447\u0442\u043e \u0433\u043e\u043d\u044f\u0442\u044c \u0441\u043e\u0442\u043d\u0438 UI-\u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 PR \u2013 \u044d\u0442\u043e \u0442\u043e \u0435\u0449\u0435 \u0443\u0434\u043e\u0432\u043e\u043b\u044c\u0441\u0442\u0432\u0438\u0435.\\n\\n\u0412-\u0442\u0440\u0435\u0442\u044c\u0438\u0445, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0441\u044f\u043a\u0438\u0445 \u0430\u043d\u0438\u043c\u0430\u0446\u0438\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u043d\u0443 \u043f\u043e\u0440\u0446\u0438\u044e \u043f\u0440\u043e\u0431\u043b\u0435\u043c.\\n\\n\u0415\u0441\u0442\u044c, \u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0441 \u044d\u0442\u0438\u043c\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u043c\u0438 \u0431\u043e\u0440\u043e\u0442\u044c\u0441\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u0442\u044c Firebase App Lab \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430\u0445 \u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445. \u0415\u0441\u0442\u044c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0438 \u0442\u0438\u043f\u0430 Robolectric, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c UI-\u0442\u0435\u0441\u0442\u044b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043d\u0430 JVM, \u0431\u0435\u0437 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430. \u041d\u043e \u0442\u0430\u043c \u0441\u0432\u043e\u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b.\\n\\n\u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c UI-\u043b\u043e\u0433\u0438\u043a\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0438\u0434\u0435\u0435\u0439 \u2013 \u0442\u043e\u0433\u0434\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c unit-\u0442\u0435\u0441\u0442\u044b \u0438 \u043d\u0435 \u0437\u0430\u043c\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043e \u0432\u0441\u0435\u0439 \u044d\u0442\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0443\u043a\u0442\u0443\u0440\u043e\u0439.\\n\\n\u041d\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 Flutter\'\u043e\u043c, UI-\u0442\u0435\u0441\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043b\u0435\u0433\u043a\u043e \u0438 \u043f\u0440\u0438\u044f\u0442\u043d\u043e, \u043a\u0430\u043a \u0441\u043a\u0430\u0437\u0430\u043b \u0431\u044b \u0418\u0435\u0448\u0443\u0430:\\n\\n```dart\\nvoid main() {\\n  testWidgets(\'MyWidget has a title and message\', (WidgetTester tester) async {\\n    await tester.pumpWidget(const MyWidget(title: \'T\', message: \'M\'));\\n    final titleFinder = find.text(\'T\');\\n    final messageFinder = find.text(\'M\');\\n\\n    expect(titleFinder, findsOneWidget);\\n    expect(messageFinder, findsOneWidget);\\n  });\\n}\\n```\\n\\n### \u041d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b\\n\\n\u042f \u0443\u0436\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043b, \u0447\u0442\u043e \u0432 Android\'\u0435 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u0443\u0441\u043b\u043e\u0432\u043d\u043e\u0433\u043e \\"\u044d\u043a\u0440\u0430\u043d\u0430\\" \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0443\u0442\u0430\u043d\u043d\u044b\u0439 \u2013 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u044e Activity \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u043b \u0442\u0435\u043b\u0435\u0444\u043e\u043d; \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 Activity \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u043f\u0430\u0434\u0443\u0442. \u0422\u0443\u0442 ViewModel, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u0430 \u043a \\"\u0441\u043c\u044b\u0441\u043b\u043e\u0432\u043e\u043c\u0443\\" \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u043c\u0443 \u0446\u0438\u043a\u043b\u0443 \u2013 \u044d\u0442\u043e, \u043f\u0440\u043e\u0441\u0442\u0438\u0442\u0435 \u0437\u0430 \u043a\u0430\u043b\u0430\u043c\u0431\u0443\u0440, \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u0430\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c.\\n\\n![](./vm4.png)\\n\\n\u0412\u043e Flutter\'\u0435 \u0443 \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0430 \u044d\u0442\u0443 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443 (\u043e\u043d\u0430 \u0441\u043b\u0435\u0433\u043a\u0430 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0430\u044f, \u043d\u043e \u0441\u043c\u044b\u0441\u043b \u043f\u0435\u0440\u0435\u0434\u0430\u043d) \u2013 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 `onStart`, `onPause`, `onResume` \u0438 \u043f\u0440\u043e\u0447\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043b\u0431\u044d\u043a\u043e\u0432 \u0441 \u043d\u0435\u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u044b\u043c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c, \u0432\u0441\u0451 \u043f\u0440\u043e\u0441\u0442\u043e \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u043e:\\n\\n![](./vm5.png)\\n\\n\u041f\u0440\u0438\u0447\u0435\u043c \u0434\u043b\u044f ViewModel \u043d\u0430\u043c \u0431\u044b \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u0441\u044f \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u043a\u043e\u043b\u0431\u044d\u043a\u043e\u0432 \u2013 \u0434\u043b\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u044f \u044d\u043a\u0440\u0430\u043d\u0430.\\n\\n### Single Responsibility Principle\\n\\n\u042f \u0447\u0430\u0441\u0442\u043e \u0441\u043b\u044b\u0448\u0443 \u043e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u043c\u043e\u043b, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 UI-\u043b\u043e\u0433\u0438\u043a\u0438 \u0432 \u0432\u0438\u0434\u0436\u0435\u0442\u0435 \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 SRP (\u043e\u043d \u0436\u0435 Single Responsibility Principle, \u043e\u043d \u0436\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0435\u0434\u0438\u043d\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438). \\"\u041a\u043b\u0430\u0441\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c\\", \u2013 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043c\u043d\u0435 \u0432 \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u2013 \\"UI-\u043b\u043e\u0433\u0438\u043a\u0430 \u0438 \u0432\u0435\u0440\u0441\u0442\u043a\u0430 \u0432 \u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u2013 \u044d\u0442\u043e \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\\".\\n\\n\u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u044d\u0442\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430. \u0412\u043e\u0442 \u0447\u0442\u043e \u0441\u0430\u043c \u0411\u043e\u0431 \u041c\u0430\u0440\u0442\u0438\u043d \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0432\u043e\u0434\u0443 \u0432 \u043a\u043d\u0438\u0433\u0435 \\"\u0427\u0438\u0441\u0442\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430\\":\\n\\n> \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442, \u0443\u0441\u043b\u044b\u0448\u0430\u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430, \u043b\u0435\u0433\u043a\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c.\\n>\\n> \u041d\u0435 \u043f\u043e\u0439\u043c\u0438\u0442\u0435 \u043c\u0435\u043d\u044f \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u0442\u0430\u043a\u043e\u0439 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0442\u043e\u0436\u0435 \u0435\u0441\u0442\u044c. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0434\u043d\u0443, \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443, \u0432\u0435\u0449\u044c. \u041c\u044b \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0443\u0435\u043c\u0441\u044f \u044d\u0442\u0438\u043c \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u043c \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u043d\u0438\u0436\u043d\u0435\u043c \u0443\u0440\u043e\u0432\u043d\u0435, \u043a\u043e\u0433\u0434\u0430 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435. \u041d\u043e \u044d\u0442\u043e \u043d\u0435 \u043e\u0434\u0438\u043d \u0438\u0437 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 SOLID, \u044d\u0442\u043e \u043d\u0435 SRP.\\n\\n\u0418 \u0434\u0430\u043b\u044c\u0448\u0435 \u043e\u043d \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u043a\u0443 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430:\\n\\n> \u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0434 \u043e\u0434\u043d\u0438\u043c, \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0438\u043c, \u0430\u043a\u0442\u043e\u0440\u043e\u043c.\\n\\n\u041d\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u043a\u0443\u0441\u043e\u043a UI \u0438 \u0442\u0430\u043a \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u0434 \u043e\u0434\u043d\u0438\u043c \u0430\u043a\u0442\u043e\u0440\u043e\u043c \u2013 \u044d\u0442\u043e UI/UX \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440. SRP \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043a \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u0438\u044e UI-\u043b\u043e\u0433\u0438\u043a\u0438 \u043e\u0442 UI-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\\n\\n### \u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 ViewModel\\n\\n\u0413\u043e\u0432\u043e\u0440\u044f \u043e \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438, \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u044e\u0442 \u0434\u0432\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f.\\n\\n\u041f\u0435\u0440\u0432\u044b\u0439 \u2013 \u044d\u0442\u043e \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0440\u043e\u0441\u0441-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043e\u0431\u0449\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u043e\u0431\u0449\u0438\u0435 ViewModel\'\u0438, \u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b (Android \u0438 iOS) \u0431\u0443\u0434\u0443\u0442 \u0441\u0432\u043e\u0438. \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 \u0432 \u0442\u0435\u043e\u0440\u0438\u0438, \u043c\u043e\u0433 \u0431\u044b \u0438\u043c\u0435\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0434\u043b\u044f KMM (Kotlin Multiplatform Mobile) \u2013 \u0442\u0430\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0438\u0448\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u0443\u044e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c ViewModel \u043a\u0430\u043a \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e \u043d\u0430\u0434 \u0441\u043b\u043e\u0435\u043c View, \u0433\u0434\u0435 \u0437\u0430\u0434\u0430\u0442\u044c \u0432\u0441\u044e \u043b\u043e\u0433\u0438\u043a\u0443, \u0430 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u043e\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b.\\n\\n![](./vm6.png)\\n\\n\u041d\u043e \u0432\u043e Flutter\'\u0435 \u0441\u043c\u044b\u0441\u043b\u0430 \u0432 \u044d\u0442\u043e\u043c \u043d\u0435\u0442 \u0432\u043e\u043e\u0431\u0449\u0435 \u2013 UI \u043a\u043e\u0434 \u0437\u0434\u0435\u0441\u044c \u043e\u0431\u0449\u0438\u0439 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c, \u043a\u0430\u043a \u0438 \u043b\u043e\u0433\u0438\u043a\u0430.\\n\\n\u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u2013 \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0439 ViewModel \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 View:\\n\\n![](./vm7.png)\\n\\n\u041d\u0430 \u043c\u043e\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u044d\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0440\u0435\u0434\u043a\u0430\u044f \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u2013 \u043e\u0431\u044b\u0447\u043d\u043e \u043b\u0438\u0431\u043e \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0448\u044c \u0432\u0435\u0441\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (\u0442.\u0435. \u0441\u0432\u044f\u0437\u043a\u0443 View + ViewModel), \u043b\u0438\u0431\u043e \u0434\u0440\u043e\u0431\u0438\u0448\u044c ViewModel \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445. \u041d\u043e \u0435\u0441\u043b\u0438 \u0432\u0434\u0440\u0443\u0433 \u043d\u0430\u0434\u043e \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043b\u0438 \u043b\u043e\u0433\u0438\u043a\u0443, \u0442\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438 \u0431\u0435\u0437 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 ViewModel \u2013 \u043c\u044b \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043c \u043e\u0442 \u044d\u0442\u043e\u043c \u0447\u0443\u0442\u044c \u043f\u043e\u0437\u0436\u0435.\\n\\n## \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 MVVM\\n\\n\u0410 \u0432\u043e\u0442 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438, \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \\"\u0434\u043e\u0441\u0442\u043e\u0438\u043d\u0441\u0442\u0432\\", \u0432\u043f\u043e\u043b\u043d\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u044b \u0438 \u043e\u0449\u0443\u0442\u0438\u043c\u044b.\\n\\n### \u0421\u0438\u043b\u044c\u043d\u043e\u0435 \u0437\u0430\u0446\u0435\u043f\u043b\u0435\u043d\u0438\u0435 (tight coupling)\\n\\n\u0415\u0441\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c \u043e\u0434\u0438\u043d \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434-\u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u0443 \u043d\u0438\u0445 \u0440\u0430\u0437\u043d\u0430\u044f \u0437\u043e\u043d\u0430 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412 \u0438\u0434\u0435\u0430\u043b\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u043c\u043e\u0434\u0443\u043b\u0435 \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u043e\u0434\u0443\u043b\u044c.\\n\\n\u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435, \u043e\u0434\u043d\u0430\u043a\u043e, View \u0438 ViewModel \u0441\u0438\u043b\u044c\u043d\u043e c\u0446\u0435\u043f\u043b\u0435\u043d\u044b (coupled), \u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u0445 \u043a UI \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442 \u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c \u0432 \u043e\u0431\u043e\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445.\\n\\n\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u044d\u043a\u0440\u0430\u043d \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u0441 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 Log out. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u0441\u0451 \u043f\u0440\u043e\u0441\u0442\u043e: \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u043c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u2013 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u0441\u0441\u0438\u044f. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0441\u043f\u0440\u0438\u043d\u0442\u0435 \u043a \u0432\u0430\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440 \u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442: \\"\u0421\u043b\u0443\u0448\u0430\u0439, \u043d\u0430\u0434\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u0438\u0430\u043b\u043e\u0433 \u0441 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435\u043c\\". \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u043a\u0430\u043a \u0432\u043e ViewModel (\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b), \u0442\u0430\u043a \u0438 \u0432\u043e View (\u043e\u043d \u0442\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0435\u0430\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u0438\u0430\u043b\u043e\u0433\u0430).\\n\\n### \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c\\n\\n\u0415\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 View \u0438 ViewModel \u2013 \u044d\u0442\u043e \u0440\u0430\u0437\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u0442\u0435\u0441\u0442\u043e\u0432:\\n\\n1. \u0414\u043b\u044f ViewModel \u2013 \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043e\u043d\u0430 \u0434\u0435\u0440\u0433\u0430\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u0438.\\n2. \u0414\u043b\u044f View \u2013 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u0410 \u0432\u044b\u0448\u0435 \u043c\u044b \u0443\u0436\u0435 \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438, \u0447\u0442\u043e \u0432 \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u043c \u0410\u043d\u0434\u0440\u043e\u0438\u0434\u0435 UI-\u0442\u0435\u0441\u0442\u044b \u2013 \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u043d\u043e. \u0422\u0430\u043a \u0447\u0442\u043e, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u044d\u0442\u043e \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u043a\u0440\u044b\u0442\u0430 \u0442\u0435\u0441\u0442\u0430\u043c\u0438.\\n\\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0432\u0438\u0434\u0436\u0435\u0442\u0430\u043c\u0438, \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0442\u0435\u0441\u0442 \u0432\u0438\u0434\u0436\u0435\u0442\u0430. \u0418 \u0441\u043c\u044b\u0441\u043b\u0430 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0430 \u043d\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044e\u044e \u043b\u043e\u0433\u0438\u043a\u0443.\\n\\n\u0412\u044b \u0436\u0435 \u043f\u043e\u043c\u043d\u0438\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432? \u041d\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435, **\u043a\u0430\u043a** \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u043e\u0434, \u043f\u0438\u0448\u0438\u0442\u0435, **\u043f\u043e\u0447\u0435\u043c\u0443** \u044d\u0442\u043e \u0442\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u0422\u043e \u0436\u0435 \u0438 \u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438: \u043d\u0435 \u043d\u0430\u0434\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, **\u043a\u0430\u043a** \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435, \u0432\u044b\u0434\u0430\u0435\u0442 \u043b\u0438 \u043e\u043d\u0430 **\u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442**.\\n\\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u043c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u2013 \u043c\u043d\u0435 \u043d\u0435 \u0432\u0430\u0436\u043d\u043e, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0435 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u043c\u0435\u0442\u043e\u0434 `onLogoutButtonClicked`. \u041c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0437\u043d\u0430\u0442\u044c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u044f \u043d\u0430\u0436\u043c\u0443 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443, \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u0434\u0438\u0430\u043b\u043e\u0433.\\n\\n\u041f\u043e\u0432\u0442\u043e\u0440\u044e\u0441\u044c, \u0432 \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u043c \u0410\u043d\u0434\u0440\u043e\u0438\u0434\u0435 \u0441 \u044d\u0442\u0438\u043c \u0432\u0441\u0451 \u0441\u043b\u043e\u0436\u043d\u043e, \u0432\u043e Flutter\'\u0435 \u2013 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043f\u0440\u043e\u0449\u0435.\\n\\n### \u0411\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u0434\u0430\\n\\n\u0415\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u2013 \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u0434\u0430 (\u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e). \u0421\u0430\u043c\u043e \u043f\u043e \u0441\u0435\u0431\u0435 \u044d\u0442\u043e \u043d\u0435 \u0441\u0442\u0440\u0430\u0448\u043d\u043e, \u043c\u043d\u043e\u0433\u0438\u0435 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0432\u043e\u043e\u0431\u0449\u0435-\u0442\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u044e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0434\u0430. \u041d\u043e \u044d\u0442\u043e \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u043b\u0438\u0448\u044c \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0434\u0430 \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c\u044e \u0438\u043b\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c\u044e. \u0418\u043d\u0430\u0447\u0435 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e _\u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u0434\u0430_.\\n\\n## \u0427\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c?\\n\\n\u0418\u0442\u0430\u043a, \u043c\u044b \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c-\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435, \u0430 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u0432\u043f\u043e\u043b\u043d\u0435 \u043e\u0449\u0443\u0442\u0438\u043c\u044b\u0435. \u0410 \u0434\u0435\u043b\u0430\u0442\u044c-\u0442\u043e \u0441 \u044d\u0442\u0438\u043c \u0447\u0442\u043e?\\n\\n### Keep It Simple And Straightforward\\n\\n\u041f\u0440\u0435\u0436\u0434\u0435 \u0432\u0441\u0435\u0433\u043e, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u043c\u0443, \u043d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u0432\u0430\u0436\u043d\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 (\u0430 \u0442\u043e \u0438 \u0432 \u0436\u0438\u0437\u043d\u0438). \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0438 \u044d\u0442\u043e\u0439 \u0444\u0440\u0430\u0437\u044b, \u044f \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u044e \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c: \\"Keep it simple and straightforward\\" \u2013 \\"\u0414\u0435\u043b\u0430\u0439 \u043f\u0440\u043e\u0441\u0442\u043e \u0438 \u043f\u0440\u044f\u043c\u043e\u043b\u0438\u043d\u0435\u0439\u043d\u043e\\". \u0418\u043b\u0438 \u0436\u0435, \u0441\u043b\u0435\u0434\u0443\u044f \u0431\u0440\u0438\u0442\u0432\u0435 \u041e\u043a\u043a\u0430\u043c\u0430: \\"\u041d\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0438\u0442\u044c \u0441\u0443\u0449\u0435\u0435 \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438\\".\\n\\n\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u043d\u0430\u0448\u0435\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438: \u0435\u0441\u043b\u0438 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0436\u0435 \u0443\u0440\u043e\u0432\u043d\u044f \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438, \u043d\u0435 \u043d\u0430\u0434\u043e \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0442\u0438\u043f\u0430 ViewModel.\\n\\n\u041a\u0430\u043a\u0438\u0435 \u0436\u0435 \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b?\\n\\n### \u0412\u0441\u0451 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u043c\\n\\n\u0412\u044b \u043d\u0430\u0432\u0435\u0440\u043d\u044f\u043a\u0430 \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437 \u0441\u043b\u044b\u0448\u0430\u043b\u0438 \u044d\u0442\u0443 \u0444\u0440\u0430\u0437\u0443: \\"\u0412\u043e Flutter\'\u0435 \u0432\u0441\u0451 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u043c\\". \u041d\u0435 \u043d\u0430\u0434\u043e, \u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u044d\u0442\u0443 \u0444\u0440\u0430\u0437\u0443 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u0443\u043a\u0432\u0430\u043b\u044c\u043d\u043e \u2013 \u043f\u043e\u043c\u0438\u043c\u043e \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432 \u0432\u043e Flutter\'\u0435 \u0435\u0441\u0442\u044c \u043d\u0430 \u0447\u0442\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c. \u041d\u043e \u0434\u043e\u043b\u044f \u043f\u0440\u0430\u0432\u0434\u044b \u0442\u0443\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u0438\u043c\u0435\u0435\u0442\u0441\u044f.\\n\\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0443\u0441\u043b\u043e\u0432\u043d\u043e \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u0432\u0438\u0434\u0436\u0435\u0442\u044b \u043d\u0430 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. \u042f \u043d\u0435 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u044d\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0432 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u0438\u043b\u0438 \u0432\u043e\u043e\u0431\u0449\u0435 \u043a\u0430\u043a-\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0433\u0440\u0443\u043f\u043f \u0432 \u043a\u043e\u0434\u0435 \u2013 \u043e\u043d\u0438 \u043d\u0443\u0436\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u043e\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0433\u0440\u0430\u0442\u044c \u0432\u0438\u0434\u0436\u0435\u0442\u044b.\\n\\n### \u0427\u0438\u0441\u0442\u044b\u0439 \u0432\u0438\u0434\u0436\u0435\u0442\\n\\n\u041f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 \u0447\u0438\u0441\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u044d\u0442\u043e \u0432\u0438\u0434\u0436\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0431\u044b\u0447\u043d\u043e \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u043d\u0430 \u0431\u0430\u0437\u0435 `StatelessWidget`, \u043d\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438 `StatefulWidget` \u2013 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0447\u0435\u043a\u0431\u043e\u043a\u0441 \u0441\u043e \u0441\u0432\u043e\u0438\u043c \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c.\\n\\n\u041a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0437\u0434\u0435\u0441\u044c \u2013 \u043d\u0435 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043b\u044e\u0431\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u0442 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438.\\n\\n\u042d\u0442\u0438 \u0432\u0438\u0434\u0436\u0435\u0442\u044b \u2013 \u043a\u0430\u043a \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u043e\u043d\u0438 \u0436\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u043c\u0438 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0430\u043c\u0438 \u043d\u0430 \u0437\u043e\u043b\u043e\u0442\u044b\u0435 \u0442\u0435\u0441\u0442\u044b UI. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d\u0438 \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438, \u0432 \u043d\u0438\u0445, \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 \u0442\u043e, \u043a\u0430\u043a \u043e\u043d\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.\\n\\n\u041a\u0430\u043a \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0432\u0438\u0434\u0436\u0435\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u044d\u0442\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438? \u041e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435\u0441\u044c \u043d\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u2013 \u043e\u043d\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0434\u043e\u043c\u0435\u043d\u043e\u043c \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2013 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, `Checkbox`, `Button`, `RoundAvatar` \u2013 \u0442.\u0435. \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0442\u044c\u0441\u044f \u0432 \u043b\u044e\u0431\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435.\\n\\n### \u0412\u0438\u0434\u0436\u0435\u0442 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\\n\\n\u041f\u043e\u043b\u043d\u0430\u044f \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443. \u041e\u043d \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0438\u0434\u0438\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u2013 \u043e\u043d \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.\\n\\n\u042d\u0442\u043e\u0442 \u0432\u0438\u0434\u0436\u0435\u0442 \u0431\u043b\u0438\u0436\u0435 \u0432\u0441\u0435\u0445 \u043a \u043a\u043e\u043d\u0446\u0435\u043f\u0442\u0443 `ViewModel` \u0438\u0437 MVVM, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u0441 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u0438\u0437 \u0441\u043b\u043e\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f\u043c\u0438, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0438\u0437 \u043f\u043e \u0434\u0435\u0440\u0435\u0432\u0443 \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432.\\n\\n\u041e\u0431\u044b\u0447\u043d\u043e \u0442\u0430\u043a\u043e\u0439 \u0432\u0438\u0434\u0436\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f `Builder` \u0438\u043b\u0438 `StatefulBuilder` \u2013 \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0436\u0435\u0442\u0443. \u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043a\u0443\u0434\u0430-\u0442\u043e \u0433\u043b\u0443\u0431\u043e\u043a\u043e, \u0442\u043e \u0443\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `InheritedWidget` \u0438\u043b\u0438 `Provider`.\\n\\n\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 `ViewModel` (\u043a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u0442\u043e \u0432\u0441\u0451 \u0435\u0449\u0435 \u0432\u0438\u0434\u0436\u0435\u0442) \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u0430\u0434\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u0436\u0435\u0442\u0430 \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 `ViewWidget` \u0438 `ViewModelWidget`. \u041f\u043e\u043b\u044c\u0437\u0430 \u043e\u0442 \u043d\u0435\u0433\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0441\u0448\u0430\u0440\u0438\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0432\u0438\u0434\u0436\u0435\u0442\u0430\u043c\u0438.\\n\\n### \u0412\u0438\u0434\u0436\u0435\u0442-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\\n\\n\u041d\u0435\u0447\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0432\u044b\u043c \u0438 \u0432\u0442\u043e\u0440\u044b\u043c \u0442\u0438\u043f\u0430\u043c\u0438. \u041a\u043e\u0433\u0434\u0430 \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0439 \u0432\u0438\u0434\u0436\u0435\u0442 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430 \u043d\u0443\u0436\u043d\u0430, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e), \u043c\u043e\u0436\u043d\u043e \u0441\u043c\u0435\u043b\u043e \u0446\u0435\u043f\u043b\u044f\u0442\u044c\u0441\u044f \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u0432\u0438\u0434\u0436\u0435\u0442\u0430.\\n\\n:::caution\\n\\n\u0412\u0430\u0436\u043d\u043e\u0435 \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u0435: \u044f \u043d\u0435 \u0430\u0433\u0438\u0442\u0438\u0440\u0443\u044e \u0437\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u0432 \u0432\u0438\u0434\u0436\u0435\u0442\u0430\u0445 \u2013 \u043d\u0435\u0442, \u044d\u0442\u043e \u0432\u0441\u0451 \u0435\u0449\u0435 _\u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439_ \u0441\u043b\u043e\u0439. \u042f \u0433\u043e\u0432\u043e\u0440\u044e \u0442\u043e\u043b\u044c\u043a\u043e \u043e _\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0438_ \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432 \u0438 _\u0432\u044b\u0437\u043e\u0432\u0435_ \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u0437 \u0441\u043b\u043e\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438.\\n\\n:::\\n\\n## BusinessLogic-Widget\\n\\n\u0421 \u0443\u0447\u0435\u0442\u043e\u043c \u0432\u0441\u0435\u0433\u043e \u0432\u044b\u0448\u0435\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u044f \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d. \u041c\u043e\u0436\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u0435\u0433\u043e **BusinessLogic-Widget**.\\n\\n**BusinessLogic** \u2013 \u044d\u0442\u043e \u0441\u043b\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043b\u043e\u0433\u0438\u043a\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f; \u043b\u043e\u0433\u0438\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 UI, \u043d\u0438 \u0432 \u043a\u043e\u0434\u0435, \u043d\u0438 \u043f\u043e \u0441\u043c\u044b\u0441\u043b\u0443. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0442\u0430\u043a\u0438\u0435 \u0432\u0435\u0449\u0438, \u043a\u0430\u043a \u0440\u043e\u0443\u0442\u0438\u043d\u0433 \u0438\u043b\u0438 \u0434\u0438\u0430\u043b\u043e\u0433\u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f, \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u044d\u0442\u043e\u043c\u0443 \u0441\u043b\u043e\u044e. \u041a\u0430\u043a \u044f \u043e\u0431\u044b\u0447\u043d\u043e \u0433\u043e\u0432\u043e\u0440\u044e, \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u043b\u043e\u0439 \u0434\u043b\u044f \u043a\u0443\u0441\u043a\u0430 \u043b\u043e\u0433\u0438\u043a\u0438 \u2013 \u044d\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c, \u0447\u0442\u043e \u043d\u0430\u0434\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c GUI \u043d\u0430 CLI: \u0435\u0441\u043b\u0438 \u043a\u043e\u0434 \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0442\u0435\u0440\u044f\u0435\u0442 \u0441\u043c\u044b\u0441\u043b, \u0442\u043e \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u043d \u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u044f\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438.\\n\\n\u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u043e\u044f \u043d\u0435 \u0432\u0430\u0436\u043d\u0430 \u2013 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c BLoC, Redux, \u043f\u0440\u043e\u0441\u0442\u043e Use Case Interactor \u0438\u0437 \u0447\u0438\u0441\u0442\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u0442.\u0434. \u0412\u0430\u0436\u043d\u043e \u0442\u043e, \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u0441\u043b\u043e\u0439 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043a UI.\\n\\n\u0421\u043b\u043e\u0439 **Widget** \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e. \u041c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u0446\u0435\u043b\u043e\u043c \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u0442\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043e\u0442 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0438\u043b\u0438 \u0436\u0435 \u043e\u0442 UI, \u0442\u0430\u043a \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u0441\u043b\u043e\u0439 \u043b\u0443\u0447\u0448\u0435 \u0437\u043d\u0430\u0435\u0442, \u043a\u0430\u043a\u0430\u044f \u043d\u0443\u0436\u043d\u0430 \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u043d\u0435\u043a\u043e\u0435 \u043f\u043e\u0434-\u0434\u0435\u0440\u0435\u0432\u043e), \u0438 \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0434\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0443 \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432 \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443, \u043c\u043d\u043e\u0433\u0438\u0435 \u0447\u0430\u0441\u0442\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0441\u043c\u044b\u0441\u043b\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \\"\u041a\u0430\u043a \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044e \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a `BuildContext`?\\" \u0414\u0430 \u043d\u0438\u043a\u0430\u043a \u2013 \u044d\u0442\u043e \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c UI, \u0430 \u0442\u0430\u043c \u0435\u0441\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a `BuildContext`.\\n\\n---\\n\\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0434\u0438\u043d \u044d\u043a\u0440\u0430\u043d \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\\n\\n![](./vm8.png)\\n\\n\u041d\u0435 \u043e\u0431\u0440\u0430\u0449\u0430\u0439\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043d\u0430 \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u043f\u0430\u043d\u0435\u043b\u044c, \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u044d\u043a\u0440\u0430\u043d\u0430 (\u0442\u043e, \u0447\u0442\u043e \u043d\u0430 \u0441\u0435\u0440\u043e\u043c \u0444\u043e\u043d\u0435). \u041c\u043e\u0436\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432: \u0442\u0435\u043a\u0441\u0442 \\"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c...\\" \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0442\u0435\u043b\u044f, \u043a\u043d\u043e\u043f\u043a\u0438 `Check in` / `Check out` \u0438 \u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0440\u0441\u0438\u0438 \u0432 \u043f\u0440\u0430\u0432\u043e\u043c \u043d\u0438\u0436\u043d\u0435\u043c \u0443\u0433\u043b\u0443.\\n\\n\u0412 \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (\u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043a\u043e \u043a \u043d\u0430\u0448\u0435\u0439 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438) \u0443 \u043d\u0430\u0441 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u0435\u0435 \u043f\u043b\u043e\u0441\u043a\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432. \u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438, \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u0438\u0434\u0436\u0435\u0442 \u043d\u0430 \u044d\u0442\u043e\u043c \u044d\u043a\u0440\u0430\u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043a \u0442\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u044b \u0443\u0441\u043b\u043e\u0432\u043d\u043e \u043d\u0430\u0437\u0432\u0430\u043b\u0438 \\"\u0427\u0438\u0441\u0442\u044b\u0439 \u0432\u0438\u0434\u0436\u0435\u0442\\", \u0441\u0430\u043c \u044d\u043a\u0440\u0430\u043d \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432 \u0440\u043e\u043b\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445:\\n\\n![](./vm9.png)\\n\\n- \u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \\"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c...\\" \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438 `Session` (\u0447\u0430\u0441\u0442\u044c \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438).\\n- \u041a\u043d\u043e\u043f\u043a\u0438 `Check In` \u0438 `Check Out` \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u043a\u043e\u043b\u0431\u044d\u043a\u0438, \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u044e\u0449\u0438\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u044d\u043a\u0440\u0430\u043d\u044b; \u043a\u043d\u043e\u043f\u043a\u0430 `Check Out` \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0435\u0449\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0432 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443 \u2013 `AnalyticsManager` \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438.\\n- \u0422\u0435\u043a\u0441\u0442 \u0432\u0435\u0440\u0441\u0438\u0438 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437, \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0435\u0440\u0441\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0431\u0438\u043b\u0434\u0430, \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0435\u0440\u0443\u0442\u0441\u044f \u0438\u0437 `PackageInfo`.\\n- \u0421\u0430\u043c \u044d\u043a\u0440\u0430\u043d \u0447\u0435\u0440\u0435\u0437 `BlocListener` \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a `UpdateManager`\'\u0443 \u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u044d\u043a\u0440\u0430\u043d, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438.\\n\\n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0438\u0447\u0442\u043e \u043d\u0435 \u043c\u0435\u0448\u0430\u0435\u0442 \u043d\u0430\u043c \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0447\u0430\u0441\u0442\u0438 \u044d\u043a\u0440\u0430\u043d\u0430 \u0432 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u0432\u0438\u0434\u0436\u0435\u0442\u044b \u2013 \u043e\u043d\u0438 \u0443\u0436\u0435 \u0432\u0435\u0434\u0443\u0442 \u0441\u0435\u0431\u044f \u0431\u043e\u043b\u0435\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u0435\u0435 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432.\\n\\n\u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0442\u0430\u043a\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443:\\n\\n![](./vm10.png)\\n\\n- \u0421\u0430\u043c \u044d\u043a\u0440\u0430\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043b\u043e\u0433\u0438\u043a\u0438 \u0432\u043e\u043e\u0431\u0449\u0435. \u041e\u043d \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \\"\u0443\u043c\u043d\u044b\u0445\\" \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432.\\n- `UpdateWatcher`, \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f \u0432\u0438\u0434\u0436\u0435\u0442-\u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u044c \u2013 \u0432 \u043d\u0435\u043c \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0432\u0438\u0434\u0438\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u043e\u043d \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 (\u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u044d\u043a\u0440\u0430\u043d).\\n- \u0414\u0440\u0443\u0433\u0438\u0435 \u0432\u0438\u0434\u0436\u0435\u0442\u044b \u0437\u043d\u0430\u044e\u0442, \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043c \u043d\u0443\u0436\u043d\u044b, \u043a\u0430\u043a \u0438\u0445 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438 \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c.\\n\\n\u041c\u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u044d\u0442\u043e \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u0432\u043c\u0435\u0441\u0442\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043f\u043e \u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 (ViewModel \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 View \u2013 \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u0432\u0438\u0434\u043e\u043c), \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043c\u043d\u043e\u0433\u043e \u043d\u0435\u0434\u0435\u043b\u0438\u043c\u044b\u0445 (\u0432 \u0442\u043e\u043c \u043f\u043b\u0430\u043d\u0435, \u0447\u0442\u043e \u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445 \u0434\u0430\u043b\u044c\u0448\u0435 \u0443\u0436\u0435 \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430) \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0441\u0432\u043e\u044e \u0437\u0430\u0434\u0430\u0447\u0443.\\n\\nFlutter \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043b\u0435\u0433\u043a\u043e \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0441 \u043e\u0433\u0440\u043e\u043c\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432. \u0418\u043d\u043e\u0433\u0434\u0430 \u043c\u043d\u043e\u0433\u043e \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432 \u2013 \u044d\u0442\u043e \u0434\u0430\u0436\u0435 \u043b\u0443\u0447\u0448\u0435 \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0447\u0430\u0441\u0442\u044c \u043f\u043e\u0434-\u0434\u0435\u0440\u0435\u0432\u0430 \u0437\u0430\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0432 \u0432\u0438\u0434\u0436\u0435\u0442-\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443.\\n\\n\u041f\u043e\u0434\u0432\u043e\u0434\u044f \u0438\u0442\u043e\u0433: \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u043e Flutter\'\u0435 ViewModel, \u043d\u0435 \u043c\u043d\u043e\u0436\u044c\u0442\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438."},{"id":"/2021/11/26/flutter-kiosk","metadata":{"permalink":"/blog/2021/11/26/flutter-kiosk","source":"@site/blog/2021-11-26-flutter-kiosk.md","title":"Another app migrated to Flutter","description":"As you probably know, we have an app in Flutter that has been successfully running in production for more than 2 years now.","date":"2021-11-26T00:00:00.000Z","formattedDate":"November 26, 2021","tags":[],"readingTime":7.385,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Another app migrated to Flutter"},"prevItem":{"title":"ViewModel \u0432\u043e Flutter \u2013 \u044d\u0442\u043e \u0430\u043d\u0442\u0438\u043f\u0430\u0442\u0442\u0435\u0440\u043d","permalink":"/blog/2021/12/19/viewmodel-ru"},"nextItem":{"title":"Don\'t be always late...","permalink":"/blog/2021/10/29/late"}},"content":"As you probably know, we have an [app in Flutter that has been successfully running in production](https://developers.mews.com/one-year-in-production-with-flutter/) for more than 2 years now.\\n\\nBut we also have another app, a Kiosk application written natively in Kotlin and available for Android only. It **was** available, actually, as we decided to migrate it to Flutter as well. And here\u2019s a report on why and how.\\n\\n\x3c!--truncate--\x3e\\n\\n## What\u2019s the application about?\\n\\nThis is a Kiosk app for self-check-in and checkout in hotels. One of the core ideas behind it is simple maintenance: instead of buying a standalone (and very expensive) Kiosk and integrating it with your system, you just grab an Android tablet, scan the QR code from the PMS, and voil\xe0: you have it ready. By the way, this is what\'s called BYOD (Bring Your Own Device) in the mobile enterprise world. And it\'s very flexible: you can choose what key cutter you need or whether you want to integrate it with the payment terminal.\\n\\nSo, initially, the app was only available for Android. The reason behind it was pretty simple: since the app is always in full-screen mode, and the tablet itself is most probably in a special bounce pad, who cares if this is an iPad or some cheap Android tablet?\\n\\nSome properties do care, as it turned out. For some, it\'s a matter of brand, and they prefer having iPads. Others already have a fleet of iPad devices and want to use them for Kiosk. Anyway, the feature request was sitting for some time, but it still wasn\u2019t popular enough to develop and maintain a separate iOS version.\\n\\nAnd here comes Flutter:\\n\\n- we already have another app in Flutter, and it proved to be useful for us;\\n- we have our own design system with Flutter implementation \u2013 we can reuse it instead of maintaining a native Android version;\\n- we can unify architecture and share some code;\\n- we can maintain a single codebase for Android, iOS and maybe even Web/Desktop.\\n\\n## The process\\n\\nThere were 2 ways to migrate the app: either we could do it gradually and [add Flutter to the existing app](https://docs.flutter.dev/development/add-to-app), or we could just rewrite it from scratch. Both options have pros and cons.\\n\\nGradual rewriting can be done in parallel with maintaining the current app, but there\'s a significant overhead, and some functionality will be inevitably duplicated. On the other hand, rewriting is more straightforward, and we don\'t need to plug into existing architecture, but it\'s all or nothing \u2013 if the app is 90% ready, it\'s not ready at all.\\n\\nEventually, we decided on the second route and rewrote the app from scratch. A dream for a developer and a nightmare for a tech lead. Being in both roles, I\'m not sure whether I was more excited or scared \ud83d\ude01\\n\\nSignificant points (yeah, they\u2019re expected, but it hurts anyway):\\n\\n- the deadline was pretty optimistic (it always is);\\n- since it\'s a different language, you cannot just use the same tests, so there were regression bugs;\\n- be ready for \\"what the hell is this doing here?\\" reactions.\\n\\n### Problems\\n\\nThe first and foremost step of the migration process was to make it work in the same (or better) way on Android tablets. We were concentrated on that, so we didn\'t even test the app on iPads. After the Android version was released, we could put more effort into the iOS part, and of course, there were some problems specific to the iOS version (although, I was afraid there would be more of them).\\n\\nAnd, naturally, most of the problems were at the juncture between the native platform and Flutter: webviews and camera.\\n\\nWe use webview for displaying things like Terms & Conditions or House Rules. They come from the backend in HTML, and we apply some CSS to them. At first, we used [webbview_flutter](https://pub.dev/packages/webview_flutter) as it\u2019s maintained by the official flutter.dev publisher and it worked well for Android. But on iOS, it was just giving us a white screen, and we didn\'t find a simple way to fix this. So we decided to switch to [flutter_inappwebview](https://pub.dev/packages/flutter_inappwebview), and so far, it works well for both Android and iOS.\\n\\nThe camera is a common source of pain in native development, especially in Android, where the possible hardware and software range is too broad. [camera](https://pub.dev/packages/camera) package does a great job of abstracting over all these discrepancies and the somewhat cumbersome native Camera API, but there are some problems. For example, we ran into [this issue](https://github.com/flutter/flutter/issues/90070) and had to downgrade to version `0.8.1+7` for now.\\n\\n### Benefits\\n\\nApart from achieving the initial goals (such as unifying architecture and sharing code or going cross-platform), there are some more minor improvements that we acquired after migration:\\n\\n- The kiosk codebase is now 2x smaller. Of course, it\'s not just about Flutter being so tremendous and concise (although it is). We could achieve some code reduction even after rewriting to the same language and framework, as it was basically a major refactoring. But it\'s still pretty cool to know that we have more platforms to support and less code to maintain.\\n\\n- Custom keyboard implementation is much easier. We use a custom keyboard in the app rather than an external system keyboard: for granular control, security and a consistent look and feel. I remember we spent a lot of time explaining to native Android that the input field (despite being enabled and writable) doesn\'t need to have the keyboard. In Flutter, it\'s just a matter of 2 parameters (readOnly: true, showCursor: true) and providing a TextEditingController with custom functionality. Take a look at [this excellent article](https://medium.com/flutter-community/custom-in-app-keyboard-in-flutter-b925d56c8465) for inspiration if you need to integrate a custom keyboard into your app.\\n\\n- A declarative and functional approach to UI. Without exaggeration, I think this is the best trend in front-end and mobile development of the last few years:\\n\\n  $$\\n  UI = f(state)\\n  $$\\n\\n  Yes, now we have Jetpack Compose, so native Android development goes in the same direction. But back then, for our pretty complex registration card screen (that has a lot of dynamic form fields based on the nationality of the guest, the legal environment of a hotel, and a ton of other stuff), we ended up with a scary piece of code that no one wanted to touch. It\'s still pretty complex in Flutter, but it is, at least, maintainable.\\n\\n## Next steps\\n\\nThere\'s one part that we definitely cannot make cross-platform: installation and management. First, it\'s low-level. Second, it\'s totally different for iOS and Android.\\n\\nCurrently, for Android, we have our own solution \u2013 we\'ve developed a separate DPC-app that you can install as part of the enrolment process using [the QR-code provisioning method](https://developers.google.com/android/management/provision-device#qr_code_method) \u2013 it automatically gets device owner permissions, so it can install and update other applications, and grant permissions to them. Furthermore, it means that we don\'t even need Google Play for the deployment, as we can simply upload a new app version to cloud storage (Azure Storage in our case), and the DPC-app periodically checks, downloads and installs a new version automatically.\\n\\n### Benefits\\n\\n- we fully control the deployment process;\\n- we can do the \\"real\\" CI/CD without waiting for Google Play approval;\\n- we can do some intelligent deployment. This \\"smart deployment\\" means that we don\'t just force an update while a user is in the middle of the session, nor do we wait for the app to be closed (which doesn\'t make sense for a single-app kiosk mode). Instead, our Kiosk app and DPC-app communicate with each other. DPC-app notifies Kiosk if the new version is available, and Kiosk notifies DPC-app when it\'s ready to be updated (e.g. the current session has ended).\\n\\n### Drawbacks\\n\\n- we need to maintain the code for the DPC app;\\n- we lack some features like remote rebooting and don\'t have resources to implement them;\\n- as I mentioned, for iOS, we need to implement all this functionality from scratch.\\n\\nThat\'s why, while launching iOS beta, we decided to try some 3rd-party MDM solutions. If everything goes smoothly, we\'re thinking about migrating Android devices to the MDM as well, so it\'s both beta for the iOS app and for a distribution model in general.\\n\\nSo, expect another article on integrating an MDM solution sometime in the future :)\\n\\n## Bonus: useful libraries\\n\\nAs a bonus, here are some valuable libraries we\'ve discovered (or written) for this app.\\n\\n- [wakelock](https://pub.dev/packages/wakelock) allows preventing the screen from sleeping on Android, iOS, macOS, Windows, and web.\\n- [hand_signature](https://pub.dev/packages/hand_signature) will enable you to draw smooth signatures with a variety of draw and export settings \u2013 and also supports SVG.\\n- [native_device_orientation](https://pub.dev/packages/native_device_orientation) \u2013 reading device\'s native orientation, either from UI orientation or from sensors.\\n- [kiosk_mode](https://pub.dev/packages/kiosk_mode) \u2013 this is our library for working with Lock Task / Guided Access modes on Android and iOS."},{"id":"/2021/10/29/late","metadata":{"permalink":"/blog/2021/10/29/late","source":"@site/blog/2021-10-29-late.md","title":"Don\'t be always late...","description":"In code reviews, I often see a construction like this:","date":"2021-10-29T00:00:00.000Z","formattedDate":"October 29, 2021","tags":[],"readingTime":1.68,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Don\'t be always late..."},"prevItem":{"title":"Another app migrated to Flutter","permalink":"/blog/2021/11/26/flutter-kiosk"},"nextItem":{"title":"Storybook + Flutter = storybook_flutter","permalink":"/blog/2021/04/15/storybook-flutter"}},"content":"In code reviews, I often see a construction like this:\\n\\n```dart\\nenum Some { option1, option2 }\\n\\nfinal someCondition = Some.option2;\\n\\nvoid main() {\\n  late final String x;\\n\\n  switch (someCondition) {\\n    case Some.option1:\\n      x = \'a\';\\n      break;\\n    case Some.option2:\\n      x = \'b\';\\n      break;\\n  }\\n\\n  print(x);\\n}\\n```\\n\\n\x3c!--truncate--\x3e\\n\\nTake a look at the line `late final String x`. At first glance, there\'s nothing wrong with it: we don\'t initialize `x` immediately, but at some point **later**, so `late` modifier seems to be a good fit here, right?\\n\\nWrong. Dart compiler is smart enough to understand that there\'s no way for `x` to be unitialized when it\'s called at `print(x)`. So you can just omit `late` modifier:\\n\\n```dart\\nenum Some { option1, option2 }\\n\\nfinal someCondition = Some.option2;\\n\\nvoid main() {\\n  final String x;\\n\\n  switch (someCondition) {\\n    case Some.option1:\\n      x = \'a\';\\n      break;\\n    case Some.option2:\\n      x = \'b\';\\n      break;\\n  }\\n\\n  print(x);\\n}\\n```\\n\\nAnd it\'s not just about being concise. It actually guards you against making an error. Take a look at the following snippet:\\n\\n```dart\\nenum Some { option1, option2 }\\n\\nfinal someCondition = Some.option2;\\n\\nvoid main() {\\n  late final String x;\\n\\n  switch (someCondition) {\\n    case Some.option1:\\n      x = \'a\';\\n      break;\\n  }\\n\\n  print(x);\\n}\\n```\\n\\nDo you see an error here? We don\'t process all the possible cases and, since in our case, `someCondition == Some.option2` we will get a runtime error:\\n\\n```\\nUncaught Error: LateInitializationError: Local \'x\' has not been initialized.\\n```\\n\\nWhat if we remove `late` modifier?\\n\\n```dart\\nenum Some { option1, option2 }\\n\\nfinal someCondition = Some.option2;\\n\\nvoid main() {\\n  final String x;\\n\\n  switch (someCondition) {\\n    case Some.option1:\\n      x = \'a\';\\n      break;\\n  }\\n\\n  print(x);\\n}\\n```\\n\\nNow, we can\'t even run the code, since we get a compile-time error:\\n\\n```\\nError: Final variable \'x\' must be assigned before it can be used.\\n  print(x);\\n        ^\\nError: Compilation failed.\\n```\\n\\nIt can help you in other cases as well, such as `if..else` or `try..catch` blocks.\\n\\nSo pay attention to this small detail and stay safe!"},{"id":"/2021/04/15/storybook-flutter","metadata":{"permalink":"/blog/2021/04/15/storybook-flutter","source":"@site/blog/2021-04-15-storybook-flutter/index.md","title":"Storybook + Flutter = storybook_flutter","description":"- \u0420\u0443\u0441\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f","date":"2021-04-15T00:00:00.000Z","formattedDate":"April 15, 2021","tags":[],"readingTime":5.18,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Storybook + Flutter = storybook_flutter"},"prevItem":{"title":"Don\'t be always late...","permalink":"/blog/2021/10/29/late"},"nextItem":{"title":"Storybook + Flutter = storybook_flutter","permalink":"/blog/2021/03/29/storybook-flutter-ru"}},"content":":::note\\n\\n- [\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f](../2021-03-29-storybook-flutter-ru.md)\\n\\n:::\\n\\nThis article is all about promoting my Flutter library for showcasing isolated widgets and screens. Something like Storybook in the React world. Actually, it\'s even named [storybook_flutter](https://pub.dev/packages/storybook_flutter).\\n\\n\x3c!--truncate--\x3e\\n\\n## Why do you need it?\\n\\nFirst, to speed up UI development. Yes, Flutter has a \\"hot reload\\" that makes UI development very smooth, but what if the widget you\'re developing is somewhere deep in the app screens? What if it\'s visible only under some specific conditions? Besides that, hot reload won\'t work in all cases. So the possibility to isolate the widget, make it a separate story, and work with this story could be very helpful.\\n\\nSecond, showcasing your widgets and screens. For example, we implement our own design library for Flutter and we\'d like to integrate an interactive sandbox with widgets into our documentation. Especially now, when Flutter for Web is in stable channel.\\n\\nThird, there\'s been a feature request from the very beginning: generating golden tests automatically with every possible combination of widget parameters. I find this idea pretty interesting, and I\'d like to add this functionality in the future.\\n\\n## Can\'t you just use some existing library?\\n\\nProbably, yes. But, at the moment there\'s no clear leader among the community libraries. Also, you can\'t just take NIH syndrome off the counter :) Besides that, I\'d like to be able to add features we need as quickly as possible.\\n\\n## What does it look like?\\n\\nSomewhat like this:\\n\\n![](looks-like.png)\\n\\nYep, not a piece of art, but that\'s not the first priority right now, and my design skill is a little subpar...\\nBesides that, I\'m still experimenting with the placement of buttons and toolbars, so it doesn\'t make sense to polish visual style at the moment.\\n\\n## What can you do with it?\\n\\n- Story navigation with optional grouping by section.\\n- Knobs (customizable parameters) for widgets.\\n- Light/dark theme switch.\\n- Fullscreen mode for stories without any UI elements \u2013 can be used on the web, for example, to embed the story into iframe.\\n- Customization.\\n- Device frames (thanks to the [device_frame](https://pub.dev/packages/device_frame) package).\\n- Plugin support.\\n\\n## How to use it?\\n\\nAdd the dependency to the `pubspec.yaml` file:\\n\\n```yaml\\nstorybook_flutter: ^0.5.0\\n```\\n\\nCreate the story. One of the simplest examples would be:\\n\\n```dart\\nimport \'package:flutter/material.dart\';\\nimport \'package:storybook_flutter.dart\';\\n\\nvoid main() => runApp(const MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) => Storybook(\\n        children: [\\n          Story.simple(\\n            name: \'Button\',\\n            child: ElevatedButton(\\n              onPressed: () {},\\n              child: const Text(\'Push me\'),\\n            ),\\n          ),\\n        ],\\n      );\\n}\\n```\\n\\nRun the project, and voil\xe0:\\n\\n![](simple-story.png)\\n\\nLet\'s add some knobs. All we need to do is to replace the `simple` constructor with a default one, and to use `builder` instead of `child`:\\n\\n```dart\\nStory(\\n  name: \'Button\',\\n  builder: (context, k) => ElevatedButton(\\n    onPressed:\\n        k.boolean(label: \'Enabled\', initial: true) ? () {} : null,\\n    child: Text(k.text(label: \'Text\', initial: \'Push me\')),\\n  ),\\n),\\n```\\n\\nRun the build again. It\'s even better now:\\n\\n![](knobs.gif)\\n\\nGrouping stories by sections is as simple as adding `section` parameter:\\n\\n```dart\\nStory(\\n  name: \'Button\',\\n  section: \'Buttons\',\\n  builder: (context, k) => ElevatedButton(\\n    onPressed:\\n        k.boolean(label: \'Enabled\', initial: true) ? () {} : null,\\n    child: Text(k.text(label: \'Text\', initial: \'Push me\')),\\n  ),\\n),\\n```\\n\\nAll the stories with the same `section` value will be grouped automatically.\\n\\n## How to customize it?\\n\\nEach `Story` has `padding` and `color` parameters that control (Captain Obvious here) the padding and background color of the story:\\n\\n```dart\\nStory(\\n  name: \'Button\',\\n  section: \'Buttons\',\\n  padding: const EdgeInsets.all(8),\\n  background: Colors.red,\\n  builder: (context, k) => ElevatedButton(\\n    onPressed:\\n        k.boolean(label: \'Enabled\', initial: true) ? () {} : null,\\n    child: Text(k.text(label: \'Text\', initial: \'Push me\')),\\n  ),\\n),\\n```\\n\\nBut that\'s too simple. More interesting things can be done with the `wrapperBuilder` parameter. It allows wrapping the story with a custom widget:\\n\\n```dart\\nStory(\\n  name: \'Button\',\\n  section: \'Buttons\',\\n  wrapperBuilder: (context, story, child) => Container(\\n    decoration: BoxDecoration(border: Border.all()),\\n    margin: const EdgeInsets.all(16),\\n    child: Center(child: child),\\n  ),\\n  builder: (context, k) => ElevatedButton(\\n    onPressed:\\n        k.boolean(label: \'Enabled\', initial: true) ? () {} : null,\\n    child: Text(k.text(label: \'Text\', initial: \'Push me\')),\\n  ),\\n),\\n```\\n\\nThis builder can be passed as a value of the `storyWrapperBuilder` parameter in `Storybook`. In that case, each story will be wrapped with this widget (of course, you can still override it with a story\'s `wrapperBuilder` individually).\\n\\n## We need more customizations!\\n\\nIf builders, wrappers and parameters are not enough, you can take `CustomStorybook` and do everything yourself:\\n\\n```dart\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    final decoration = BoxDecoration(\\n      border: Border(\\n        right: BorderSide(color: Theme.of(context).dividerColor),\\n        left: BorderSide(color: Theme.of(context).dividerColor),\\n      ),\\n      color: Theme.of(context).cardColor,\\n    );\\n    return MaterialApp(\\n      debugShowCheckedModeBanner: false,\\n      home: Scaffold(\\n        body: CustomStorybook(\\n          builder: (context) => Row(\\n            children: [\\n              Container(\\n                width: 200,\\n                decoration: decoration,\\n                child: const Contents(),\\n              ),\\n              const Expanded(child: CurrentStory()),\\n              Container(\\n                width: 200,\\n                decoration: decoration,\\n                child: const KnobPanel(),\\n              ),\\n            ],\\n          ),\\n          children: [\\n            Story(\\n              name: \'Button\',\\n              builder: (context, k) => ElevatedButton(\\n                onPressed:\\n                    k.boolean(label: \'Enabled\', initial: true) ? () {} : null,\\n                child: Text(k.text(label: \'Text\', initial: \'Push me\')),\\n              ),\\n            )\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n```\\n\\nYou can still use built-in widgets: `Contents`, `CurrentStory` and `KnobPanel` (I bet you can guess what they do). We\'ll get some minimalistic result here:\\n\\n![](custom-storybook.png)\\n\\nOne of the possible use cases for `CustomStorybook` can be [this plugin](https://pub.dev/packages/storybook_device_preview) that adds Storybook to another package, [device_preview](https://pub.dev/packages/device_preview), supporting contents and a knobs panel. With it you can achieve something like this:\\n\\n![](device-preview.png)\\n\\n## What about plugins?\\n\\nThe latest version adds support for plugins and the first-party plugin, `DeviceFramePlugin`:\\n\\n![](device-frame-plugin.png)\\n\\nPlugins allow overriding the way stories are rendered, as well as add custom settings to the panel. Creating plugins is a topic for another article though.\\n\\n## Which platforms are supported?\\n\\nWell, there\'s no special magic under the hood, so **in theory** it should work on all the platforms supported by Flutter. I\'ve tested it on Android, iOS, web and macOS.\\n\\n## Any roadmap?\\n\\nFirst, stabilize plugin API and think about what plugins should be provided out of the box (and develop them, of course).\\n\\nAfter that, I think I will look into golden test generation, like I mentioned in the beginning.\\n\\n---\\n\\nThat\'s it.\\nAny comments, feature requests and bug reports are welcome (as well as likes and stars)."},{"id":"/2021/03/29/storybook-flutter-ru","metadata":{"permalink":"/blog/2021/03/29/storybook-flutter-ru","source":"@site/blog/2021-03-29-storybook-flutter-ru.md","title":"Storybook + Flutter = storybook_flutter","description":"- English version","date":"2021-03-29T00:00:00.000Z","formattedDate":"March 29, 2021","tags":[],"readingTime":4.7,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Storybook + Flutter = storybook_flutter"},"prevItem":{"title":"Storybook + Flutter = storybook_flutter","permalink":"/blog/2021/04/15/storybook-flutter"},"nextItem":{"title":"1 \u0433\u043e\u0434 \u0441 Flutter \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d\u0435","permalink":"/blog/2021/02/14/one-year-flutter-ru"}},"content":":::note\\n\\n- [English version](./2021-04-15-storybook-flutter/index.md)\\n\\n:::\\n\\n\u0412\u0441\u0435\u043c \u043f\u0440\u0438\u0432\u0435\u0442! \u0412 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435 \u044f \u0431\u0443\u0434\u0443 ~~\u0431\u0435\u0441\u0441\u043e\u0432\u0435\u0441\u0442\u043d\u043e \u043f\u0438\u0430\u0440\u0438\u0442\u044c~~ \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e \u0441\u0432\u043e\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u043b\u044f Flutter\'\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0438\u0437 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432 \u0438/\u0438\u043b\u0438 \u044d\u043a\u0440\u0430\u043d\u043e\u0432. \u0427\u0442\u043e-\u0442\u043e \u0442\u0438\u043f\u0430 Storybook \u0438\u0437 \u043c\u0438\u0440\u0430 React. \u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043e\u043d\u0430 \u0442\u0430\u043a \u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f: [storybook_flutter](https://pub.dev/packages/storybook_flutter).\\n\\n\x3c!--truncate--\x3e\\n\\n## \u0417\u0430\u0447\u0435\u043c \u043e\u043d\u0430 \u043d\u0443\u0436\u043d\u0430?\\n\\n\u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0434\u0435\u043b\u0430\u0442\u044c UI. \u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u0443 Flutter\'\u0430 \u0438 \u0442\u0430\u043a \u0435\u0441\u0442\u044c hot reload, \u043d\u043e \u0435\u0441\u043b\u0438 \u0432\u0438\u0434\u0436\u0435\u0442 \u0437\u0430\u0440\u044b\u0442 \u0433\u0434\u0435-\u0442\u043e \u0432 \u0434\u0435\u0431\u0440\u044f\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u043e \u0434\u043e \u043d\u0435\u0433\u043e \u0435\u0449\u0435 \u043d\u0430\u0434\u043e \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f. \u0410 \u0435\u0441\u043b\u0438 \u044d\u0442\u043e\u0442 \u0432\u0438\u0434\u0436\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445, \u0442\u043e \u044d\u0442\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043d\u0430\u0434\u043e \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, hot reload \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0435 \u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0438\u0434\u0436\u0435\u0442, \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0438\u0441\u0442\u043e\u0440\u0438\u044e, \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u044d\u0442\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0435\u0439. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0443\u043c\u0430\u0442\u044c\u0441\u044f \u043d\u0430\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u0431\u044b \u0443\u0431\u0440\u0430\u0442\u044c \u043b\u0438\u0448\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0432\u0438\u0434\u0436\u0435\u0442\u0430, \u0442\u0430\u043a \u0447\u0442\u043e \u043a\u043e\u0434 \u0432 \u0438\u0442\u043e\u0433\u0435 \u0431\u0443\u0434\u0435\u0442 \u0447\u0438\u0449\u0435.\\n\\n\u0412\u043e-\u0432\u0442\u043e\u0440\u044b\u0445, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432/\u044d\u043a\u0440\u0430\u043d\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u044b \u0434\u0435\u043b\u0430\u0435\u043c \u0441\u0432\u043e\u044e \u0434\u0438\u0437\u0430\u0439\u043d-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f Flutter\'\u0430, \u0438 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043c\u044b \u0431\u044b \u0445\u043e\u0442\u0435\u043b\u0438 \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u0443\u044e \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0443 \u0441 \u0432\u0438\u0434\u0436\u0435\u0442\u0430\u043c\u0438, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435, \u0447\u0442\u043e Flutter for Web \u0443\u0436\u0435 \u0432 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435.\\n\\n\u0412-\u0442\u0440\u0435\u0442\u044c\u0438\u0445, \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u044f \u0445\u043e\u0447\u0443 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c (\u043c\u043d\u0435 \u044d\u0442\u0443 \u0438\u0434\u0435\u044e \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u0430\u043b\u0438 \u0432 issues) \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c golden tests \u0434\u043b\u044f \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.\\n\\n## \u041c\u043e\u0436\u0435\u0442, \u0432\u0437\u044f\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0433\u043e\u0442\u043e\u0432\u043e\u0435?\\n\\n\u041d\u0430\u0432\u0435\u0440\u043d\u043e\u0435, \u043c\u043e\u0436\u043d\u043e. \u041d\u043e, \u0432\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u044f\u0432\u043d\u043e\u0433\u043e \u0444\u0430\u0432\u043e\u0440\u0438\u0442\u0430 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442. \u0412\u043e-\u0432\u0442\u043e\u0440\u044b\u0445, \u0441\u0438\u043d\u0434\u0440\u043e\u043c NIH \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u043e\u0442\u043c\u0435\u043d\u044f\u043b. \u0412-\u0442\u0440\u0435\u0442\u044c\u0438\u0445, \u044f \u0445\u043e\u0447\u0443 \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0435 \u0444\u0438\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u044b.\\n\\n## \u041a\u0430\u043a \u043e\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442?\\n\\n\u041a\u0430\u043a-\u0442\u043e \u0442\u0430\u043a:\\n\\n![](./2021-04-15-storybook-flutter/looks-like.png)\\n\\n\u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u044d\u043b\u0435\u0433\u0430\u043d\u0442\u043d\u043e, \u043d\u043e \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u043f\u043e\u043a\u0430 \u043d\u0435 \u0432 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0435. \u0414\u0430 \u0438 \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440 \u0438\u0437 \u043c\u0435\u043d\u044f \u2013 \u0442\u0430\u043a \u0441\u0435\u0431\u0435. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u044f \u043f\u043e\u043a\u0430 \u0435\u0449\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u044e \u0441 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0442\u0443\u043b\u0431\u0430\u0440\u043e\u0432, \u043a\u043d\u043e\u043f\u043e\u043a \u0438 \u043c\u0435\u043d\u044e\u0448\u0435\u043a, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0438\u0437\u0430\u0439\u043d \u0441\u043c\u044b\u0441\u043b\u0430 \u043d\u0435\u0442.\\n\\n## \u0427\u0442\u043e \u043e\u043d\u0430 \u0443\u043c\u0435\u0435\u0442?\\n\\n- \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043f\u043e \u0438\u0441\u0442\u043e\u0440\u0438\u044f\u043c \u0441 \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u043e\u0439 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c.\\n- \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b (knobs) \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432.\\n- \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u0441\u0432\u0435\u0442\u043b\u043e\u0439/\u0442\u0435\u043c\u043d\u043e\u0439 \u0442\u0435\u043c\u044b.\\n- \u041f\u043e\u043a\u0430\u0437 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043e\u043a\u043d\u0435 \u0431\u0435\u0437 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 (\u0432 \u0432\u0435\u0431\u0435 \u0443\u0434\u043e\u0431\u043d\u043e \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u0443\u044e \u043f\u043e\u043b\u043d\u043e\u044d\u043a\u0440\u0430\u043d\u043d\u0443\u044e \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0432 iframe).\\n- \u041a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u044f.\\n- \u0420\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0440\u0430\u043c\u043a\u0438 (\u0441\u043f\u0430\u0441\u0438\u0431\u043e \u043f\u0430\u043a\u0435\u0442\u0443 [device_frame](https://pub.dev/packages/device_frame)) \u2013 \u0432 \u043f\u0440\u0435\u0432\u044c\u044e \u0432\u0435\u0440\u0441\u0438\u0438.\\n- \u041f\u043b\u0430\u0433\u0438\u043d\u044b \u2013 \u0442\u043e\u0436\u0435 \u0432 \u043f\u0440\u0435\u0432\u044c\u044e.\\n\\n## \u041a\u0430\u043a \u0441 \u043d\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c?\\n\\n\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 `pubspec.yaml` (\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u043f\u0440\u0435\u0432\u044c\u044e-\u0432\u0435\u0440\u0441\u0438\u044e, \u043f\u043b\u0430\u0433\u0438\u043d\u044b \u0438 \u0440\u0430\u043c\u043a\u0438 \u043f\u043e\u043a\u0430 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043d\u0435\u0439):\\n\\n```yaml\\nstorybook_flutter: ^0.5.0\\n```\\n\\n\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0438\u0441\u0442\u043e\u0440\u0438\u044e (\u0445\u043e\u0440\u043e\u0448\u043e \u0437\u0432\u0443\u0447\u0438\u0442). \u0412 \u0441\u0430\u043c\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0431\u0443\u0434\u0435\u0442 \u0447\u0442\u043e-\u0442\u043e \u0442\u0430\u043a\u043e\u0435:\\n\\n```dart\\nimport \'package:flutter/material.dart\';\\nimport \'package:storybook_flutter.dart\';\\n\\nvoid main() => runApp(const MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) => Storybook(\\n        children: [\\n          Story.simple(\\n            name: \'Button\',\\n            child: ElevatedButton(\\n              onPressed: () {},\\n              child: const Text(\'Push me\'),\\n            ),\\n          ),\\n        ],\\n      );\\n}\\n```\\n\\n\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c, \u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0440\u0430\u0434\u0443\u0435\u043c\u0441\u044f:\\n\\n![](./2021-04-15-storybook-flutter/simple-story.png)\\n\\n\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u0435\u043d\u044f\u0435\u043c `simple` \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043d\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0439, \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c `builder` \u0432\u043c\u0435\u0441\u0442\u043e `child`:\\n\\n```dart\\nStory(\\n  name: \'Button\',\\n  builder: (context, k) => ElevatedButton(\\n    onPressed:\\n        k.boolean(label: \'Enabled\', initial: true) ? () {} : null,\\n    child: Text(k.text(label: \'Text\', initial: \'Push me\')),\\n  ),\\n),\\n```\\n\\n\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c, \u0440\u0430\u0434\u0443\u0435\u043c\u0441\u044f \u0435\u0449\u0435 \u0431\u043e\u043b\u044c\u0448\u0435:\\n\\n![](./2021-04-15-storybook-flutter/knobs.gif)\\n\\n\u0415\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0435\u043a\u0446\u0438\u044e, \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `section`:\\n\\n```dart\\nStory(\\n  name: \'Button\',\\n  section: \'Buttons\',\\n  builder: (context, k) => ElevatedButton(\\n    onPressed:\\n        k.boolean(label: \'Enabled\', initial: true) ? () {} : null,\\n    child: Text(k.text(label: \'Text\', initial: \'Push me\')),\\n  ),\\n),\\n```\\n\\n\u0412\u0441\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c section \u0431\u0443\u0434\u0443\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u044b.\\n\\n## \u041a\u0430\u043a \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c?\\n\\n\u0423 \u043a\u0430\u0436\u0434\u043e\u0439 `Story` \u0435\u0441\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b `padding` \u0438 `background` \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0438\u0435, \u043a\u0430\u043a \u043d\u0438 \u0441\u0442\u0440\u0430\u043d\u043d\u043e, \u0437\u0430 \u043e\u0442\u0441\u0442\u0443\u043f\u044b \u0438 \u0444\u043e\u043d\u043e\u0432\u044b\u0439 \u0446\u0432\u0435\u0442 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438:\\n\\n```dart\\nStory(\\n  name: \'Button\',\\n  section: \'Buttons\',\\n  padding: const EdgeInsets.all(8),\\n  background: Colors.red,\\n  builder: (context, k) => ElevatedButton(\\n    onPressed:\\n        k.boolean(label: \'Enabled\', initial: true) ? () {} : null,\\n    child: Text(k.text(label: \'Text\', initial: \'Push me\')),\\n  ),\\n),\\n```\\n\\n\u041d\u043e \u044d\u0442\u043e \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u043e. \u0413\u043e\u0440\u0430\u0437\u0434\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `wrapperBuilder` \u0443 `Story`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0432 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u0432\u0438\u0434\u0436\u0435\u0442:\\n\\n```dart\\nStory(\\n  name: \'Button\',\\n  section: \'Buttons\',\\n  wrapperBuilder: (context, story, child) => Container(\\n    decoration: BoxDecoration(border: Border.all()),\\n    margin: const EdgeInsets.all(16),\\n    child: Center(child: child),\\n  ),\\n  builder: (context, k) => ElevatedButton(\\n    onPressed:\\n        k.boolean(label: \'Enabled\', initial: true) ? () {} : null,\\n    child: Text(k.text(label: \'Text\', initial: \'Push me\')),\\n  ),\\n),\\n```\\n\\n\u042d\u0442\u043e\u0442 \u0436\u0435 \u0431\u0438\u043b\u0434\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 `storyWrapperBuilder` \u0432 `Storybook`, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u0430 \u0432 \u044d\u0442\u043e\u0442 \u0432\u0438\u0434\u0436\u0435\u0442.\\n\\n## \u041d\u0443\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u0439!\\n\\n\u0415\u0441\u043b\u0438 \u0436\u0435 \u043e\u0434\u043d\u0438\u0445 \u0431\u0438\u043b\u0434\u0435\u0440\u043e\u0432, \u0432\u0440\u0430\u043f\u043f\u0435\u0440\u043e\u0432 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e, \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c `CustomStorybook` \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0432\u043e\u0438\u043c\u0438 \u0440\u0443\u043a\u0430\u043c\u0438:\\n\\n```dart\\nclass MyApp extends StatelessWidget {\\n  const MyApp({Key? key}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    final decoration = BoxDecoration(\\n      border: Border(\\n        right: BorderSide(color: Theme.of(context).dividerColor),\\n        left: BorderSide(color: Theme.of(context).dividerColor),\\n      ),\\n      color: Theme.of(context).cardColor,\\n    );\\n    return MaterialApp(\\n      debugShowCheckedModeBanner: false,\\n      home: Scaffold(\\n        body: CustomStorybook(\\n          builder: (context) => Row(\\n            children: [\\n              Container(\\n                width: 200,\\n                decoration: decoration,\\n                child: const Contents(),\\n              ),\\n              const Expanded(child: CurrentStory()),\\n              Container(\\n                width: 200,\\n                decoration: decoration,\\n                child: const KnobPanel(),\\n              ),\\n            ],\\n          ),\\n          children: [\\n            Story(\\n              name: \'Button\',\\n              builder: (context, k) => ElevatedButton(\\n                onPressed:\\n                    k.boolean(label: \'Enabled\', initial: true) ? () {} : null,\\n                child: Text(k.text(label: \'Text\', initial: \'Push me\')),\\n              ),\\n            )\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n```\\n\\n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0432\u0438\u0434\u0436\u0435\u0442\u044b `Contents`, `CurrentStory` \u0438 `KnobPanel` (\u0434\u0443\u043c\u0430\u044e, \u0432\u044b \u0434\u043e\u0433\u0430\u0434\u0430\u043b\u0438\u0441\u044c, \u0447\u0442\u043e \u043e\u043d\u0438 \u0434\u0435\u043b\u0430\u044e\u0442). \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0432\u043e\u0442 \u0442\u0430\u043a\u0443\u044e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u043a\u0430\u0440\u0442\u0438\u043d\u0443:\\n\\n![](./2021-04-15-storybook-flutter/custom-storybook.png)\\n\\n\u041e\u0434\u0438\u043d \u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u044e\u0437\u043a\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f `CustomStorybook` \u2013 \u0432\u043e\u0442 [\u044d\u0442\u043e\u0442 \u043f\u043b\u0430\u0433\u0438\u043d](https://pub.dev/packages/storybook_device_preview), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 `Storybook` \u0432 \u0434\u0440\u0443\u0433\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443, [device_preview](https://pub.dev/packages/device_preview), \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u043e\u0442 \u0442\u0430\u043a:\\n\\n![](./2021-04-15-storybook-flutter/device-preview.png)\\n\\n## \u0427\u0442\u043e \u0442\u0430\u043c \u0441 \u043f\u043b\u0430\u0433\u0438\u043d\u0430\u043c\u0438?\\n\\n\u041a\u0430\u043a \u044f \u0443\u0436\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u0432 \u043f\u0440\u0435\u0432\u044c\u044e \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u043e\u044f\u0432\u0438\u043b\u0430\u0441\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432 \u0438 \u043f\u0435\u0440\u0432\u044b\u0439 1st party \u043f\u043b\u0430\u0433\u0438\u043d: `DeviceFramePlugin`:\\n\\n![](./2021-04-15-storybook-flutter/device-frame-plugin.png)\\n\\n\u041f\u043b\u0430\u0433\u0438\u043d\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0438\u0441\u0442\u043e\u0440\u0438\u0438, \u0442\u0430\u043a \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432 \u043f\u0430\u043d\u0435\u043b\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f.\\n\\n\u041f\u0440\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432, \u0435\u0441\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0443 \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435.\\n\\n## \u041a\u0430\u043a\u0438\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f?\\n\\n\u041d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0441\u043e\u0431\u043e\u0439 \u043c\u0430\u0433\u0438\u0438 \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c \u043d\u0435\u0442, \u0442\u0430\u043a \u0447\u0442\u043e _\u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438_ \u0434\u043e\u043b\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430 \u0432\u0441\u0435\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f Flutter\'\u043e\u043c. \u042f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u043d\u0430 Android, iOS, Web \u0438 macOS.\\n\\n## \u0427\u0442\u043e \u0434\u0430\u043b\u044c\u0448\u0435?\\n\\n\u0414\u0430\u043b\u044c\u0448\u0435 \u0432 \u043f\u043b\u0430\u043d\u0430\u0445 \u2013 \u0443\u0441\u0442\u0430\u043a\u0430\u043d\u0438\u0442\u044c API \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432, \u043f\u043e\u0434\u0443\u043c\u0430\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u044b \u0435\u0449\u0435 \u043d\u0443\u0436\u043d\u044b \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 (\u043d\u0443 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u0445).\\n\\n\u041f\u043e\u0442\u043e\u043c, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0437\u0430\u0439\u043c\u0443\u0441\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0435\u0439 \u0442\u0435\u0441\u0442\u043e\u0432, \u043f\u0440\u043e \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u044f \u043f\u0438\u0441\u0430\u043b \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u0442\u0430\u0442\u044c\u0438.\\n\\n---\\n\\n\u041d\u0430 \u044d\u0442\u043e\u043c \u0432\u0441\u0435. \u0411\u0443\u0434\u0443 \u0440\u0430\u0434 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f\u043c, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c \u0438 \u0431\u0430\u0433-\u0440\u0435\u043f\u043e\u0440\u0442\u0430\u043c (\u043d\u0443 \u0438 \u043b\u0430\u0439\u043a\u0430\u043c/\u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u0430\u043c, \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0436\u0435, \u0447\u0435\u0433\u043e \u0443\u0436 \u0433\u0440\u0435\u0445\u0430 \u0442\u0430\u0438\u0442\u044c)."},{"id":"/2021/02/14/one-year-flutter-ru","metadata":{"permalink":"/blog/2021/02/14/one-year-flutter-ru","source":"@site/blog/2021-02-14-one-year-flutter-ru.md","title":"1 \u0433\u043e\u0434 \u0441 Flutter \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d\u0435","description":"- English version","date":"2021-02-14T00:00:00.000Z","formattedDate":"February 14, 2021","tags":[],"readingTime":14.36,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"1 \u0433\u043e\u0434 \u0441 Flutter \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d\u0435"},"prevItem":{"title":"Storybook + Flutter = storybook_flutter","permalink":"/blog/2021/03/29/storybook-flutter-ru"},"nextItem":{"title":"1 year in production with Flutter: lessons learned","permalink":"/blog/2021/02/05/one-year-flutter"}},"content":":::note\\n\\n- [English version](./2021-02-05-one-year-flutter/index.md)\\n\\n:::\\n\\n\u042d\u0442\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u043c\u043e\u0435\u0439 [\u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u0438](https://youtu.be/ARP5AozTplw) \u043d\u0430 DartUp 2020 (\u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c). \u0412 \u043d\u0435\u0439 \u044f \u0434\u0435\u043b\u044e\u0441\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u043c\u0438, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043c\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0438\u0441\u044c, \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u044e \u043d\u0430\u0448 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e \u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u0445, \u043d\u0443 \u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u044e \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441, \u0443\u0434\u0430\u0447\u043d\u043e\u0439 \u043b\u0438 \u0431\u044b\u043b\u0430 \u044d\u0442\u0430 \u0438\u0434\u0435\u044f \u2013 \u0432\u0437\u044f\u0442\u044c \u0438 \u0432\u0441\u0451 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c.\\n\\n\x3c!--truncate--\x3e\\n\\n## \u0427\u0442\u043e \u043c\u044b \u0434\u0435\u043b\u0430\u0435\u043c?\\n\\n\u041d\u0430\u0448 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u2013 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0435\u043b\u044f\u043c\u0438. \u0411\u043e\u043b\u044c\u0448\u0430\u044f \u0438 \u0441\u043b\u043e\u0436\u043d\u0430\u044f. \u0415\u0449\u0435 \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435, \u043e\u0434\u0438\u043d \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u2013 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u043e\u0435, \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c, \u0434\u043b\u044f \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 \u043e\u0442\u0435\u043b\u0435\u0439. \u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u0434 Android \u0438 iOS, \u043d\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043f\u043e\u043b\u0442\u043e\u0440\u0430 \u0433\u043e\u0434\u0430 \u043d\u0430\u0437\u0430\u0434 \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0430 Flutter. \u0418 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043b\u0438.\\n\\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u043f\u0430\u0440\u0430 \u0441\u043b\u043e\u0432 \u043e \u0441\u0430\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\\n\\n![](./2021-02-05-one-year-flutter/year_1.png)\\n\\n\u0412 \u043e\u0431\u0449\u0435\u043c-\u0442\u043e, \u044d\u0442\u043e \u0441\u0430\u043c\u043e\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0435 B2B-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e \u0432\u0441\u0435\u043c, \u0447\u0442\u043e \u043e\u0442 \u043d\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0436\u0438\u0434\u0430\u0442\u044c: \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u0434\u0430\u0447\u0438, \u0444\u043e\u0440\u043c\u043e\u0447\u043a\u0438 \u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u043e\u043c.\\n\\n\u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u0442\u044c \u043f\u0430\u0440\u0430 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u0432. \u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u0443 \u043d\u0430\u0441 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 UI, \u0443 \u043d\u0430\u0441 \u0446\u0435\u043b\u0430\u044f \u0434\u0438\u0437\u0430\u0439\u043d-\u0441\u0438\u0441\u0442\u0435\u043c\u0430 (\u0441\u043e\u0432\u0441\u0435\u043c \u043a\u0430\u043a Material Design \u0438\u043b\u0438 Cupertino Design, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435). \u042d\u0442\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\u0445, \u043a\u0430\u043a \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445, \u0442\u0430\u043a \u0438 \u0432\u0435\u0431. \u0412\u043e-\u0432\u0442\u043e\u0440\u044b\u0445, \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0443 \u0431\u044d\u043a\u0435\u043d\u0434\u0430, \u0442.\u0435. \u0431\u044d\u043a\u0435\u043d\u0434 \u043d\u0435 \u0437\u0430\u0442\u043e\u0447\u0435\u043d \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e \u043f\u043e\u0434 \u043d\u0430\u0448\u0435 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0443 \u043d\u0435\u0433\u043e \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u043d\u0435\u0435. \u042d\u0442\u043e, \u043a\u0430\u043a \u043c\u044b \u0443\u0432\u0438\u0434\u0438\u043c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c, \u0438\u0433\u0440\u0430\u0435\u0442 \u0441\u0432\u043e\u044e \u0440\u043e\u043b\u044c \u0432 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\\n\\n## \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430\\n\\n\u041c\u044b \u0441\u0442\u0430\u0440\u0430\u0435\u043c\u0441\u044f \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\u043c \u0427\u0438\u0441\u0442\u043e\u0439 \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b. \u0418 \u0435\u0441\u043b\u0438 \u0431\u044b \u043c\u0435\u043d\u044f \u043f\u043e\u043f\u0440\u043e\u0441\u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u0439 \u0441\u043b\u043e\u0432 \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u044d\u0442\u0438 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u044f \u0431\u044b \u043d\u0430\u0437\u0432\u0430\u043b **\u0441\u043b\u043e\u0438** \u0438 \u0436\u0435\u0441\u0442\u043a\u043e\u0435 **\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435** \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u0441\u043b\u043e\u044f\u043c\u0438.\\n\\n![](./2021-02-05-one-year-flutter/year_2.png)\\n\\n\u041e\u0434\u043d\u0438\u043c \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u0441\u043b\u043e\u0435\u0432 \u0434\u043b\u044f \u043d\u0430\u0441 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 **\u0441\u043b\u043e\u0439 API**. \u0412 \u043d\u0435\u043c \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c DTO \u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u043e\u043c. \u042d\u0442\u043e \u043e\u0431\u0449\u0438\u0439 \u0441\u043b\u043e\u0439, \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e. \u0412\u0441\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0435\u043b\u0435\u043d\u0430 \u043d\u0430 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 \u0441 \u0444\u0438\u0447\u0430\u043c\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0444\u0438\u0447\u0430 \u2013 \u044d\u0442\u043e \u043a\u0430\u043a \u0431\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0441 \u0431\u043e\u043b\u0435\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u0435\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e, \u0438 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0444\u0438\u0447\u0430\u043c\u0438 \u043e\u043d\u0430 \u0441\u0442\u0430\u0440\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u043e\u0431\u0449\u0430\u0442\u044c\u0441\u044f.\\n\\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0434\u043d\u0430 \u0442\u0430\u043a\u0430\u044f \u0444\u0438\u0447\u0430 \u2013 \u044d\u0442\u043e \\"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438\\", \u0434\u0440\u0443\u0433\u0430\u044f \u2013 \\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\\", \u0442\u0440\u0435\u0442\u044c\u044f \u2013 \\"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c\\". \u0412\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u0444\u0438\u0447\u0438 \u043c\u044b \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u044e \u0441\u043b\u043e\u0435\u0432 \u0441\u043e **\u0441\u043b\u043e\u0435\u043c \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438** \u043d\u0430\u0432\u0435\u0440\u0445\u0443 (\u0433\u0434\u0435 \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438/\u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445).\\n\\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u043b\u043e\u0439 \u2013 **\u0441\u043b\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445**. \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u044d\u0442\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u0441\u043b\u043e\u044f. \u042d\u0442\u043e \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0441\u043b\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u043e \u0441\u043b\u043e\u0435\u043c API. \u041a\u0430\u043a \u044f \u0443\u0436\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043b, \u043d\u0430\u0448 \u0431\u044d\u043a\u0435\u043d\u0434 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043e\u0431\u0449\u0438\u0439, \u0442\u0430\u043a \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u043e\u043d \u0437\u0430\u0442\u043e\u0447\u0435\u043d \u043f\u043e\u0434 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 (\u044d\u0442\u043e \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b, \u0435\u0441\u043b\u0438 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u2013 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u0432\u0430\u0448\u0435\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438), \u0442\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0431\u044d\u043a\u0435\u043d\u0434\u0435 \u0438 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u043e\u0445\u043e\u0436\u0438. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u043b\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u0435\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u043c, \u043f\u0443\u0441\u0442\u044c \u043b\u0443\u0447\u0448\u0435 \u0441\u043b\u043e\u0439 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441\u043e \u0441\u043b\u043e\u0435\u043c API \u0438 \u0434\u0430\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 DTO \u0438\u0437 \u043d\u0435\u0433\u043e \u043a\u0430\u043a \u043c\u043e\u0434\u0435\u043b\u0438. \u0421 \u043a\u043e\u0434\u043e\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u0440\u0430\u0441\u0438\u0432\u043e, \u0443\u0434\u043e\u0431\u043d\u043e \u0438 \u0431\u0435\u0437 \u043b\u0438\u0448\u043d\u0435\u0433\u043e \u043a\u043e\u0434\u0430.\\n\\n\u041d\u0443 \u0438 \u0432 \u0441\u0430\u043c\u043e\u043c \u043d\u0438\u0437\u0443 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f **\u0441\u043b\u043e\u0439 \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u0438**. \u0422\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u043e\u0442 \u0441\u043b\u043e\u0439 \u0437\u043d\u0430\u0435\u0442 \u043f\u0440\u043e Flutter. \u0410 \u0435\u0449\u0435 \u043e\u043d \u0437\u043d\u0430\u0435\u0442 \u043f\u0440\u043e \u0441\u043b\u043e\u0439 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u0438 \u0441\u043b\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a \u0447\u0442\u043e \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \\"\u043a\u043b\u0435\u0435\u043c\\" \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043f\u0440\u043e\u043a\u0438\u0434\u044b\u0432\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u044f \u0432\u0441\u0451 \u0432 \u043a\u0443\u0447\u0443.\\n\\n### BLoC\\n\\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c _BLoC_. \u041e \u0441\u0430\u043c\u043e\u043c \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0443, \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435 \u043a\u0443\u0447\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u043d\u0430 \u044d\u0442\u0443 \u0442\u0435\u043c\u0443, \u043d\u043e \u0432 \u0434\u0432\u0443\u0445 \u0441\u043b\u043e\u0432\u0430\u0445: \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c **UI-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442** (\u0432\u0435\u0440\u043d\u0435\u0435 \u0434\u0430\u0436\u0435, \u043b\u044e\u0431\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442) \u0438 \u0441\u0430\u043c **BLoC** (Business Logic Component, \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u043e\u0439). BLoC \u2013 \u044d\u0442\u043e \u0442\u0430\u043a\u0430\u044f \u0448\u0442\u0443\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f **\u043f\u043e\u0442\u043e\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u0439** (\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u043c \u044d\u0442\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u043a UI, \u0442\u0430\u043a \u0438 \u0434\u0440\u0443\u0433\u043e\u0439 BLoC). BLoC \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u044d\u0442\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u0432\u044b\u0434\u0430\u0435\u0442 \u043d\u0430\u0440\u0443\u0436\u0443 **\u043f\u043e\u0442\u043e\u043a \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439**, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435, \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f UI (\u0438 \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0438\u0445 \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441) \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 BLoC:\\n\\n![](./2021-02-05-one-year-flutter/year_3.png)\\n\\n\u041e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 Redux (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043f\u043b\u0430\u043d\u0435 \u043e\u0434\u043d\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445), \u043d\u043e \u0435\u0441\u0442\u044c \u0438 \u043e\u0442\u043b\u0438\u0447\u0438\u044f: \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0434\u0438\u043d store \u0441 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0442\u0443\u0442 \u043d\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u043e. \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 BLoC\'\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0432\u043e\u0438\u043c \\"\u043f\u043e\u0434-\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c\\".\\n\\n\u041c\u043d\u0435 \u044d\u0442\u043e\u0442 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043e\u0447\u0435\u043d\u044c \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043d\u0435\u0433\u043e \u0441 \u0442\u0430\u043a\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u2013 \u0435\u0441\u043b\u0438 \u043c\u044b \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u043c \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c, \u0447\u0442\u043e \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0442\u043e \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u0442\u0430\u0440\u044b\u0439 \u0434\u043e\u0431\u0440\u044b\u0439 \u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0410\u0432\u0442\u043e\u043c\u0430\u0442:\\n\\n![](./2021-02-05-one-year-flutter/year_4.png)\\n\\n\u041f\u043e \u043c\u043e\u0435\u043c\u0443 \u043e\u043f\u044b\u0442\u0443, \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435, \u0442\u0435 \u0438\u0437 \u043d\u0438\u0445, \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u043b \u0443\u0447\u0430\u0441\u0442\u0438\u0435) \u043e\u0447\u0435\u043d\u044c \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u044d\u0442\u043e\u0433\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430.\\n\\n\u0412 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 BLoC \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 [bloc](https://pub.dev/packages/bloc). \u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c, \u043c\u044b \u0441\u043b\u0435\u0434\u0443\u0435\u043c \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u043c \u043f\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435, \u043d\u043e \u0435\u0441\u0442\u044c \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043b\u0438\u0447\u0438\u0439.\\n\\n\u041f\u0435\u0440\u0432\u043e\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f BLoC\'\u0430\u043c\u0438 (\u043f\u0443\u043d\u043a\u0442\u0438\u0440\u043d\u044b\u0435 \u0441\u0442\u0440\u0435\u043b\u043a\u0438 \u043d\u0430 \u0441\u0445\u0435\u043c\u0435 \u043d\u0438\u0436\u0435).\\n\\n![](./2021-02-05-one-year-flutter/year_5.png)\\n\\n\u0412 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c `BlocA`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438\u0437 `BlocB`, \u0442\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0439\u0442\u0435 `BlocB` \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0432 `BlocA`. \u041f\u043e \u043c\u043d\u0435, \u044d\u0442\u043e \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0447\u0438\u0441\u0442\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, `BlocA` \u0437\u043d\u0430\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u043e \u0434\u0440\u0443\u0433\u0438\u0445 BLoC\'\u0430\u0445. \u0412\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e \u044f \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 `BlocA` \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u0438\u043f\u0430 `Stream<StateB>` (\u0438\u043b\u0438 `Sink<EventB>`, \u0435\u0441\u043b\u0438 \u0435\u043c\u0443 \u043d\u0430\u0434\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0432 `BlocB`). \u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u0430\u043c `BlocB` (\u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b `Stream<StateB>` \u0438 `Sink<EventB>`), \u043d\u043e \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u0430 `BlocA` \u043d\u0435\u0432\u0430\u0436\u043d\u043e, \u043e\u0442\u043a\u0443\u0434\u0430 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u044d\u0442\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 `StateB`. \u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \u043c\u044b \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0439 \u043d\u0430\u043c `Stream<StateB>` \u0438 \u043d\u0435 \u0437\u0430\u043c\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043c\u043e\u043a\u0430\u043c\u0438 \u0432\u0441\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 `BlocB`.\\n\\n\u0412\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u0432\u044f\u0437\u0430\u043d \u043d\u0435 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 `flutter_bloc`, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u043c \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435: \u044f \u0447\u0430\u0441\u0442\u043e \u0432\u0438\u0436\u0443, \u0447\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 BLoC \u043a\u0430\u043a `ViewModel`, \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u0435\u043b\u0430\u044e\u0442 \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043a\u0438\u043c \u043a UI-\u0441\u043b\u043e\u044e, \u0442\u0430\u043a \u0447\u0442\u043e \u0434\u0430\u0436\u0435 \u0442\u0430\u043a\u0438\u0435 \u0432\u0435\u0449\u0438, \u043a\u0430\u043a \u0434\u0438\u0430\u043b\u043e\u0433\u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0442\u0435\u043a\u0441\u0442 \u043a\u043d\u043e\u043f\u043a\u0438 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0431\u043b\u043e\u043a\u0430. \u041f\u043e \u043c\u043d\u0435, \u0432 \u044d\u0442\u043e\u043c \u043c\u0430\u043b\u043e \u0441\u043c\u044b\u0441\u043b\u0430, \u044f \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u044e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438 \u043b\u043e\u0433\u0438\u043a\u0443 UI \u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0432 \u0441\u043b\u043e\u0435 UI. BLoC \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u0437\u0430 \u043b\u043e\u0433\u0438\u043a\u0443 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f (\u043b\u043e\u0433\u0438\u043a\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0438\u043b\u0438 \u0434\u0430\u0436\u0435 _\u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443_, \u043a\u0430\u043a \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435).\\n\\n\u041f\u0440\u043e\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0443\u0434\u0430 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u043b\u043e\u0433\u0438\u043a\u0443 \u2013 \u0432 \u0441\u043b\u043e\u0439 UI \u0438\u043b\u0438 \u0432 BLoC \u2013 \u043f\u0440\u043e\u0432\u0435\u0434\u044f \u043c\u044b\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442: \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0447\u0442\u043e \u0432 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043c\u043e\u043c\u0435\u043d\u0442 \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 Flutter\'\u0430, \u0438\u043b\u0438 \u0434\u0430\u0436\u0435 \u043e\u0442 GUI \u0432\u043e\u043e\u0431\u0449\u0435, \u0438 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043d\u0430 CLI. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0432 \u0438\u0434\u0435\u0430\u043b\u0435, \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0442\u0440\u043e\u043d\u0443\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e UI-\u0441\u043b\u043e\u0439, \u0438 BLoC\'\u0438 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u0441\u044f.\\n\\n---\\n\\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043c \u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435.\\n\\n\u041d\u0430\u0434\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0432 \u0446\u0435\u043b\u043e\u043c, \u0438 \u0432 \u043d\u0430\u0448\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u0435 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u043c\u044b \u043b\u044e\u0431\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u0418 \u0445\u043e\u0442\u044f \u0432 \u0445\u0430\u0440\u0434\u043a\u043e\u0440\u043d\u043e\u0435 \u0424\u041f \u043c\u044b \u043d\u0435 \u043f\u043e\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u0441\u044f (\u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e Dart \u2013 \u043d\u0435 \u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f\u0437\u044b\u043a), \u043c\u044b \u0441\u0442\u0430\u0440\u0430\u0435\u043c\u0441\u044f, \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435, \u0432\u0437\u044f\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u044b\u0435 \u0438 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0438\u0437 \u0424\u041f \u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0447\u043d\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u0445 \u0432 \u041e\u041e\u041f.\\n\\n\u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0440\u0438\u043d\u0446\u0438\u043f: **\u0438\u043c\u043c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c**. \u0414\u043b\u044f \u043d\u0430\u0441 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0438\u043c\u043c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438.\\n\\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u2013 \u043f\u043e\u0432\u0441\u0435\u043c\u0435\u0441\u0442\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 **\u0447\u0438\u0441\u0442\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439**. \u041c\u044b \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u0443\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 (\u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435, \u0432 \u0441\u043b\u043e\u0435 \u0431\u0438\u0437\u043d\u0435\u0441 \u043b\u043e\u0433\u0438\u043a\u0438).\\n\\n\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043e\u0449\u0440\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 **\u0430\u043b\u0433\u0435\u0431\u0440\u0430\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445**. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f _\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439_ \u0438 _\u0441\u043e\u0431\u044b\u0442\u0438\u0439_ \u0432 BLoC\'\u0430\u0445 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043e\u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b (aka sealed classes \u2013 \u0433\u0440\u0443\u0431\u043e \u0433\u043e\u0432\u043e\u0440\u044f, \u0436\u0435\u0441\u0442\u043a\u0430\u044f \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u0432). \u0414\u0440\u0443\u0433\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u2013 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438. \u0412 \u0441\u043b\u043e\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u043c\u044b \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c `throw`. \u0412\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 `Either<E, R>`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0447\u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043b\u0438\u0431\u043e \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043b\u0438\u0431\u043e \u043e\u0448\u0438\u0431\u043a\u0430. \u0418 \u043a\u043b\u0438\u0435\u043d\u0442, \u043f\u043e\u043b\u0443\u0447\u0430\u044f \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0432\u044b\u043d\u0443\u0436\u0434\u0435\u043d \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438.\\n\\n\u041d\u0443 \u0438 \u043d\u0430\u043a\u043e\u043d\u0435\u0446 (\u044f \u043e\u0447\u0435\u043d\u044c \u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043b\u0438\u0448\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0441\u0442\u044b\u043b\u044c), \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 NNBD \u043d\u0430\u043c \u0435\u0449\u0435 \u043d\u0435 \u0437\u0430\u0432\u0435\u0437\u043b\u0438, \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0442\u043e-\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441 `null`. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u044d\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a, \u043c\u044b \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043b\u0438\u0441\u044c, \u0447\u0442\u043e \u0432 \u0441\u043b\u043e\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u0432\u0441\u0435 \u0442\u0438\u043f\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043a\u0430\u043a non-nullable, \u0438 \u0434\u043b\u044f \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \\"\u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\\" \u043c\u044b \u0432\u0432\u0435\u043b\u0438 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0442\u0438\u043f `Optional<T>`.\\n\\n## Libraries\\n\\n\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043c \u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u0445. \u041f\u043e\u043d\u044f\u0442\u043d\u043e, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u0438\u0441\u0447\u0435\u0440\u043f\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438; \u044d\u0442\u043e \u0441\u043a\u043e\u0440\u0435\u0435 \u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435.\\n\\n### [freezed](https://pub.dev/packages/freezed)\\n\\n\u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, `freezed` \u2013 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u043a\u043e\u0434\u043e\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0445\u043e\u0442\u044c \u043a\u0430\u043a-\u0442\u043e \u0441\u043c\u0438\u0440\u0438\u0442\u044c\u0441\u044f \u0441 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435\u043c sealed \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432 Dart\'\u0435.\\n\\n\u0422\u0438\u043f\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0441 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u043c\u0438 \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u0430\u043a-\u0442\u043e \u0442\u0430\u043a:\\n\\n```dart\\n@freezed\\nabstract class TasksEvent with _$TasksEvent {\\n  const factory TasksEvent.fetchRequested() = FetchRequested;\\n\\n  const factory TasksEvent.fetchCompleted(Either<Exception, TasksData> result) =\\n      FetchCompleted;\\n\\n  const factory TasksEvent.filtersUpdated(TaskFilters filters) = FiltersUpdated;\\n\\n  const factory TasksEvent.taskUpdated(Task task) = TaskUpdated;\\n\\n  const factory TasksEvent.taskCreated(Task task) = TaskCreated;\\n\\n  const factory TasksEvent.taskResolved(Task task) = TaskResolved;\\n}\\n```\\n\\n\u0417\u0434\u0435\u0441\u044c \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c, \u0447\u0442\u043e `TasksBloc` \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438\u0437 \u0441\u0442\u0440\u043e\u0433\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430. \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c, \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 `TasksBloc`, \u043c\u044b \u0434\u0435\u043b\u0435\u0433\u0438\u0440\u0443\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u044d\u0442\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 `map`:\\n\\n```dart\\n@override\\nStream<TasksState> mapEventToState(TasksEvent event) => event.map(\\n      fetchRequested: _mapFetchRequested,\\n      fetchCompleted: _mapFetchCompleted,\\n      filtersUpdated: _mapFiltersUpdated,\\n      taskUpdated: _mapTaskUpdated,\\n      taskCreated: _mapTaskCreated,\\n      taskResolved: _mapTaskResolved,\\n    );\\n\\nStream<TasksState> _mapTaskCreated(TaskCreated event) async* {\\n  // ...\\n}\\n```\\n\\n\u0415\u0441\u043b\u0438 (\u0438\u043b\u0438 \u043a\u043e\u0433\u0434\u0430) \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0449\u0435 \u043e\u0434\u043d\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u0435, \u043d\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0438 \u044d\u0442\u043e\u0442 \u043a\u043e\u0434, \u0438\u043d\u0430\u0447\u0435 \u043e\u043d \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u0441\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f.\\n\\n\u0421\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u044d\u0442\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u043d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d\u0430 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0438\u043c\u043c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438. \u0414\u043b\u044f \u043d\u0438\u0445 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443.\\n\\n### [built_collection](https://pub.dev/packages/built_collection)\\n\\n\u0412 \u043d\u0435\u0439 \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043a\u043e\u0434\u043e\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438, \u0432\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a BuiltMap \u0438\u043b\u0438 BuiltList + \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0435 Builder.\\n\\n\u0412\u043c\u0435\u0441\u0442\u0435 \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0442\u0430\u043a\u043e\u0435:\\n\\n```dart\\nyield state.copyWith(\\n  tasks: state.tasks.rebuild((b) => b[createdTask.id] = createdTask),\\n);\\n```\\n\\n### [flutter_bloc](https://pub.dev/packages/flutter_bloc)\\n\\n\u041f\u0440\u043e \u044d\u0442\u0443 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u044f \u0443\u0436\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0435\u0435 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 BLoC. \u041a\u0430\u043a-\u0442\u043e \u0442\u0430\u043a:\\n\\n```dart\\n@freezed\\nabstract class TasksState implements _$TasksState {\\n  const factory TasksState({\\n    @required ProcessingState<TaskFetchingError, EmptyResult> fetchingState,\\n    @required ProcessingState<Exception, EmptyResult> updateState,\\n    @required BuiltList<Department> departments,\\n    @required TaskFilters filters,\\n    @required BuiltMap<TaskId, Task> tasks,\\n  }) = _TasksState;\\n\\n  const TasksState._();\\n}\\n\\n@freezed\\nabstract class TasksEvent with _$TasksEvent {\\n  const factory TasksEvent.fetchRequested() = FetchRequested;\\n\\n  const factory TasksEvent.fetchCompleted(Either<Exception, TasksData> result) =\\n      FetchCompleted;\\n\\n  const factory TasksEvent.filtersUpdated(TaskFilters filters) = FiltersUpdated;\\n\\n  const factory TasksEvent.taskUpdated(Task task) = TaskUpdated;\\n\\n  const factory TasksEvent.taskCreated(Task task) = TaskCreated;\\n\\n  const factory TasksEvent.taskResolved(Task task) = TaskResolved;\\n}\\n\\nclass TasksBloc extends Bloc<TasksEvent, TasksState> {\\n  @override\\n  TasksState get initialState => TasksState(\\n        tasks: BuiltMap<TaskId, Task>(),\\n        departments: BuiltList<Department>(),\\n        filters: TaskFilters());\\n\\n  @override\\n  Stream<TasksState> mapEventToState(TasksEvent event) => event.map(\\n        fetchRequested: _mapFetchRequested,\\n        fetchCompleted: _mapFetchCompleted,\\n        filtersUpdated: _mapFiltersUpdated,\\n        taskUpdated: _mapTaskUpdated,\\n        taskCreated: _mapTaskCreated,\\n        taskResolved: _mapTaskResolved,\\n      );\\n\\n  Stream<TasksState> _mapTaskCreated(TaskCreated event) async* {\\n    yield state.copyWith(updateState: const ProcessingState.loading());\\n    final result = await _createTask(event.task);\\n    yield* result.fold(\\n      _triggerUpdateError,\\n      (taskId) async* {\\n        final createdTask = event.task.copyWith(id: taskId);\\n        yield state.copyWith(\\n          tasks: state.tasks.rebuild((b) => b[createdTask.id] = createdTask),\\n        );\\n        yield* _triggerUpdateSuccess();\\n      },\\n    );\\n  }\\n\\n  // ...\\n}\\n```\\n\\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u043c\u0435\u0442\u043e\u0434 `_mapTaskCreated`: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \\"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430\\", \u043f\u043e\u0442\u043e\u043c \u0436\u0434\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043c\u0435\u0442\u043e\u0434\u0430 `_createTask`. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0441\u043b\u043e\u044e \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u0431\u043b\u043e\u043a \u043e\u043d \u0432\u043d\u0435\u0434\u0440\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c.\\n\\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u044d\u0442\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u0438\u043f `Either<Exception, TaskId>`, \u043c\u044b \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0435\u0433\u043e \u043b\u0438\u0431\u043e \u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \\"\u041e\u0448\u0438\u0431\u043a\u0430\\", \u043b\u0438\u0431\u043e \u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \\"\u0423\u0441\u043f\u0435\u0445\\", \u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435.\\n\\n### [json_serializable](https://pub.dev/packages/json_serializable)\\n\\n\u042d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0432 \u0441\u043b\u043e\u0435 API. \u041e\u043d\u0430 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442 \u043a\u0443\u0447\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u0435\u0440\u0432\u043e\u0432 \u0438 \u043a\u043e\u0434\u0430, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0443\u043c\u0435\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438/\u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 DTO \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432/\u0438\u0437 Dart-\u043a\u043b\u0430\u0441\u0441\u043e\u0432.\\n\\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, DTO \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a:\\n\\n```dart\\n@JsonSerializable()\\nclass GetAllTasksRequest {\\n  GetAllTasksRequest({\\n    this.assigneeProfileIds,\\n    this.departmentIds,\\n    this.createdUtc,\\n    this.deadlineUtc,\\n    this.closedUtc,\\n    this.state,\\n    this.extent,\\n  });\\n\\n  final List<String> assigneeProfileIds;\\n  final List<String> departmentIds;\\n  final TimePeriodDto createdUtc;\\n  final TimePeriodDto deadlineUtc;\\n  final TimePeriodDto closedUtc;\\n  final TaskStateFilter state;\\n  final ExtentDto extent;\\n\\n  Map<String, dynamic> toJson() => _$GetAllTasksRequestToJson(this);\\n}\\n```\\n\\n### [retrofit](https://pub.dev/packages/retrofit)\\n\\n\u0414\u0440\u0443\u0436\u0438\u0442 \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 \u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u0441\u043b\u043e\u0435 API.\\n\\n\u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043e\u043f\u044b\u0442 \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u0434 Android, \u0442\u043e \u043f\u0440\u043e \u043e\u0434\u043d\u043e\u0438\u043c\u0435\u043d\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0432\u044b \u043d\u0430\u0432\u0435\u0440\u043d\u044f\u043a\u0430 \u0441\u043b\u044b\u0448\u0430\u043b\u0438. \u042d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e \u0442\u0435\u043c \u0436\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\u043c \u2013 \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043a\u043b\u0430\u0441\u0441\u0430, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0435\u0433\u043e \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u043e\u043c, \u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0435\u0433\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e:\\n\\n```dart\\n\\n@RestApi()\\nabstract class RestClient {\\n  factory RestClient(Dio dio) = _RestClient;\\n\\n  @anonymous\\n  @POST(\'/api/general/v1/users/signIn\')\\n  Future<SignInResponse> signIn(@Body() SignInRequest request);\\n\\n  @anonymous\\n  @POST(\'/api/general/v1/users/resetPassword\')\\n  Future<EmptyResponse> resetPassword(\\n    @Body() ResetPasswordRequestDto request,\\n  );\\n\\n  @POST(\'/api/commander/v1/tasks/getAll\')\\n  Future<GetAllTasksResponseDto> getTasks(@Body() GetAllTasksRequest request);\\n\\n  @POST(\'/api/commander/v1/tasks/add\')\\n  Future<TaskDto> createTask(@Body() CreateTaskDto request);\\n}\\n\\nconst anonymous = Extra({\'isAnonymous\': true});\\n```\\n\\n### [provider](https://pub.dev/packages/provider)\\n\\n\u042d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0443 \u043d\u0430\u0441, \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c, \u0434\u043b\u044f \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439.\\n\\n```dart\\n@override\\nWidget build(_) => MultiProvider(\\n  providers: [\\n    Provider<AnalyticsManager>.value(value: _analyticsManager),\\n    Provider<CurrentRouteObserver>.value(value: _routeObserver),\\n    Provider<LocalisationManager>.value(value: _localisationManager),\\n    Provider<AuthenticationManager>.value(value: _authenticationManager),\\n    Provider<RestClient>.value(value: _restClient),\\n    Provider<ImageUrlProvider>.value(value: _imageUrlProvider),\\n  ],\\n  child: App(),\\n);\\n\\n\\n_analyticsManager ??= Provider.of(context)\\n  ..setCurrentScreen(_getScreenPath(_currentPage));\\n```\\n\\n## \u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\\n\\n\u0414\u0430\u0436\u0435 \u0434\u0432\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u2013 \u044d\u0442\u043e \u0443\u0436\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043d\u0430\u0434\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443: \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438, \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u0442.\u0434.\\n\\n### \u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\\n\\n\u0412\u043e\u0442 \u0447\u0442\u043e \u043c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0432 Dart\'\u0435, \u0442\u0430\u043a \u044d\u0442\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 `dartfmt`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c. \u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u0430\u0439\u0434\u043b\u0430\u0439\u043d\u044b \u043f\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0437\u0432\u0443\u0447\u0430\u0442, \u043a\u0430\u043a \\"\u0442\u043e, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 `dartfmt`\\". \u041d\u0430 \u044d\u0442\u043e\u043c \u0432\u0441\u0435 \u0441\u043f\u043e\u0440\u044b \u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438, \u0432 \u043e\u0431\u0449\u0435\u043c, \u0438 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0442\u0441\u044f (\u043d\u0443 \u0440\u0430\u0437\u0432\u0435 \u0447\u0442\u043e \u0432\u0438\u0441\u044f\u0449\u0443\u044e \u0437\u0430\u043f\u044f\u0442\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0441\u0443\u0434\u0438\u0442\u044c). \u041c\u044b \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u0448\u0430\u0433, \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043b\u0438 CI-\u043c\u0430\u0448\u0438\u043d\u0443, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0430 \u043d\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043b\u0430 PR\'\u044b \u0441 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c. \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435, \u0447\u0442\u043e \u043c\u043d\u0435 \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f, \u0442\u0430\u043a \u044d\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u0432 80 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443. \u0418 \u043d\u0435 \u043c\u043d\u0435 \u043e\u0434\u043d\u043e\u043c\u0443:\\n\\n:::tip Linus Torvalds\\n\\n\u2026for chrissake, don\u2019t try to make 80 columns some immovable standard.\\n\\n:::\\n\\n\u041a \u0441\u0447\u0430\u0441\u0442\u044c\u044e, `dartfmt` \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c -l (\u0445\u043e\u0442\u044f \u043b\u0438\u043d\u0442\u0435\u0440 \u043d\u0435 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f, \u043c\u043e\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u043e\u043e\u0431\u0449\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e `lines_longer_than_80_chars`). \u0414\u043b\u044f \u0441\u0435\u0431\u044f \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438, \u0447\u0442\u043e 120 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u2013 \u044d\u0442\u043e \u043d\u043e\u0440\u043c\u0430.\\n\\n### \u0410\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\\n\\n\u0415\u0449\u0435 \u043e\u0434\u043d\u0430 \u043a\u0440\u0443\u0442\u0430\u044f \u0448\u0442\u0443\u043a\u0430 \u0432 Dart\'\u0435 \u2013 \u043c\u043e\u0449\u043d\u044b\u0439 \u0438 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438. \u041f\u0440\u0430\u0432\u0434\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u043d \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0434\u043e\u0431\u0440\u044b\u0439, \u043d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434. \u041c\u043e\u044f \u043e\u0431\u044b\u0447\u043d\u0430\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f \u2013 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0441\u0442\u0440\u043e\u0436\u0435.\\n\\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0439\u0442\u0438\u0441\u044c \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c, \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c/\u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0445 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0443\u0440\u043e\u0432\u043d\u0438 (\u043e\u0448\u0438\u0431\u043a\u0430/\u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435/\u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435).\\n\\n\u0423 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u043a\u0430\u043a \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b, \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b, \u043d\u0435 \u043c\u0435\u0448\u0430\u043b\u0438 \u0433\u043e\u0440\u044f\u0447\u0435\u0439 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 (\u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e \u0441\u043b\u0435\u0434\u0438\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0437\u0430 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438, \u043f\u043e\u043a\u0430 \u0442\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0433\u0440\u0430\u0435\u0448\u044c\u0441\u044f \u0441 \u043a\u043e\u0434\u043e\u043c); \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b, \u043d\u0430 CI-\u043c\u0430\u0448\u0438\u043d\u0435 \u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442 PR.\\n\\n\u0415\u0441\u043b\u0438 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043b\u0435\u043d\u044c, \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0433\u043e\u0442\u043e\u0432\u044b\u043c \u043f\u0430\u043a\u0435\u0442\u043e\u043c:\\n\\n- [pedantic\u200a](https://pub.dev/packages/pedantic) \u2014 \u0433\u0443\u0433\u043b\u043e\u0432\u0441\u043a\u0438\u0439;\\n- [effective_dart](https://pub.dev/packages/effective_dart) \u200a\u2014 \u200a\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e Effective Dart;\\n- [mews_pedantic\u200a](https://pub.dev/packages/mews_pedantic) \u2014 \u200a\u043d\u0430\u0448.\\n\\n## CI/CD\\n\\n\u0427\u0442\u043e \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f CI/CD, \u0442\u043e \u0442\u0443\u0442 \u044f \u0441\u043a\u0430\u0436\u0443: \\"\u041d\u0435 \u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0442\u0430\u043a, \u043a\u0430\u043a \u043c\u044b\\". \u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Azure Pipelines (\u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438), \u0438 \u0445\u043e\u0442\u044f \u043e\u043d\u0438 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0438 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u043e\u0449\u043d\u044b\u0435, \u043f\u043e\u0434 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443, \u0430 \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434 Flutter, \u043e\u043d\u0438 \u043d\u0435 \u0437\u0430\u0442\u043e\u0447\u0435\u043d\u044b. \u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 \u043e\u0431\u043b\u0430\u0447\u043d\u044b\u0445 \u0430\u0433\u0435\u043d\u0442\u0430\u0445 \u0434\u0430\u0436\u0435 \u043d\u0435\u0442 \u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e Flutter\'\u0430, \u0438 \u0435\u0433\u043e \u043d\u0430\u0434\u043e \u0441 \u043a\u0430\u0436\u0434\u044b\u043c \u0431\u0438\u043b\u0434\u043e\u043c \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u043d\u043e\u0432\u043e. \u041d\u0443 \u0438 \u0441\u0430\u043c\u0438 \u0448\u0430\u0433\u0438 \u2013 \u044d\u0442\u043e \u0434\u0438\u043a\u0430\u044f \u0441\u043c\u0435\u0441\u044c YAML \u0438 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432.\\n\\n\u0412\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e, \u0447\u0438\u0441\u0442\u043e \u0434\u043b\u044f Flutter\'\u0430, \u043b\u0443\u0447\u0448\u0435 \u0432\u0437\u044f\u0442\u044c \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0431\u043e\u043b\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435:\\n\\n- [Bitrise](https://www.bitrise.io/) \u2013 \u0432 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u043c \u043f\u043b\u0430\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 1 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a, \u0442\u0430\u0439\u043c\u0430\u0443\u0442 \u0432 30 \u043c\u0438\u043d\u0443\u0442 \u043d\u0430 \u0431\u0438\u043b\u0434 \u0438 200 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043c\u0435\u0441\u044f\u0446.\\n- [Codemagic](https://codemagic.io/) \u2013 500 \u043c\u0438\u043d\u0443\u0442 \u0432 \u043c\u0435\u0441\u044f\u0446, macOS \u0438 120 \u043c\u0438\u043d\u0443\u0442 \u043d\u0430 \u0431\u0438\u043b\u0434 \u0431\u0435\u0437\u0432\u043e\u0437\u043c\u0435\u0437\u0434\u043d\u043e, \u0442\u043e \u0435\u0441\u0442\u044c \u0434\u0430\u0440\u043e\u043c.\\n- [Appcircle](https://appcircle.io/). \u0422\u043e\u0436\u0435 \u0435\u0441\u0442\u044c \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0439 \u043f\u043b\u0430\u043d \u0441 1 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u0438 25-\u043c\u0438\u043d\u0443\u0442\u043d\u044b\u043c \u0442\u0430\u0439\u043c-\u0430\u0443\u0442\u043e\u043c.\\n\\n\u041a\u0441\u0442\u0430\u0442\u0438, \u043d\u0435 \u0443\u0432\u0435\u0440\u0435\u043d \u043d\u0430\u0441\u0447\u0435\u0442 Appcircle, \u043d\u043e Bitrise \u0438 Codemagic \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0441 AWS device farm \u2013 \u0442.\u0435. \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c UI-\u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u0432\u0430\u0439\u0441\u0430\u0445 (\u0445\u043e\u0442\u044c \u0438 \u043d\u0435 \u0437\u0430\u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e).\\n\\n\u042f \u0432 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0441\u0430\u0439\u0434-\u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b Codemagic \u2013 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u043e, \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0441\u0442\u043e\u0438\u0442.\\n\\n\u041c\u043e\u0436\u043d\u043e \u0435\u0449\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c GitHub Actions, \u043d\u043e \u0441 \u043d\u0438\u043c\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0442\u0430\u043a\u0430\u044f \u0436\u0435, \u043a\u0430\u043a \u0438 \u0441 Azure Pipelines \u2013 \u043e\u043d\u0438 \u043d\u0435 \u0437\u0430\u0442\u043e\u0447\u0435\u043d\u044b \u043d\u0430 Flutter. \u0422\u0430\u043c \u0442\u043e\u0436\u0435 \u0435\u0441\u0442\u044c \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0439 \u043f\u043b\u0430\u043d \u0441 500 MB \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\u043c \u0438 2.000 \u043c\u0438\u043d\u0443\u0442 \u0432 \u043c\u0435\u0441\u044f\u0446, \u043d\u043e \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u043f\u043e\u0434\u0432\u043e\u0445: \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0448\u0438\u043d\u0443 \u0441 macOS (\u0430 \u0435\u0435 \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435, \u0447\u0442\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u0434 iOS), \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u0433\u0435\u043d\u0442\u0430 \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u0442\u0441\u044f \u043d\u0430 10! \u0422.\u0435., \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e macOS-\u0430\u0433\u0435\u043d\u0442\u044b, \u0442\u043e \u0443 \u0432\u0430\u0441 \u043d\u0430 2.000 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0445 \u043c\u0438\u043d\u0443\u0442, \u0430 200.\\n\\n## \u041f\u043e\u0434\u0432\u043e\u0434\u043d\u044b\u0435 \u043a\u0430\u043c\u043d\u0438\\n\\n\u041d\u0430 \u0447\u0442\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u0440\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u043e\u0434 Flutter.\\n\\n\u041e\u0434\u0438\u043d \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u0435\u043d\u044f \u043f\u0443\u043d\u043a\u0442\u043e\u0432 \u2013 **\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a**. \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0432 Dart\'\u043e\u0432\u0441\u043a\u043e\u043c \u043a\u043e\u0434\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0435 \u0443\u043f\u0430\u0434\u0435\u0442. \u041c\u0435\u043d\u044f, \u043f\u0435\u0440\u0435\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0438\u0437 \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u044d\u0442\u043e \u043f\u043e\u043d\u0430\u0447\u0430\u043b\u0443 \u043e\u0447\u0435\u043d\u044c \u0441\u043c\u0443\u0449\u0430\u043b\u043e. \u041e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043e\u043a, \u043c\u044b \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c [sentry](https://pub.dev/packages/sentry).\\n\\n\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043d\u0435 \u043d\u0430\u0434\u043e \u0437\u0430\u0431\u044b\u0432\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u0447\u0442\u043e Flutter \u2013 \u043a\u0440\u043e\u0441\u0441-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u044b\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a, \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0432\u044b\u0442\u0435\u043a\u0430\u044e\u0449\u0438\u043c\u0438 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e **\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f\u043c\u0438**. \u041a \u0442\u043e\u043c\u0443 \u0436\u0435, Flutter \u0435\u0449\u0435 \u0438 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u043e\u043b\u043e\u0434. \u0422\u0430\u043a, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043c\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0438\u0441\u044c \u0441 \u0442\u0435\u043c \u0447\u0442\u043e \u043d\u0435\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430\u043c\u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 (\u0441\u0435\u0439\u0447\u0430\u0441 \u044d\u0442\u043e \u0443\u0436\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b\u0438). \u0412\u0440\u0435\u043c\u044f \u043e\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0431\u0443\u0434\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0442\u044c \u2013 \u0438\u0437-\u0437\u0430 \u0441\u0432\u043e\u0435\u0439 \u043a\u0440\u043e\u0441\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u043e\u0441\u0442\u0438 Flutter \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432 \u0440\u043e\u043b\u0438 \u0434\u043e\u0433\u043e\u043d\u044f\u044e\u0449\u0435\u0433\u043e.\\n\\n\u0415\u0449\u0435 \u043e\u0434\u043d\u0438\u043c \u043d\u0435\u043f\u0440\u0438\u044f\u0442\u043d\u044b\u043c \u0431\u0430\u0433\u043e\u043c \u0441\u0442\u0430\u043b\u0430 \u043a\u043e\u0440\u044f\u0432\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 text ellipsizing (\u043a\u0430\u043a \u044d\u0442\u043e \u043f\u043e-\u0440\u0443\u0441\u0441\u043a\u0438 \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f?) \u041d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0430 \u043d\u0435\u0442, \u0444\u0438\u043a\u0441 \u0432\u0440\u043e\u0434\u0435 \u0431\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0441\u0430\u043c\u043e\u043c \u0434\u0432\u0438\u0436\u043a\u0435, \u0442\u0430\u043a \u0447\u0442\u043e \u0432\u0440\u044f\u0434 \u043b\u0438 \u0441\u043a\u043e\u0440\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u044f\u0442.\\n\\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 (\u044f \u043e \u043d\u0435\u043c \u0443\u0436\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043b, \u043d\u043e \u043e\u043d \u0434\u043e\u0441\u0442\u043e\u0438\u043d \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e \u043d\u0435\u043c\u0443 \u0435\u0449\u0435 \u0440\u0430\u0437 \u043f\u0440\u043e\u0439\u0442\u0438\u0441\u044c) \u2013 **`NoSuchMethodError`** (\u0437\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439, Java \u0441 \u0435\u0435 `NullPointerException`). \u0413\u043e\u0432\u043e\u0440\u044f\u0442, \u0441\u043a\u043e\u0440\u043e \u0432\u0441\u0435 \u0431\u0443\u0434\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u043e, \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c _\u0432\u0441\u0435\u0433\u043e \u043b\u0438\u0448\u044c_ \u0434\u043e\u0436\u0434\u0430\u0442\u044c\u0441\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0441\u0430\u043c\u043e\u0433\u043e Flutter\'\u0430 \u0438 \u0432\u0441\u0435\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u043d\u043e \u043f\u043e\u043a\u0430 \u2013 \u0447\u0442\u043e \u0435\u0441\u0442\u044c, \u0442\u043e \u0435\u0441\u0442\u044c.\\n\\n\u0423\u043f\u043e\u043c\u044f\u043d\u0443 \u0435\u0449\u0435 \u043e\u0434\u043d\u0443 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0441 \u043a\u043e\u0434\u043e\u0432\u044b\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c **\u043c\u0430\u0433\u0438\u044f** (\u0438 \u0434\u0430\u043b\u0435\u043a\u043e \u043d\u0435 \u0431\u0435\u043b\u0430\u044f). \u0412\u0440\u0435\u043c\u044f \u043e\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0432\u044b \u0431\u0443\u0434\u0435\u0442\u0435 \u043d\u0430\u0442\u044b\u043a\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u041e\u0447\u0435\u043d\u044c \u0421\u0442\u0440\u0430\u043d\u043d\u044b\u0435 \u041e\u0448\u0438\u0431\u043a\u0438 (\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c, \u043f\u0440\u0438 \u0441\u0431\u043e\u0440\u043a\u0435 iOS \u0432\u0435\u0440\u0441\u0438\u0438). \u0427\u0442\u043e\u0431\u044b \u0438\u0445 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c, \u0440\u0430\u0441\u0447\u0435\u0445\u043b\u044f\u0435\u043c \u0431\u0443\u0431\u0435\u043d \u0438 \u043f\u043e\u0435\u0445\u0430\u043b\u0438: \\"\u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438? \u0410 IDE \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c? \u0410 `flutter clean` \u0441\u0434\u0435\u043b\u0430\u0442\u044c? \u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0435 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435?\\" \u0415\u0441\u043b\u0438 \u043f\u043e\u0432\u0435\u0437\u0435\u0442 \u2013 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u0441\u0447\u0435\u0437\u043d\u0443\u0442. \u041d\u043e \u0438\u043d\u043e\u0433\u0434\u0430 \u043d\u0435 \u0432\u0435\u0437\u0435\u0442, \u0438 \u0442\u043e\u0433\u0434\u0430 \u0440\u0430\u0434\u0443\u0439\u0442\u0435\u0441\u044c, \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0435\u0441\u0442\u044c \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u043e\u0448\u0438\u0431\u043a\u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0435 (\u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0442\u0435, \u0447\u0442\u043e \u0438\u0437\u0432\u0435\u0440\u0433\u0430\u0435\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f Xcode).\\n\\n## \u0422\u0430\u043a \u0447\u0442\u043e, \u043e\u043d\u043e \u0442\u043e\u0433\u043e \u0441\u0442\u043e\u0438\u043b\u043e?\\n\\n\u0412\u043e\u0442 \u0438 \u043d\u0430\u0441\u0442\u0430\u043b\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u044d\u0442\u043e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441. \u041d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \\"\u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u0438 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\\"? \u041f\u0440\u0430\u0432 \u043b\u0438 \u044f \u0431\u044b\u043b, \u0443\u0431\u0435\u0436\u0434\u0430\u044f \u0432\u0441\u0435\u0445 \u041b\u041f\u0420 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043d\u0430 \u043d\u043e\u0432\u0443\u044e \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044e? \u0421\u0434\u0435\u043b\u0430\u043b \u0431\u044b \u044f \u044d\u0442\u043e \u0435\u0449\u0435 \u0440\u0430\u0437?\\n\\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e, \u0434\u0430. \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0432\u0441\u0435 \u043c\u043e\u0438 \u043f\u0440\u0435\u0442\u0435\u043d\u0437\u0438\u0438. \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e Google \u043f\u0435\u0447\u0430\u043b\u044c\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u0441\u0432\u043e\u0438\u043c \u043a\u043b\u0430\u0434\u0431\u0438\u0449\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432. Flutter \u0434\u043b\u044f \u043d\u0430\u0441 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e. \u0412\u0437\u044f\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b UI \u2013 \u0435\u0441\u043b\u0438 \u0432\u044b \u0434\u0435\u043b\u0430\u043b\u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 UI-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e Android-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u044b \u043d\u0430\u0432\u0435\u0440\u043d\u044f\u043a\u0430 \u043f\u043e\u043c\u043d\u0438\u0442\u0435 \u044d\u0442\u0443 \u0431\u043e\u043b\u044c. \u0410 \u0443\u0436 \u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u0438 \u0442\u0443 \u0436\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043f\u043e\u0434 \u043e\u0431\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b...\\n\\n\u041f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0443 \u043d\u0430\u0441 4 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043c\u0435\u043d\u044f). \u042f \u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0432\u0441\u044f\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439, \u0438 \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0439, \u0438 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u043c \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 Android-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438, \u043d\u043e \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043d\u0430 Flutter \u0434\u0430\u043b\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u043b\u0435\u0433\u043a\u043e. \u0412 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e, \u0442\u0430\u043a \u0447\u0442\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u0440\u043e\u0441\u043b\u0430, \u0438 \u043d\u043e\u0432\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u043e\u0434 \u043e\u0431\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0432\u044b\u0445\u043e\u0434\u044f\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441 \u043e\u0434\u043d\u0438\u043c\u0438 \u0438 \u0442\u0435\u043c\u0438 \u0436\u0435 \u0444\u0438\u0447\u0430\u043c\u0438 (\u0438 \u0431\u0430\u0433\u0430\u043c\u0438).\\n\\n\u0427\u0435\u0441\u0442\u043d\u043e \u0433\u043e\u0432\u043e\u0440\u044f, \u044f \u043d\u0435 \u0444\u0430\u043d\u0430\u0442 Dart\'\u0430. \u041c\u043d\u0435 [\u043e\u0447\u0435\u043d\u044c \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442](./2020-07-20-dart-vs-kotlin.md) \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Kotlin\'\u0430, \u043d\u043e \u043a\u043e\u0434\u043e\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0438 \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0441\u043f\u0430\u0441\u0430\u044e\u0442. \u0415\u0441\u043b\u0438 \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0442\u044c\u0441\u044f, \u0442\u043e \u0434\u0430\u0436\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430 \u0432\u043f\u043e\u043b\u043d\u0435 \u043f\u0440\u0438\u043b\u0438\u0447\u043d\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435. \u0410 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0432\u0435\u0437\u0434\u0435 (\u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435, \u0438 UI) \u043f\u0435\u0440\u0435\u0432\u0435\u0448\u0438\u0432\u0430\u0435\u0442 \u043c\u043d\u043e\u0433\u0438\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438. \u0411\u0435\u0437 Flutter\'\u0430 \u043d\u0430\u043c \u0431\u044b \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c, \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435, \u0432 1,5 \u0440\u0430\u0437\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u2013 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0432\u044b\u0442\u0435\u043a\u0430\u044e\u0449\u0438\u043c\u0438.\\n\\nFlutter, \u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u043d\u0435 \u0441\u0435\u0440\u0435\u0431\u0440\u044f\u043d\u0430\u044f \u043f\u0443\u043b\u044f. \u0415\u0451 \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435\u0442, \u0433\u043e\u0432\u043e\u0440\u044f\u0442. Flutter \u2013 \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u0438 \u0435\u0441\u043b\u0438 \u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e, \u044d\u0442\u043e \u0448\u0438\u043a\u0430\u0440\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442."},{"id":"/2021/02/05/one-year-flutter","metadata":{"permalink":"/blog/2021/02/05/one-year-flutter","source":"@site/blog/2021-02-05-one-year-flutter/index.md","title":"1 year in production with Flutter: lessons learned","description":"- \u0420\u0443\u0441\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f","date":"2021-02-05T00:00:00.000Z","formattedDate":"February 5, 2021","tags":[],"readingTime":18.72,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"1 year in production with Flutter: lessons learned"},"prevItem":{"title":"1 \u0433\u043e\u0434 \u0441 Flutter \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d\u0435","permalink":"/blog/2021/02/14/one-year-flutter-ru"},"nextItem":{"title":"13 reasons why Dart is worse than Kotlin","permalink":"/blog/2020/07/20/dart-vs-kotlin"}},"content":":::note\\n\\n- [\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f](../2021-02-14-one-year-flutter-ru.md)\\n\\n:::\\n\\nThis is a text version of my [presentation](https://youtu.be/ARP5AozTplw) at DartUP 2020.\\n\\n\x3c!--truncate--\x3e\\n\\n## What do we do?\\n\\nOur main product is a large and complex Property Management System. Also, we have a set of smaller products, one of which is a mobile application intended mainly for housekeepers and other hotel staff. Initially, it was written as a native application for iOS and Android, but about 1.5 years ago we decided to migrate it to Flutter.\\n\\nIn this article, I would like to share some problems we\u2019ve encountered so far, describe the architecture we\u2019ve eventually come to, what libraries we\u2019ve found useful, and eventually, I\u2019ll answer the question: was it a good idea to re-write our app from scratch using Flutter?\\n\\nFirst of all, let me quickly describe the functionality of the application.\\n\\n![](year_1.png)\\n\\nThis is just a common B2B app with the functionality you would normally expect from it: authentication, profile management, messages and tasks, forms, and communication with backend API.\\n\\nThere are, however, a couple of things that are not so common. First of all, we have a fully custom UI, or more precisely, a custom design system (that stays on the same level of hierarchy as Material Design for Android or Cupertino Design for iOS). It\u2019s used across all our applications and has implementations for mobile and web. Another thing, which may be not so common for the majority of apps, but is pretty standard in the enterprise world: the backend serves the whole set of products, it\u2019s not \\"app-centric\\" \u2014 \u200ait solves a lot of different tasks, so the models and flow on the backend don\u2019t really match the models and flows that we define in the mobile app. It\u2019s important because it has an impact on the overall app architecture.\\n\\n## Architecture\\n\\nMainly, we follow Clean Architecture principles. If I would have been asked to describe these principles in just a couple of words, I would go with **layers** and strict **directions** of dependencies between these layers.\\n\\n![](year_2.png)\\n\\nFor us, one of the major layers is the **API layer**, where we define DTOs and methods for communication with the backend. This is a common layer that is used across the whole app. All the other functionality is divided into a set of horizontal features. Each feature can be viewed as a standalone module with more or less complete functionality, so it should communicate with other features as little as possible.\\n\\nFor example, one feature can be \u201cTask management\u201d, another one: \u201cMessaging system\u201d or \u201cProfile management\u201d. Inside of each feature we have a vertical hierarchy of some common layers with the **Business Logic Layer** on top (where we define our app models and interfaces for fetching and posting data).\\n\\nNext comes the **Data Layer** \u200a\u2014 \u200athis is where these interfaces are implemented, and this is the only layer that communicates with the API. As I\u2019ve mentioned earlier, our backend is pretty common, so if you have an \u201capp-centric\u201d backend (it often makes sense if the mobile app is the main product of your company), you probably have a pretty close match between backend and app models. In this case, the Data Layer can be excessive and a more reasonable way could be to allow the Business Logic Layer to communicate directly with the API layer and reuse its DTOs as models. With code generation support you can easily set it up in this way, and you can remove a lot of code duplication.\\n\\nAt the bottom, there is the **Presentation Layer**. This is the only layer that knows about Flutter. It also knows about the Business Logic Layer and the Data Layer and acts as the \u201cglue\u201d by providing necessary dependencies and combining everything together.\\n\\n### BLoC\\n\\nAs the main pattern for implementing the architecture, we use BLoC. I won\u2019t talk a lot about the pattern itself, there are a lot of resources describing it, but: there are two main components \u200a\u2014 \u200a**UI** (actually, any client) and **BLoC** itself which stands for Business Logic Component. BLoC is an entity that can receive a **stream of events** (which can be emitted by UI or by another BLoC). It transforms these events and maps them onto a **stream of states** (which in turn can be consumed by the UI to render the interface or by some other BLoC):\\n\\n![](year_3.png)\\n\\nIt\u2019s very similar to the Redux pattern (e.g., we have unidirectional data flow), but it also has some differences: e.g., we don\u2019t have a single store (state) for the whole application, instead, the application is considered as a set of sub-states (represented by BLoCs) communicating with each other.\\n\\nWhat I especially like about the BLoC pattern\u200a\u2014\u200aif we limit the number of states the app can be in, and define events forcing the transition from one state to another, we will get a State Machine.\\n\\nFrom my experience, all of the business apps, at least the ones I\u2019ve developed, can be naturally represented using this State Machine pattern:\\n\\n![](year_4.png)\\n\\nIn our project, we\u2019re using BLoC pattern implementation provided by bloc library. Mostly, we follow the official guidelines regarding how to structure the app, but we have a couple of differences.\\n\\nThe first one is about BLoC to BLoC communication (dashed arrows on the next scheme).\\n\\n![](year_5.png)\\n\\nAs they propose in the official documentation, if you have `BlocA` depending on `BlocB`\'s state, you should pass `BlocB` as a dependency to `BlocA`. For me, it\u2019s not a very clean solution, because `BlocA` now knows too much about other BLoCs. Instead, I prefer to define it such that `BlocA` has a dependency on `Stream<StateB>`(or `Sink<EventB>` if it needs to send events to `BlocB`). Of course, when you provide the dependency you can just pass `BlocB` directly (as it implements `Stream<StateB>` interface), but from the `BlocA` point of view, it doesn\u2019t matter who exactly provides this stream of states. That allows passing some stub streams in our test code with predefined values, instead of mocking the whole `BlocB` class.\\n\\nAnother thing unrelated to the `flutter_bloc` library per se, but more about BLoC pattern usage: I often see that developers treat BLoCs as View Models and define their BLoC states very close to the UI level so that even things like confirmation dialogs and button texts are defined in the BLoC state. For me, it doesn\u2019t make much sense, and I prefer having the UI state and UI logic defined in the UI layer. BLoC in my opinion should be responsible for higher level logic (app logic or _business logic_ as the name suggests).\\n\\nThe best way to decide whether some logic belongs to the UI layer or to BLoC can be this thought experiment: imagine that at some point in time we decide to step away from Flutter, and even from GUI completely, and switch to CLI instead. In this case, all changes should, ideally, be done in the UI layer, and the BLoC layer shouldn\u2019t be changed at all.\\n\\n---\\n\\nNow let\u2019s talk about some principles we follow while developing the app.\\n\\nI need to say that here in Mews as a whole (and in our mobile team in particular) we like functional programming. While we are not that deep into hardcore FP (one of the reasons is that Dart is not really the language for that), we try to at least extract practical and useful advice from FP principles and apply them in a way that they work together with OOP organically.\\n\\nFirst, **immutability**. For us, it means that all our models, states, and events are immutable.\\n\\nNext is the common use of **pure functions**. Our functions (our business logic functions, at least) are as free from side effects as possible.\\n\\nAlso, heavy usage of **Algebraic Data Types**. For example, we\u2019re using co-product types (or sealed classes: basically a limited hierarchy where a class can have only a predefined set of subclasses) for _states_ emitted by BLoCs and _events_ they can accept. Another example can be the way we treat errors. In our business logic code, we banned using the `throw` keyword. Instead, we use a wrapper class, `Either<E, R>` which represents that the expected result can be either successful data or an error. In that case, a client using this returned result is forced to deal with possible failure.\\n\\nLastly (and I hope it\u2019s a temporary hack rather than a long-running solution) is caused by the fact that we don\u2019t have proper non-nullable types yet. It should be resolved in the near future, but for now, we have to deal with it, as it\u2019s really a common source of errors. So, we decided in our business logic code to treat all types as non-nullable, and when we need to pass a null value we use the `Optional<T>` wrapper type instead.\\n\\n## Libraries\\n\\nNow, let\u2019s talk about libraries we\u2019ve found useful. This is clearly not an exhaustive list of all the libraries we use in our app, but rather a starter kit that I would recommend for any app.\\n\\n### freezed\\n\\n> Code generation for immutable classes that has a simple syntax/API without compromising on the features.\\n\\nFirst, [freezed](https://pub.dev/packages/freezed) library. It\u2019s based on code generation and removes a lot of boilerplate code if you need immutable or sealed classes.\\n\\nThis is how a typical BLoC events class looks in our application:\\n\\n```dart\\n@freezed\\nabstract class TasksEvent with _$TasksEvent {\\n  const factory TasksEvent.fetchRequested() = FetchRequested;\\n\\n  const factory TasksEvent.fetchCompleted(Either<Exception, TasksData> result) =\\n      FetchCompleted;\\n\\n  const factory TasksEvent.filtersUpdated(TaskFilters filters) = FiltersUpdated;\\n\\n  const factory TasksEvent.taskUpdated(Task task) = TaskUpdated;\\n\\n  const factory TasksEvent.taskCreated(Task task) = TaskCreated;\\n\\n  const factory TasksEvent.taskResolved(Task task) = TaskResolved;\\n}\\n```\\n\\nHere we state that `TasksBloc` can only receive one of the predefined events. Later, in the TasksBloc class, we delegate these events to processing methods using the generated `map` method:\\n\\n```dart\\n@override\\nStream<TasksState> mapEventToState(TasksEvent event) => event.map(\\n      fetchRequested: _mapFetchRequested,\\n      fetchCompleted: _mapFetchCompleted,\\n      filtersUpdated: _mapFiltersUpdated,\\n      taskUpdated: _mapTaskUpdated,\\n      taskCreated: _mapTaskCreated,\\n      taskResolved: _mapTaskResolved,\\n    );\\n\\nStream<TasksState> _mapTaskCreated(TaskCreated event) async* {\\n  // ...\\n}\\n```\\n\\nThe nice thing is that if (or when) at some point in time we add another event type, we\u2019re forced to update this code as well, otherwise, it won\u2019t compile.\\n\\nThe only disadvantage of this library, for me, is that currently it doesn\u2019t play well with immutable collections, so we use a different library for them.\\n\\n### built_collection\\n\\n> Immutable collections based on the SDK collections. Each SDK collection class is split into a new immutable collection class and a corresponding mutable builder class.\\n\\n[built_collection](https://pub.dev/packages/built_collection) library is not based on code generation. Instead, it provides some helper types, such as `BuiltMap` and `BuiltList`, and a number of helper methods for updating items in a collection using the Builder pattern.\\n\\nTogether with `freezed` library, we can use it like this:\\n\\n```dart\\nyield state.copyWith(\\n  tasks: state.tasks.rebuild((b) => b[createdTask.id] = createdTask),\\n);\\n```\\n\\n### flutter_bloc\\n\\n> Flutter Widgets that make it easy to implement the BLoC (Business Logic Component) design pattern. Built to be used with the bloc state management package.\\n\\nAs I\u2019ve already mentioned, for BLoC pattern implementation we use the [flutter_bloc](https://pub.dev/packages/flutter_bloc) library. This is how our typical BLoC looks like:\\n\\n```dart\\n@freezed\\nabstract class TasksState implements _$TasksState {\\n  const factory TasksState({\\n    @required ProcessingState<TaskFetchingError, EmptyResult> fetchingState,\\n    @required ProcessingState<Exception, EmptyResult> updateState,\\n    @required BuiltList<Department> departments,\\n    @required TaskFilters filters,\\n    @required BuiltMap<TaskId, Task> tasks,\\n  }) = _TasksState;\\n\\n  const TasksState._();\\n}\\n\\n@freezed\\nabstract class TasksEvent with _$TasksEvent {\\n  const factory TasksEvent.fetchRequested() = FetchRequested;\\n\\n  const factory TasksEvent.fetchCompleted(Either<Exception, TasksData> result) =\\n      FetchCompleted;\\n\\n  const factory TasksEvent.filtersUpdated(TaskFilters filters) = FiltersUpdated;\\n\\n  const factory TasksEvent.taskUpdated(Task task) = TaskUpdated;\\n\\n  const factory TasksEvent.taskCreated(Task task) = TaskCreated;\\n\\n  const factory TasksEvent.taskResolved(Task task) = TaskResolved;\\n}\\n\\nclass TasksBloc extends Bloc<TasksEvent, TasksState> {\\n  @override\\n  TasksState get initialState => TasksState(\\n        tasks: BuiltMap<TaskId, Task>(),\\n        departments: BuiltList<Department>(),\\n        filters: TaskFilters());\\n\\n  @override\\n  Stream<TasksState> mapEventToState(TasksEvent event) => event.map(\\n        fetchRequested: _mapFetchRequested,\\n        fetchCompleted: _mapFetchCompleted,\\n        filtersUpdated: _mapFiltersUpdated,\\n        taskUpdated: _mapTaskUpdated,\\n        taskCreated: _mapTaskCreated,\\n        taskResolved: _mapTaskResolved,\\n      );\\n\\n  Stream<TasksState> _mapTaskCreated(TaskCreated event) async* {\\n    yield state.copyWith(updateState: const ProcessingState.loading());\\n    final result = await _createTask(event.task);\\n    yield* result.fold(\\n      _triggerUpdateError,\\n      (taskId) async* {\\n        final createdTask = event.task.copyWith(id: taskId);\\n        yield state.copyWith(\\n          tasks: state.tasks.rebuild((b) => b[createdTask.id] = createdTask),\\n        );\\n        yield* _triggerUpdateSuccess();\\n      },\\n    );\\n  }\\n\\n  // ...\\n}\\n```\\n\\nTake a look at the `_mapTaskCreated` method: first of all, we emit the loading state and then we wait for the `_createTask` method to finish. This method is injected into the BLoC, the real implementation belongs to the Data Layer.\\n\\nThe result of this method is of type `Either<Exception, TaskId>`, so we map it to either error state or success state, then yield the corresponding state.\\n\\n### json_serializable\\n\\n> Automatically generate code for converting to and from JSON by annotating Dart classes.\\n\\nAnother library that is heavily used in the API Layer is [json_serializable](https://pub.dev/packages/json_serializable). It\u2019s based on code generation and removes a ton of boilerplate code needed for serializing/deserializing DTOs and mapping them to Dart classes.\\n\\nThis is an example of a typical DTO:\\n\\n```dart\\n@JsonSerializable()\\nclass GetAllTasksRequest {\\n  GetAllTasksRequest({\\n    this.assigneeProfileIds,\\n    this.departmentIds,\\n    this.createdUtc,\\n    this.deadlineUtc,\\n    this.closedUtc,\\n    this.state,\\n    this.extent,\\n  });\\n\\n  final List<String> assigneeProfileIds;\\n  final List<String> departmentIds;\\n  final TimePeriodDto createdUtc;\\n  final TimePeriodDto deadlineUtc;\\n  final TimePeriodDto closedUtc;\\n  final TaskStateFilter state;\\n  final ExtentDto extent;\\n\\n  Map<String, dynamic> toJson() => _$GetAllTasksRequestToJson(this);\\n}\\n```\\n\\n### retrofit\\n\\n> retrofit.dart is an dio client generator using source_gen and inspired by Chopper and Retrofit.\\n\\nTogether with the previous library, we heavily rely on [retrofit](https://pub.dev/packages/retrofit) to generate API methods implementation.\\n\\nIf you have experience in developing native Android apps, you\u2019ve probably heard about the Android retrofit library that served as inspiration for this package. The idea is that you\u2019re defining an interface with methods communicating with backend API, then the library generates the bodies of those methods, taking care of the serialization/deserialization of request and response DTOs:\\n\\n```dart\\n\\n@RestApi()\\nabstract class RestClient {\\n  factory RestClient(Dio dio) = _RestClient;\\n\\n  @anonymous\\n  @POST(\'/api/general/v1/users/signIn\')\\n  Future<SignInResponse> signIn(@Body() SignInRequest request);\\n\\n  @anonymous\\n  @POST(\'/api/general/v1/users/resetPassword\')\\n  Future<EmptyResponse> resetPassword(\\n    @Body() ResetPasswordRequestDto request,\\n  );\\n\\n  @POST(\'/api/commander/v1/tasks/getAll\')\\n  Future<GetAllTasksResponseDto> getTasks(@Body() GetAllTasksRequest request);\\n\\n  @POST(\'/api/commander/v1/tasks/add\')\\n  Future<TaskDto> createTask(@Body() CreateTaskDto request);\\n}\\n\\nconst anonymous = Extra({\'isAnonymous\': true});\\n```\\n\\n### provider\\n\\n> A wrapper around InheritedWidget to make them easier to use and more reusable.\\n\\nFinally, [provider](https://pub.dev/packages/provider) library which we use mainly for DI in a Flutter way:\\n\\n```dart\\n@override\\nWidget build(_) => MultiProvider(\\n  providers: [\\n    Provider<AnalyticsManager>.value(value: _analyticsManager),\\n    Provider<CurrentRouteObserver>.value(value: _routeObserver),\\n    Provider<LocalisationManager>.value(value: _localisationManager),\\n    Provider<AuthenticationManager>.value(value: _authenticationManager),\\n    Provider<RestClient>.value(value: _restClient),\\n    Provider<ImageUrlProvider>.value(value: _imageUrlProvider),\\n  ],\\n  child: App(),\\n);\\n\\n\\n_analyticsManager ??= Provider.of(context)\\n  ..setCurrentScreen(_getScreenPath(_currentPage));\\n```\\n\\n## Teamwork\\n\\nLet\u2019s talk about teamwork now, because, if you have more than one developer, you already have a team, and you have to define some best practices and find some compromise on how to structure your code, etc.\\n\\n### Formatting\\n\\nThis is the thing I really like about Dart: it comes with the dartfmt tool, so there\u2019s only one way to properly format your code. Actually, the official formatting rules sound like \u201cwhatever dartfmt produces as output.\u201d That eliminates all the arguing about how to format the code (except for where to put trailing commas, maybe). We even set up our CI machine in a way that it fails the build if the code is not properly formatted. The only thing I don\u2019t like about dartfmt is that it uses an 80-character line limit.\\n\\n:::tip Linus Torvalds\\n\\n\u2026for chrissake, don\u2019t try to make 80 columns some immovable standard.\\n\\n:::\\n\\nLuckily, `dartfmt` allows you to override this setting. While you cannot tweak the lint rule (either you enable `lines_longer_than_80_chars` rule or disable it at all), you can at least run `dartfmt` command with `-l` parameter. For our project, we decided to go with a 120 column limit.\\n\\n### Analyzer\\n\\nThe next step is a static analysis. Again, it\u2019s nice that Dart has a powerful and customizable static analyzer out of the box. My only concern about it is that by default it\u2019s too forgiving. My common recommendation is to make it as strict as possible.\\n\\nYou can go through all the rules provided by the analyzer and override levels of each rule: whether you want it to be an error, a warning, or you prefer to disable it completely.\\n\\nWe have a lot of rules defined as warnings\u200a\u2014\u200awhen you\u2019re in a development phase playing with your code, you obviously don\u2019t want to break the hot reload just because the code isn\u2019t properly formatted, or the variable isn\u2019t used. At the same time, CI machines are set up in a way that the build will fail with both errors and warnings.\\n\\nIf you don\u2019t want to go through all the rules and define your own levels, you can use one of these community packages:\\n\\n- [pedantic\u200a](https://pub.dev/packages/pedantic) \u2014 \u200amaintained by Google;\\n- [effective_dart](https://pub.dev/packages/effective_dart) \u200a\u2014 \u200aofficial Effective Dart guidelines;\\n- [mews_pedantic\u200a](https://pub.dev/packages/mews_pedantic) \u2014 \u200amaintained by us.\\n\\n## CI/CD\\n\\nNow it\u2019s time to talk about CI/CD in more detail. This is the point where I should say: \u201cDon\u2019t follow our way.\u201d We use Azure Pipelines to be aligned with the rest of the company. While it\u2019s really powerful and customizable, it\u2019s not specialized for Flutter or even mobile CI/CD flows. For example, if you\u2019re using Microsoft-hosted agents, they don\u2019t have Flutter pre-installed\u200a\u2014\u200athis means that every build needs to start with installing Flutter. Also, build steps are defined using some low-level stuff (like bash scripts).\\n\\nIf you\u2019re looking for some Flutter-centric CI/CD service, there\u2019s a number of alternatives:\\n\\n- [Bitrise](https://www.bitrise.io/). The free plan includes 1 concurrency, 30 mins/build timeout, and 200 builds a month.\\n- [Codemagic](https://codemagic.io/). You get 500 build minutes, macOS standard VM, and 120 min build timeout for free.\\n- [Appcircle](https://appcircle.io/). It also provides a free plan with 1 concurrent build, 25 minutes max build time per build, 5 minutes/month device previews, and 100 tester emails/month.\\n\\nI\u2019m not sure about Appcircle, but Bitrise and Codemagic even have seamless integration with the AWS device farm. That means that you can easily run your UI tests on the whole fleet of real devices provided by AWS. It\u2019s not for free, of course, you have to pay Amazon for that, but having a simple-to-set-up-integration is a nice option.\\n\\nI\u2019ve used Codemagic for one of my side projects, and it\u2019s really very easy to set up. If you have a common Flutter CI workflow, it\u2019s a nice service to try without worrying about maintenance.\\n\\nYou can also use GitHub actions, but it\u2019s a common-purpose CI/CD service as well, so setup can be more complex. It has a free plan with 500 MB storage and 2,000 minutes a month, but there\u2019s one important notice there: if you\u2019re using a macOS agent (and you have to, at least for building an iOS version), the time spent by the machine is multiplied by 10! So, if you\u2019re only using macOS agents you have 200 free minutes, not 2,000.\\n\\n## Pitfalls\\n\\nNow, let\u2019s talk about some pitfalls or, at least, things you need to pay attention to while developing your Flutter application.\\n\\nFor me, a major one is **error handling**. If you have an exception in Dart code, your application won\u2019t crash. For me, as a mainly native developer, this was quite confusing at first. It\u2019s crucial to use a proper error reporting tool when you\u2019re publishing your application. We use Sentry (with sentry library) for that.\\n\\nAnother thing to keep in mind: Flutter is a cross-platform framework with all the **limitations** that come from that. Also, Flutter is relatively new. One problem we\u2019ve encountered was the lack of password manager integrations (this issue should be resolved now). From time-to-time issues like this will arise: as a cross-platform framework, Flutter cannot be on the same pace with native frameworks. Once new functionality is introduced in new versions of native frameworks, some time is required for Flutter to fully adopt it.\\n\\nText ellipsizing was another unpleasant issue\u200a\u2014\u200athe behavior is really not user-friendly and there\u2019s no easy solution to it so far as it requires some rendering engine integration refactoring.\\n\\nI\u2019ve already mentioned the next issue, the infamous \u201cbillion-dollar mistake.\u201d According to our error reporting tools, the majority of errors were caused by **`NoSuchMethodError`** (the analog of `NullPointerException` in Java). Yes, hopefully, it will be obsolete soon, when NNBD types are adopted by the framework itself and all the libraries, but for now, we have what we have.\\n\\nAnd one more point I\u2019d like to mention here is what I call **magic**. And unfortunately, it\u2019s not some kind of good magic. From time to time, you will get some weird error messages (it happens more often with iOS builds), and you will have to do some voodoo steps to resolve them: restart your IDE, turn off and on your PC, run `flutter clean`, repeat these steps in some different order. Sometimes it helps and the errors are gone. But sometimes it doesn\u2019t, and, when it doesn\u2019t, you\u2019re lucky if you have native developers on your team, otherwise these build errors (especially the ones that Xcode produces) can be really frustrating.\\n\\n## Was Flutter a good choice?\\n\\nSo now it\u2019s time to answer that question. Did it make sense to re-write the app from scratch in Flutter? Was I right back then, convincing all the stakeholders to try new technology? Would I make this choice again?\\n\\nDespite all the limitations I\u2019ve talked about, some concerns, and maybe an unclear future (yeah, Google is famous for killing projects), I think it was a good choice. Flutter perfectly suits us. One of the major reasons, as I mentioned before, is our custom design system. With Flutter we need to implement it only once, and it works the same way for both platforms. It really boosts up development. Flutter has nice tools for implementing heavily customized UI, so it\u2019s easier than doing it even for a single platform natively (especially, in Android where the native UI layer is a total mess).\\n\\nIn terms of a team: currently we have 4 mobile developers (including me). We all come mainly from native Android backgrounds and the transition to Flutter was really smooth. In most cases, everything works the same way on both platforms, so the speed of development has increased and versions for both iOS and Android are published practically at the same time.\\n\\nHonestly speaking, Dart is not my favorite language. I [really miss](../2020-07-20-dart-vs-kotlin.md) some of Kotlin\u2019s features, but with code generation and with all the libraries I\u2019ve mentioned, even the business logic can be developed in a straightforward and maintainable way. I\u2019m happy that we only need to implement this logic once, and especially that we only need to develop UI once, otherwise, we would need at least 1.5 times more developers and all the drawbacks that come from having a larger team.\\n\\n---\\n\\nThat\u2019s it. If you have any questions feel free to contact me on [Twitter](https://twitter.com/ookami_kb) or [LinkedIn](https://www.linkedin.com/in/ookamikb/)."},{"id":"/2020/07/20/dart-vs-kotlin","metadata":{"permalink":"/blog/2020/07/20/dart-vs-kotlin","source":"@site/blog/2020-07-20-dart-vs-kotlin.md","title":"13 reasons why Dart is worse than Kotlin","description":"As you probably know from my previous articles and talks, I love Flutter. I really think that this is one of the best options to develop a high-quality multi-platform app. It\u2019s so easy to create custom views with complex animations \u2013 especially, comparing with the native Android View layer. The way it promotes composition over inheritance and immutable widgets, or encourages you to make the view a pure function of a state makes me happy.","date":"2020-07-20T00:00:00.000Z","formattedDate":"July 20, 2020","tags":[],"readingTime":9.115,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"13 reasons why Dart is worse than Kotlin"},"prevItem":{"title":"1 year in production with Flutter: lessons learned","permalink":"/blog/2021/02/05/one-year-flutter"},"nextItem":{"title":"UI tests in Flutter with Azure Pipelines","permalink":"/blog/2020/06/15/ci-azure"}},"content":"As you probably know from my previous articles and talks, I love Flutter. I really think that this is one of the best options to develop a high-quality multi-platform app. It\u2019s so easy to create custom views with complex animations \u2013 especially, comparing with the native Android View layer. The way it promotes composition over inheritance and immutable widgets, or encourages you to make the view a pure function of a state makes me happy.\\n\\nUnfortunately, I cannot say the same about Dart, the language that Flutter is written in, and that you\u2019re supposed to use to develop Flutter apps. Why? There are at least 13 reasons for that.\\n\\n\x3c!--truncate--\x3e\\n\\n## #1 No null safety\\n\\nYes, I know that this will hopefully become obsolete in the (near?) future, but for now, we have to deal with it. Anyway, for the language with the first release in the year 2018 (I mean Dart 2 of course), it\u2019s a shame not to have null safety from the very beginning.\\n\\n## #2 No data classes\\n\\nData classes are classes whose main purpose is to hold data [sic!]. They are highly useful as Value Object from DDD, and also, with proper language support, it\u2019s very convenient to use immutable data classes for functional programming style.\\n\\nBy proper support I mean something like this in Kotlin:\\n\\n```kotlin\\ndata class User(val name: String, val age: Int)\\n\\nval user1 = User(name = \\"John\\", age = 30)\\nval user2 = user1.copy(age = 20)\\n```\\n\\nEven without implementing copy (and equality) functionality the Dart way is more verbose:\\n\\n```dart\\nclass User {\\n  User({this.name, this.age});\\n\\n  final String name;\\n  final int age;\\n}\\n\\nfinal user1 = User(name: \'John\', age: 30);\\nfinal user2 = User(name: user1.name, age: 20);\\n```\\n\\nAnd it still lacks some features that are provided by Kotlin. E.g. in Kotlin you can pass these parameters as positional or as named (and even mix them: `val user = User(\'John\', age = 30))`, while in Dart you\u2019re _either_ making them positional _or_ named \u2013 but in that case they will be optional and default to `null`.\\n\\nThere is a nice package `built_value` that solves the problem with deep equality check and generating copy method, and we use it a lot in our codebase, but it\u2019s not an ideal solution.\\n\\nFirst, it still requires some boilerplate code compared to Kotlin version:\\n\\n```dart\\nabstract class User implements Built<User, UserBuilder> {\\n  User._();\\n\\n  factory User([void Function(UserBuilder) updates]) = _$User;\\n\\n  String get name;\\n\\n  int get age;\\n}\\n\\nfinal user1 = User((b) => b\\n  ..name = \'John\'\\n  ..age = 30);\\n\\nfinal user2 = user1.rebuild((b) => b..age = 20);\\n```\\n\\nSecond, it lacks some features, e.g. you cannot easily enforce required parameters during compile time.\\n\\nWill we have proper support for data classes in Dart? [Probably](https://github.com/dart-lang/language/issues/314), but not anytime soon.\\n\\n## #3 No sealed classes\\n\\nAnother feature in Kotlin language that we use a lot: sealed classes, aka co-product types, aka sum types, aka \\"enums on steroids\\"\u2026 They are extremely useful if you want to make your types sound.\\n\\nEssentially, they represent a restricted class hierarchy: a value can have one of the types from a limited set. Unlike enum, this value is not a singleton, but a proper class that can have multiple instances with different states.\\n\\nWhy is it useful? Let\u2019s see at probably the most common example:\\n\\n```kotlin\\nsealed class Result<out VALUE> {\\n    data class Error(val error: Throwable) : Result<Nothing>()\\n    data class Success<VALUE>(val value: VALUE) : Result<VALUE>()\\n}\\n\\nfun process(result: Result<String>): String = when (result) {\\n    is Result.Error -> \\"Error: ${result.error}\\"\\n    is Result.Success -> \\"Success: ${result.value}\\"\\n}\\n```\\n\\nThis is a nice alternative to exceptions: instead of catching exceptions (or sometimes _forgetting_ to do that) you\u2019re forced to deal with the result, which can be _either_ error _or_ valid result (the corresponding type in many functional languages and libraries is called exactly like this: Either). Not only you will have to take a possible error into account, but Kotlin will provide some nice features as well. Do you see casting inside when branches? You don\u2019t, because no manual casting is needed. Kotlin is smart enough to do _smart casting_ (pun intended) automatically.\\n\\nWhat about Dart? Well, maybe [someday](https://github.com/dart-lang/language/issues/349) we will get there.\\n\\n## #4 No custom values in enums\\n\\nSometimes (well, actually quite often) you need to associate some value with enum. In Kotlin it\u2019s as easy as this:\\n\\n```kotlin\\n\\nenum class Level(val value: Int) {\\n    INFO(10),\\n    WARNING(20),\\n    ERROR(30)\\n}\\n\\nval value = Level.WARNING.value\\n```\\n\\nDart? [Looks like no](https://github.com/dart-lang/sdk/issues/33698). You can use extensions to achieve similar behavior:\\n\\n```dart\\nenum Level { info, warning, level }\\n\\nextension LevelValue on Level {\\n  int get value {\\n    switch(this) {\\n      case Level.info:\\n        return 10;\\n      case Level.warning:\\n        return 20;\\n      case Level.level:\\n        return 30;\\n    }\\n  }\\n}\\n\\nfinal value = Level.warning.value;\\n```\\n\\nBut first, it\u2019s more verbose, and second, that leads us to the next point\u2026\\n\\n## #5 Compiler is not smart enough\\n\\nThe previous example gives me this warning:\\n\\n> This function has a return type of \u2018int\u2019, but doesn\u2019t end with a return statement. Try adding a return statement, or changing the return type to \u2018void\u2019.\\n\\nWhat? `Level` enum has only 3 possible options, and they are all listed. There\u2019s no way for this function to return void. I don\u2019t want to add default branch here (otherwise, if I add another option to the enum, I can forget to update the extension, and it will silently return an incorrect result). I don\u2019t want to suppress the warning for the same reason. I want an error here, if and only if I didn\u2019t match all the possible options: that\u2019s what Kotlin does.\\n\\n## #6 No singletons\\n\\nHow can you define singleton in Kotlin? Like this: `object Singleton`. Anything similar in Dart? I guess this is the simplest way:\\n\\n```dart\\nclass Singleton {\\n  const Singleton._();\\n\\n  factory Singleton() => const Singleton._();\\n}\\n```\\n\\nNot a big deal, of course, but when you have to write this for every case it adds up. And we use them a lot in our Kotlin project e.g. as \\"constant\\" branches of sealed classes\u2026 Oh wait, we don\u2019t have sealed classes in Dart anyway.\\n\\n## #7 No switch/if/try expressions\\n\\nDo you remember the example from #3 No sealed classes? There\u2019s no return keyword, yet the function is returning a string. That\u2019s possible thanks to two things:\\n\\n- `fun getAnswer(): String = \\"42\\"` is equivalent to `fun getAnswer(): String { return \\"42\\" }`. In Dart you can do it as well with `String getAnswer() => \'42\';`.\\n- `when` is an expression: it means you can return the result of `when` and the compiler is smart enough to infer the correct type since every branch is returning `String`.\\n  And it\u2019s not only about concise syntax. With returning when compiler forces us to provide all the possible options (e.g. in case of enums or sealed class you must either specify all the options or use `else` branch).\\n\\n## #8 No protected keyword\\n\\nIn order to make method (or variable) private, you need to prefix its name with underscore. For making it protected you can use @protected annotation from the meta package. In the first case, you\u2019ll get a compilation error when trying to access it from outside of the allowed scope. In the second case, the best you can get is static analyzer feedback. Dart doesn\u2019t have language support for protected members so it\u2019s all or nothing. No compromises.\\n\\n## #9 No type aliases\\n\\nActually, type aliases in Dart exist, but only for function types. So you can write something like `typedef FormatDate = String Function(DateTime);`, but not `typedef Json = Map<String, dynamic>`. So, if you\u2019re working with json in your project, add this type to snippets, you will use it _often_.\\n\\nYeah, the sun [will shine](https://github.com/dart-lang/language/issues/65) on our side of the fence. Someday\u2026\\n\\n## #10 No concise syntax\\n\\nOk, you can say here: \\"You just got used to Kotlin syntax, and try to turn Dart into Kotlin\\". Well, that\u2019s true, I find Kotlin syntax pretty nice, but it isn\u2019t just about getting used to it. Things like lambda syntax are so much more concise in Kotlin, e.g. `listOf(1, 2, 3).map { it.toString() }` looks better than `[1,2,3].map((i) => i.toString());` even in such a simple example. When you have a multiline lambda (or chains of lambdas) Dart way becomes too complex for writing and reading. And this required semicolon\u2026 Come on, it\u2019s the year 2020!\\n\\n## #11 No nested classes/extensions\\n\\nWhat about having some way to nest classes? E.g. we would like to do something like this with messages:\\n\\n```dart\\nabstract class Translations {\\n  static abstract class Common {\\n    static String yes = \'Yes\';\\n    static String no = \'No\';\\n  }\\n\\n  static abstract class Auth {\\n    static String logIn = \'Log in\';\\n    static String logOut = \'Log out\';\\n  }\\n}\\n\\nfinal message = Translations.Auth.logIn;\\n```\\n\\nDart? Sure, we have a [feature request](https://github.com/dart-lang/language/issues/336) for that.\\n\\n## #12 No proper generic variance\\n\\nIn Dart type variables in generic classes are covariant. Why is it bad? Because it\u2019s an easy way to shoot yourself in the foot. Let\u2019s take a look at this example:\\n\\n```dart\\nclass Animal {}\\n\\nclass Dog extends Animal {}\\n\\nclass Cat extends Animal {}\\n\\nvoid main() {\\n  List<Animal> animals = [Dog()];\\n  List<Cat> cats = [];\\n  cats.add(animals.first);\\n}\\n```\\n\\nThis will compile without any problems, but in the runtime, you will receive an error:\\n\\n> TypeError: Instance of \'Dog\': type \'Dog\' is not a subtype of type \'Cat\'.\\n\\nYou can try to do the same trick in Kotlin:\\n\\n```kotlin\\nabstract class Animal\\nclass Dog : Animal()\\nclass Cat : Animal()\\n\\nfun main() {\\n    val animals = listOf<Animal>(Dog())\\n    val cats = mutableListOf<Cat>()\\n    cats.add(animals.first())\\n}\\n```\\n\\nBut it won\u2019t even compile. It will give you an error:\\n\\n> Type inference failed. Expected type mismatch: inferred type is Animal but Cat was expected.\\n\\n[Here](https://kotlinlang.org/docs/reference/generics.html#variance) you can read about generics variance in Kotlin, and [this](https://github.com/dart-lang/language/issues/753) is an ongoing discussion about variance in Dart.\\n\\n## #13 No final classes\\n\\nEffective Java says: \\"Design and document for inheritance or else prohibit it\\". So in Java it\u2019s a good practice to use final classes as often as possible. Kotlin takes one step further and makes classes final by default. What about Dart? Well, there\u2019s no way at all to make a class final. You cannot prohibit inheritance. Freedom for everyone!\\n\\n---\\n\\nSo, are there only negative things I can say about Dart? Well, there are actually some points that I really like:\\n\\n- Classes are interfaces. Each class implicitly defines an interface that consists of its public members. So you can just implement any class and provide overridden functionality: nice thing to use in tests for mocking implementation.\\n- No type erasure. Unlike Kotlin, `List<String>` is still `List<String>` in runtime.\\n- Last but definitely not least: language is evolving. We\u2019ve got extensions, probably we will get null safety soon enough. Hopefully, other things from my list will become obsolete someday and Dart will eventually become ~~Kotlin~~ a modern and safe language."},{"id":"/2020/06/15/ci-azure","metadata":{"permalink":"/blog/2020/06/15/ci-azure","source":"@site/blog/2020-06-15-ci-azure/index.md","title":"UI tests in Flutter with Azure Pipelines","description":"Continuous integration (CI) is the practice of merging all developers\u2019 working copies to shared mainline several times a day.","date":"2020-06-15T00:00:00.000Z","formattedDate":"June 15, 2020","tags":[],"readingTime":6.755,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"UI tests in Flutter with Azure Pipelines"},"prevItem":{"title":"13 reasons why Dart is worse than Kotlin","permalink":"/blog/2020/07/20/dart-vs-kotlin"},"nextItem":{"title":"Intro to Flutter: a practical guide to cross-platform development","permalink":"/blog/2020/05/19/intro-to-flutter"}},"content":"> Continuous integration (CI) is the practice of merging all developers\u2019 working copies to shared mainline several times a day.\\n\\nOne of the most important aspects of CI is keeping the mainline healthy. That\u2019s why it\u2019s crucial to have proper tests, both unit and UI, that can run against any PR and/or commit to the mainline. At the same time, these tests should also be fast. It\u2019s usually not a problem with unit tests, but UI tests, especially if you want to run them on multiple devices, can take a rather long time.\\n\\nAs a balance between speed and reliability, for PRs into the mainline, we use smoke UI tests that only prove the main functionality is working. Proper UI testing with manual QA verification is done only when we\u2019re preparing a new release candidate.\\n\\nIn this article, I will show you how we\u2019ve set up Azure Pipelines for running automated UI smoke tests for a Flutter app.\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\nUnfortunately, Azure Pipelines don\u2019t provide agents with Flutter pre-installed, and, as we use Microsoft-hosted agents, we need to perform a bunch of actions on each job run (you can avoid these steps by setting up and using [self-hosted agents](https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/v2-osx?view=azure-devops)). These actions are simpler to invoke as bash scripts, so almost every step in pipeline configuration just delegates the work to some script.\\n\\nWe keep these scripts in a separate file:\\n\\n```shell title=\\"pipelines/scripts.sh\\"\\n#!/bin/sh\\n\\nset -e\\nexport PATH=$BUILD_SOURCESDIRECTORY/flutter/bin:$BUILD_SOURCESDIRECTORY/flutter/bin/cache/dart-sdk/bin:$PATH\\n\\n# All scripts will be placed here\\n\\n\\"$@\\"\\n```\\n\\nWe use the `set -e` option, so that each failed command will fail the job, then add the Flutter installation directory to `$PATH`.\\n\\n`\\"$@\\"` allows us to use functions defined in this file in other scripts \u2014 if we have a function `install_flutter()` defined in this file, we can call it later with `sh scripts.sh install_flutter`.\\n\\n## Install Flutter\\n\\nFirst, we need to install Flutter:\\n\\n```shell\\ninstall_flutter() {\\n  git clone -b stable https://github.com/flutter/flutter.git\\n\\n  flutter precache\\n  yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses\\n  flutter doctor\\n}\\n```\\n\\nHere we download a stable branch of Flutter, install it, accept all licenses, and print doctor output (you can skip this, but it can be useful to check when dealing with certain problems).\\n\\n### Install AVD\\n\\nNext, install and launch AVD:\\n\\n```shell\\nlaunch_avd() {\\n  echo \\"Installing SDK\\"\\n  $ANDROID_HOME/tools/bin/sdkmanager --install \'system-images;android-29;default;x86\'\\n\\n  echo \\"Creating emulator\\"\\n  $ANDROID_HOME/tools/bin/avdmanager create avd -n \\"pixel\\" --device \\"pixel\\" -k \\"system-images;android-29;default;x86\\"\\n\\n  echo \\"Starting emulator\\"\\n  $ANDROID_HOME/emulator/emulator -avd \\"pixel\\" -no-snapshot &\\n  $ANDROID_HOME/platform-tools/adb wait-for-device shell \'while [[ -z $(getprop sys.boot_completed | tr -d \'\\\\r\') ]]; do sleep 1; done; input keyevent 82\'\\n\\n  echo \\"Emulator started\\"\\n}\\n```\\n\\nWe use Android SDK 29 without Google APIs. You can use a different SDK, just replace `\'system-images;android-29;default;x86\'` with the other option. You can get a full list of options by running `sdkmanager --list | grep system-images | sort | uniq`.\\n\\n## Screen recording\\n\\nIn Google Play automated tests there\u2019s a cool feature: it records the screen while running tests, so you can download and check it later. It\u2019s a good idea to have it in our tests as well. For that, we can use the built-in `screenrecord` utility. Unfortunately, it has a hard-coded max length of three minutes. So we need a hack to fix this:\\n\\n```shell\\nstart_recording() {\\n  # Each video is 3 minutes max, so 5 videos will give us up to 15 minutes,\\n  # should be enough for test\\n  $ANDROID_HOME/platform-tools/adb shell mkdir /sdcard/video\\n  $ANDROID_HOME/platform-tools/adb shell screenrecord /sdcard/video/1.mp4\\n  $ANDROID_HOME/platform-tools/adb shell screenrecord /sdcard/video/2.mp4\\n  $ANDROID_HOME/platform-tools/adb shell screenrecord /sdcard/video/3.mp4\\n  $ANDROID_HOME/platform-tools/adb shell screenrecord /sdcard/video/4.mp4\\n  $ANDROID_HOME/platform-tools/adb shell screenrecord /sdcard/video/5.mp4\\n}\\n```\\n\\n:::info\\n\\nNo worries, this doesn\u2019t mean that all five records will be created with each job \u2014 we\u2019ll stop recording once tests are done.\\n\\n:::\\n\\n## Run tests\\n\\nNow we\u2019re ready to create a script that will build and run tests:\\n\\n```shell\\nflutter_test() {\\n  flutter packages get\\n  flutter packages pub run build_runner build\\n\\n  flutter test\\n\\n  launch_avd\\n  start_recording &\\n  flutter drive --target=test_driver/app.dart\\n  pkill -f screenrecord || true\\n}\\n```\\n\\n:::caution\\n\\nIf you don\u2019t have any code generation in your project, remove the `build_runner` action.\\n\\n:::\\n\\nThis script runs unit tests with `flutter test` and UI tests with `flutter drive --target=test_driver/app.dart`. As you can see here, before running UI tests we launch AVD and start video recording in the background. And after the test is done, we kill the running `screenrecord` command. Thanks to the `set -e` option defined in the script, it will also end the `start_recording` command.\\n\\n## Download record\\n\\nWe also need a helper script for getting the record out of the device:\\n\\n```shell\\npull_video() {\\n  $ANDROID_HOME/platform-tools/adb pull /sdcard/video $BUILD_SOURCESDIRECTORY/screenshots\\n}\\n```\\n\\n:::tip\\n\\nIf you provide a directory as the pull argument it will download all files in that directory.\\n\\n:::\\n\\n## Pipeline configuration\\n\\nNow let\u2019s create a pipeline configuration file putting everything together:\\n\\n```yaml\\ntrigger: none\\npr:\\n  - master\\n\\njobs:\\n  - job: Test\\n    timeoutInMinutes: 20\\n    pool:\\n      vmImage: \\"macOS-latest\\"\\n    steps:\\n      - script: pipelines/scripts.sh install_flutter\\n        displayName: Install Flutter\\n      - script: pipelines/scripts.sh flutter_test\\n        displayName: Test app\\n      - script: ../pipelines/scripts.sh pull_video\\n        displayName: Pull screen video record\\n        condition: always()\\n      - task: PublishBuildArtifacts@1\\n        displayName: Publish screenshots\\n        condition: always()\\n        inputs:\\n          pathtoPublish: \\"$(System.DefaultWorkingDirectory)/screenshots/\\"\\n          artifactName: screenshots\\n```\\n\\n:::tip\\n\\nIf you\u2019re not sure where to put this file, check [this tutorial](https://docs.microsoft.com/en-us/azure/devops/pipelines/create-first-pipeline).\\n\\n:::\\n\\n---\\n\\nWhat about the UI test itself? Let\u2019s create a basic smoke test that allows us to check the app state (you can find a detailed tutorial on the [official site](https://flutter.dev/docs/cookbook/testing/integration/introduction)).\\n\\nFirst, create a `test_driver` folder and put an `app.dart` file into it with the following content:\\n\\n```dart title=\\"test_driver/app.dart\\"\\nimport \'package:commander/main.dart\' as app;\\nimport \'package:flutter_driver/driver_extension.dart\';\\n\\nvoid main() {\\n  enableFlutterDriverExtension();\\n  app.main();\\n}\\n```\\n\\nThis file contains an \\"instrumented\\" version of the app. While it can have any name that makes sense, for the sake of simplicity we just call it `app.dart`.\\n\\nNow let\u2019s create a file that contains the test suite which drives the app and verifies that it works as expected. The name of the test file must correspond to the name of the file that contains the instrumented app, with `_test` added at the end. In our case, it means that name should be `app_test.dart`:\\n\\n```dart\\nimport \'dart:io\';\\n\\nimport \'package:flutter_driver/flutter_driver.dart\';\\nimport \'package:test/test.dart\';\\n\\nimport \'app_test_resources.dart\';\\n\\nvoid main() {\\n  group(\'Smoke tests\', () {\\n    FlutterDriver driver;\\n\\n    // Connect to the Flutter driver before running any tests.\\n    setUpAll(() async {\\n      driver = await FlutterDriver.connect();\\n      await Directory(\'screenshots\').create();\\n    });\\n\\n    // Close the connection to the driver after the tests have completed.\\n    tearDownAll(() async {\\n      if (driver != null) {\\n        await driver.close();\\n      }\\n    });\\n\\n    test(\'Commander Walkthrough\', () async {\\n      await loginToCommander(driver);\\n      await goToMessages(driver);\\n      await goToTasks(driver);\\n      await goToProfile(driver);\\n      await goToRooms(driver);\\n    }, timeout: const Timeout(Duration(minutes: 1)));\\n  });\\n}\\n```\\n\\nAs you can see, in the `setUpAll` function we create screenshots directory \u2014 we will put screenshots there if needed (and screen recording as well).\\n\\nAll the helper functions, such as `loginToCommander` or `goToRooms` are defined in the `app_test_resources.dart` file, e.g.:\\n\\n```dart\\nFuture<void> goToRooms(FlutterDriver driver) async {\\n  await driver.tap(find.byValueKey(\'rooms\'));\\n  await driver.assertElementPresent(\'sliverList\');\\n  await driver.assertElementPresent(\'floorHeader\');\\n}\\n```\\n\\nWe also have a couple of extensions for the driver:\\n\\n```dart\\nimport \'dart:io\';\\n\\nimport \'package:flutter_driver/flutter_driver.dart\';\\n\\nextension DriverExt on FlutterDriver {\\n  Future<void> saveScreenshot() async {\\n    final path = \'screenshots/\'\\n        \'${DateTime.now().toIso8601String().replaceAll(\':\', \'-\')}\'\\n        \'.png\';\\n    final List<int> pixels = await screenshot();\\n    final file = File(path);\\n    await file.writeAsBytes(pixels);\\n  }\\n\\n  Future<void> assertElementPresent(\\n    String valueKey, {\\n    Duration timeout = const Duration(seconds: 5),\\n  }) async {\\n    try {\\n      return await waitFor(find.byValueKey(valueKey), timeout: timeout);\\n      // ignore: avoid_catching_errors\\n    } on DriverError catch (_) {\\n      await saveScreenshot();\\n      rethrow;\\n    }\\n  }\\n}\\n```\\n\\n:::caution\\n\\nWe replace \u201c:\u201d with \u201c-\u201d in the file name because Azure Pipelines fails to publish a file to artifacts if it contains \u201c:\u201d in the name.\\n\\n:::\\n\\n`saveScreenshot` is called automatically when the driver fails to find an element. In that case, we want to be able to look at a screenshot and figure out what the problem is. It can also be called manually if we want to screenshot the app at some checkpoint.\\n\\nHere\u2019s the downloaded video with screen recording:\\n\\n![](demo.gif)\\n\\nThat\u2019s it for running our UI tests on an Android emulator. Although, despite the cross-platform nature of Flutter, it could be useful to run these smoke tests on an iOS simulator as well, right? But that\u2019s a topic for another article. Stay tuned ;)"},{"id":"/2020/05/19/intro-to-flutter","metadata":{"permalink":"/blog/2020/05/19/intro-to-flutter","source":"@site/blog/2020-05-19-intro-to-flutter/index.md","title":"Intro to Flutter: a practical guide to cross-platform development","description":"Today I would like to share with you our experience with running our Flutter application in production for about 6 months. We will talk about how to organize your code, which libraries to use and other tips and tricks we\u2019ve learned so far.","date":"2020-05-19T00:00:00.000Z","formattedDate":"May 19, 2020","tags":[],"readingTime":25.745,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Intro to Flutter: a practical guide to cross-platform development"},"prevItem":{"title":"UI tests in Flutter with Azure Pipelines","permalink":"/blog/2020/06/15/ci-azure"},"nextItem":{"title":"Flutter for Web: is it a killer of React?","permalink":"/blog/2020/01/29/flutter-web"}},"content":"Today I would like to share with you our experience with running our Flutter application in production for about 6 months. We will talk about how to organize your code, which libraries to use and other tips and tricks we\u2019ve learned so far.\\n\\nThis is actually a text version of my [online presentation](https://youtu.be/P1SLlW-kIp4) \u2013 for those who (like me) prefer reading to watching and listening.\\n\\n\x3c!--truncate--\x3e\\n\\n## Cross-platform development: are we there yet?\\n\\nFirst of all, let\u2019s talk about [cross-platform development](https://developers.mews.com/multiplatform-apps-are-we-there-yet/) in general. Why are there so many cross-platform frameworks, why does each framework promise to kill native development, and why, despite all of that, is native development still alive?\\n\\n### Cross-platform development: advantages\\n\\nLet\u2019s define which advantages we can get when doing cross-platform development.\\n\\nFirst of all, it\u2019s of course **reusing business logic**. We programmers are lazy folk, so if something can be done once, we would like to have it done once. Especially when it comes to business logic \u2013 the core of our application, something that should be tested thoroughly and at the same time something that can be changed constantly over time.\\n\\nSecond, **reusing UI**. Now, this can be a controversial moment and actually some developers and designers can argue that UI should be as strictly adhering to platform guidelines as possible. At the same time it\u2019s pretty common lately to have a unified \u201cbranded\u201d UI that is the same across all platforms, and platforms themselves are eliminating differences in both UI and UX.\\n\\n**Faster development cycle**. Obviously, if we need to implement a feature only once, it\u2019s faster than to implement it twice. Of course, if we\u2019re speaking about a full development cycle starting from product discovery through design and up to coding, testing and deployment \u2013 we won\u2019t get 2x speed up, as there still are some steps that cannot be shared; but there will be a gain in time anyway.\\n\\n**Smaller teams**. Maybe, as developers, we\u2019re not interested in having less demand for our services, but tech leads and other managers will definitely consider it as an advantage. And the benefit here is growing at a rapid pace. Managing a team of 3 people is more than 2 times simpler than managing a team of 6 people: with scaling team down intercommunication problems are scaled down faster.\\n\\nAnd the last, but not least point: **synchronized releases**. As you develop a new feature only once, there is a high chance that it can be tested and deployed at almost the same time: almost, because e.g. Apple pre-moderation can take up to several days. And it makes life easier for the marketing team, product managers, and the support team since users have a higher chance of getting the same latest version of your app at the same period of time.\\n\\nSo, is life that beautiful for cross-platform developers? Well, obviously not.\\n\\n### Cross-platform development: drawbacks\\n\\nLet\u2019s now take a look at drawbacks we can have with a cross-platform approach. First, no matter how good a cross-platform framework can be, we still will have only a **subset of features** available to native developers. If we want unified experience, then we obviously lose features that are unique to each platform.\\n\\n**Non-native UX**. Though it can be solved in some frameworks with different methods, if we start to strictly follow platform UX guidelines we can lose one of the advantages \u2013 reusing UI/UX across platforms.\\n\\nOne of the most important problems with cross-platform frameworks \u2013 at least with some of them \u2013 is a **performance penalty**. If there will be another abstraction layer, there will be another performance degradation. Or not? Let\u2019s talk about it in a moment.\\n\\nAnd the last moment, which is maybe not a drawback, but just a point to keep in mind. Some managers think that 1 cross-platform developer = 1 iOS developer + 1 Android developer. That\u2019s not true, in my opinion. No matter how good a cross-platform framework is, sooner or later there will be some problem in interop with some platform. And at that moment it\u2019s better to have a developer who has a **native experience** with this platform.\\n\\nAnyway, it\'s a never ending discussion \u2013 whether cross-platform development is good or bad. The right answer sounds familiar to all architects: it depends. But for now I just assume that you\u2019re at least interested in cross-platform development, so let\u2019s continue talking about it.\\n\\n## Approaches: there are 14 competing standards\u2026\\n\\nI would like to speak about different \u201ccategories\u201d of cross-platform framework that we can find. These are very loose categories divided by the way they deal with UI.\\n\\n### Approaches: hybrid apps\\n\\nMy first category would be frameworks for creating hybrid apps. By that we usually mean a WebView with a common HTML/CSS/JS app that is placed inside some native wrapper which also provides an access to native platform features, e.g. camera or geolocation. These are such frameworks as PhoneGap, Ionic or Onsen UI.\\n\\nAnd since it\u2019s just an HTML application inside, it\u2019s very **easy for web developers** to dive into mobile applications development, or to reuse your web application, or create some prototype.\\n\\nAt the same time the main disadvantages are really **bad performance** \u2013 due to a huge number of abstraction layers \u2013 and **non-native UI** \u2013 no matter how hard you try you will hardly make users believe that this is a native app.\\n\\n### Approaches: native UI\\n\\nNext category, which for convenience I\u2019ve called \u201cnative UI\u201d, is presented by such frameworks as Xamarin, React Native or Titanium. Their common feature is that they seamlessly provide you the way to use **native UI** components in your cross-platform application.\\n\\nWhat does it look like? You develop an application in your favorite language \u2013 JS/TypeScript/C#. Your business logic can of course be totally shared, and the UI is translated into native UI of each platform.\\n\\nThe disadvantage of this approach is again a **performance impact**. So not as big as in the previous category, it can still be a problem. For example, Xamarin application requires the whole .Net mono runtime to launch your application. For some old and cheap Android devices it can be a hard burden. React Native also creates a bridge to translate your javascript code into native calls and back \u2013 which can be quite expensive, especially when we speak about animations.\\n\\n### Approaches: share business logic\\n\\nThere is another approach, which was taken e.g. by Kotlin Multiplatform framework: it allows you to share your BL written in Kotlin between your Android and iOS app. It will be compiled for JVM runtime for Android and into native code for iOS app, which we can call from Swift code thanks to interop feature without any significant performance impact. Both an advantage and drawback (depending on the way you look at it) of this approach is that you have to implement UI for each platform separately, using native methods.\\n\\n### Approaches: Flutter\\n\\nAnd now let\u2019s talk about the approach that was chosen by the main hero of this article. Strictly speaking this approach is not unique: there is at least another one framework I know with the similar way: it\u2019s Kivy \u2013 cross-platform framework in Python.\\n\\nThe main idea is that the framework does all the UI rendering on its side (slightly similar to our first category), but using a high performance rendering engine under the hood. In case of Flutter it\u2019s Skia: an open-source 2D graphics library that serves as the graphics engine for Google Chrome and Chrome OS, Android itself and some other products.\\n\\nSo, what do we gain when using Flutter? We can **share code** for our business logic \u2013 well, that\u2019s obvious. Next, we can **share UI** \u2013 as the rendering is done by the framework, we have a number of options here: to have unified UI across platforms, to use natively looking components on each platform or even some crazy combination, such as Cupertino components on Android and Material components on iOS (yeah, it can sound weird, but we actually use this mix in our UI library \u2013 some of our components are based on Material ones, while another on Cupertino).\\n\\nYes, it\'s worth noting here that these components are not native ones \u2013 they only look like native components, but they were implemented from scratch in the default library.\\n\\nWhat else? As I\u2019ve already mentioned thanks to this graphics engine we can get a very **high performance** of 60 FPS even for complex animations.\\n\\nAnd because all the components are implemented from scratch, we get a really nice UI system built on **composition over inheritance** and **functional composition** principles. As for me this UI system is really great, compared to iOS and especially the Android system of widgets and views.\\n\\nAnd the last point, and the most controversial one. Flutter is using **Dart** language, and so will you. I know some people who hate this language, I didn\u2019t have any good feelings about it as well at the beginning, but now I even start to like some of its features. Well, maybe it\u2019s just a Stockholm syndrome.\\n\\nAnyway, let\u2019s now talk about Flutter in Mews.\\n\\n## Flutter in Mews: love story\u2026\\n\\nIn Mews we love Flutter. And I\u2019m not only speaking for myself, honestly. We use it for developing a light mobile version of our PMS: the one that I\u2019ll be talking about in a moment.\\n\\nAnother Flutter project that I\u2019ve already mentioned is the UI library. We have big plans about open-sourcing it in the near future, so stay tuned.\\n\\nWe are also using Flutter for different side projects: both to play with Flutter and to try some approaches that can be incorporated into our main app.\\n\\nAnd we are actively participating and organizing different meetups and workshops about Flutter, and writing [blog posts](https://developers.mews.com/flutter-how-to-draw-text-along-arc/).\\n\\nSo let\u2019s now talk about our main Flutter application.\\n\\n### Flutter in Mews: Commander\\n\\n![](commander.png)\\n\\nThis app is a light version of our PMS that is for now mainly used by housekeepers and maintenance staff. From the developer point of view it implements the common set of features of business applications: calling APIs and displaying dynamic forms, receiving real-time updates via push notifications and websockets, managing localisations and so on.\\n\\nSpeaking of the team, we can say it was built by 1.5 developers. Originally it was only me, then we\u2019ve got another developer, but at the same time I was doing other tasks and didn\u2019t take an active part in development, mainly in code review.\\n\\nThe development started in April 2019 \u2013 we had an old version of this app written natively in Java for Android and Swift for iOS \u2013 but it was not actively developed and the Android version required some major refactoring, so we decided to rewrite it from scratch in Flutter.\\n\\nThe first public release was in September 2019 and it\u2019s still under active development \u2013 we\u2019re releasing a new version of the app roughly each 2-weeks (once per sprint).\\n\\nCurrently, we have only about 3K active users monthly, but we have a lot of plans to improve it, so we\u2019re steadily growing our user base.\\n\\nSo, what have we learned so far, having this app in production for about half a year? First, let\u2019s talk about the most useful libraries we\u2019re using there and in pretty much every other Flutter project, either big or small.\\n\\n## Libraries to use without going into dependency hell\u2026\\n\\n### Libraries to use: RX\\n\\n```yaml\\ndependencies:\\n  rxdart: ^0.24.1\\n```\\n\\nIf there is a family of libraries that doesn\u2019t need any introduction, then it should be Rx\\\\*. You probably know its implementations for different languages such as `RxJava` and `RxKotlin`, `RxSwift`, `RxJS`. Dart is not an exception here and we have a rxdart library. Though there are built-in streams in Dart and many concepts in Flutter are built around Streams, this library gives a lot of extensions and helper functions on top of these native streams and is highly recommended, especially if you were using other implementations before.\\n\\n### Libraries to use: immutability\\n\\n```yaml\\ndependencies:\\n  built_collection: ^4.2.2\\n  built_value: ^7.0.8\\n  built_value_generator: ^7.0.8\\n```\\n\\nFunctional programming and its immutable models as first class citizens are in trend now, and as Flutter incorporates many ideas of functional programming, it seems natural to go with immutable models \u2013 they really help a lot with tackling the complexity of your business logic.\\n\\nUnfortunately, unlike let\u2019s say Kotlin data classes, Dart doesn\u2019t have immutable models out of the box. Luckily, we have libraries that take off some overhead in creating immutable objects: `built_collection` and `built_value`.\\n\\nLet\u2019s see how we can use this library in our code:\\n\\n```dart\\nabstract class Floor implements Built<Floor, FloorBuilder> {\\n  factory Floor([Function(FloorBuilder b) updates]) =>\\n      _$Floor((b) => b..update(updates));\\n\\n  Floor._();\\n\\n  String get floorNumber;\\n\\n  BuiltList<Space> get spaces;\\n}\\n```\\n\\nAlthough it still seems to be rather verbose, some of this boilerplate can be managed by live templates, and we can focus on the main part of it:\\n\\n```dart\\nabstract class Floor {\\n  String get floorNumber;\\n\\n  BuiltList<Space> get spaces;\\n}\\n```\\n\\nWe\u2019re just defining an abstract class and a number of getters and the library will generate a code with all the functionality for let\u2019s say copying our object with partially changed properties. This is how it can be used:\\n\\n```dart\\nfinal newFloor = floor.rebuild((b) => b..floorNumber = \'1F\');\\n```\\n\\nIf you\u2019re familiar with Kotlin data classes, you can see some resemblance:\\n\\n```kotlin\\nval newFloor = floor.copy(floorNumber = \\"1F\\")\\n```\\n\\nActually this library gives us even more flexibility, because it implements a `Builder` pattern under the hood that supports all the nested structure if you have a hierarchy of immutable objects and collections.\\n\\n### Libraries to use: JSON\\n\\n```yaml\\ndependencies:\\n  json_annotation: ^3.0.1\\n  json_serializable: ^3.2.5\\n```\\n\\nAnother moment that will inevitably arise in any app that is dealing with API: serializing and deserializing JSON. Though the `built_value` library can handle this as well, we found it rather verbose for that. Also DTOs are even more \u201cimmutable\u201d \u2013 if you need to partially copy DTO objects, then you\u2019re probably doing something wrong.\\n\\nThat\u2019s why for DTOs we actually use a more lightweight library: `json_serialization`. It is also based on code generation principle and creates code for implementing `toJson` and `fromJson` methods. This is how your DTO can look like:\\n\\n```dart\\n@JsonSerializable()\\nclass MessageDto {\\n  MessageDto({this.id, this.createdUtc, this.text, this.creator});\\n\\n  final String id;\\n  final String createdUtc;\\n  final String text;\\n  final MessageAuthorDto creator;\\n\\n  static MessageDto fromJson(Map<String, dynamic> json) =>\\n      _$MessageDtoFromJson(json);\\n\\n  Map<String, dynamic> toJson() => _$MessageDtoToJson(this);\\n}\\n```\\n\\nAgain it can look a little verbose, but it can be solved with live templates as well. We can focus on the properties only, also in the majority of cases you need either `fromJson` or `toJson`, but not both of them.\\n\\nThis is how it can be used:\\n\\n```dart\\nfinal Response<Map<String, dynamic>> _result = await _dio.request(\u2026);\\nfinal value = MessageDto.fromJson(_result.data);\\n```\\n\\nActually, you won\u2019t probably write this code manually, as it can (and should) be generated by our next candidate.\\n\\n### Libraries to use: API\\n\\n```yaml\\ndependencies:\\n  dio: ^3.0.7\\n  retrofit: ^1.0.1+1\\n  retrofit_generator: ^1.0.1+1\\n```\\n\\nIf you have an experience in native Android development, I bet you know OkHttp and Retrofit libraries. Authors of these libraries know them for sure, and thanks to them we have `dio` and `retrofit` libraries for Dart, which are working in a very similar way.\\n\\nAll you need to do in order to implement an API client, is to define an interface like this:\\n\\n```dart\\n@RestApi()\\nabstract class RestClient {\\n  factory RestClient(Dio dio) = _RestClient;\\n\\n  @POST(\'/api/general/v1/users/signOut\')\\n  Future<EmptyResponse> signOut(@Body() SignOutRequest request);\\n}\\n\\n@JsonSerializable()\\nclass EmptyResponse { \u2026 }\\n\\n@JsonSerializable()\\nclass SignOutRequest { \u2026 }\\n```\\n\\nAnd the nice thing is that this library goes perfectly with the previous `json_serialization` library, so your DTOs like `EmptyResponse` or `SignOutRequest` here can be annotated with `@JsonSerializable` and `retrofit` library will take care of proper serialization and deserialization.\\n\\nSo we can easily use this client, let\u2019s say, in our `AuthenticationManager` that implements a higher level functionality:\\n\\n```dart\\nclass AuthenticationManager {\\n  AuthenticationManager(this._restClient);\\n\\n  final RestClient _restClient;\\n\\n  Future<Either<Exception, void>> logOut() =>\\n      _restClient.signOut(SignOutRequest()).toEither();\\n}\\n```\\n\\n### Libraries to use: DI\\n\\n```yaml\\ndependencies:\\n  provider: ^3.0.0+1\\n```\\n\\nAnd our last category of patterns that always comes out while aiming towards a clean architecture is dependency injection. There\u2019re several libraries to choose from for that, our choice is `provider`. It\u2019s actually a mix of state management and dependency injection library, but we\u2019re using it for DI only.\\n\\n:::note\\n\\nWe\'ve also experimented with `inject.dart` \u2013 you can read about it here \u2013 but I wouldn\'t recommend it now, as it\'s not really FLutter way.\\n\\n:::\\n\\nAs pretty much everything in Flutter is a widget, this library is not an exception. It\u2019s a wrapping widget that gives you the way to define value or factory providers and later retrieve them in the underlying widgets.\\n\\n```dart\\n@override\\nWidget build(BuildContext context) => MultiProvider(\\n      providers: [\\n        Provider<RestClient>.value(value: _restClient),\\n        Provider<MessagesRepository>.value(value: _messagesRepository),\\n        Provider<ThreadDataLayer>.value(\\n          value: ApiThreadDataLayer(\\n            _restClient,\\n            () => _imageUrlProvider.baseImageUrl().first,\\n          ),\\n        ),\\n      ],\\n      child: \u2026\\n    );\\n```\\n\\nLet\u2019s say we have a `MessagesBloc` that is dependent on `MessagesRepository` and `RestClient`:\\n\\n```dart\\nclass MessagesBloc {\\n  MessagesBloc(\\n    this._repository,\\n    this._restClient,\\n  );\\n\\n  final MessagesRepository _repository;\\n  final RestClient _restClient;\\n}\\n```\\n\\nSomewhere in the widget (let\u2019s say it\u2019s `MessagesScreen`) we\u2019re creating our BLoC and pass the dependencies we\u2019ve retrieved from the provider:\\n\\n```dart\\n_messagesBloc = MessagesBloc(\\n  Provider.of<MessagesRepository>(context),\\n  Provider.of<RestClient>(context),\\n);\\n```\\n\\nYeah, it\u2019s sort of a so-called Poor Man\u2019s DI and we can go in a more complex way to eliminate the need for creating BLoC manually, but so far we are ok with this approach.\\n\\nActually, thanks to Dart\u2019s type inference system, that code can be made even shorter. As compiler knows what types are expected in constructor, we can omit generic types declarations:\\n\\n```dart\\n_messagesBloc = MessagesBloc(Provider.of(context), Provider.of(context));\\n```\\n\\nJust keep in mind that this code can look rather confusing, so it\u2019s up to your team to decide whether you want to use this functionality.\\n\\n## Architecture / Structure: 10,000 foot overview\\n\\nLet\u2019s now talk about building an architecture and defining proper structure for your application. As this can actually be a theme of several other articles, I\u2019ll try to keep it really short and discuss only the general points.\\n\\n### Structure\\n\\nSpeaking of structure, there are 2 ways of organizing your code: **horizontal** and **vertical**.\\n\\n**Horizontal structure** assumes that on your top level you have folders according to the functionality of classes inside: e.g. models, blocs and widgets:\\n\\n```\\n\ud83d\udcc1 models\\n  message.dart\\n  thread.dart\\n  profile.dart\\n\ud83d\udcc1 blocs\\n  messages_bloc.dart\\n  profile_bloc.dart\\n\ud83d\udcc1 widgets\\n  messages_screen.dart\\n  profile_screen.dart\\n```\\n\\nThis can be tempting to structure your code like that in the very beginning, as it\u2019s easy to define which folder your file belongs to. The problem is that this structure becomes rather messy with the growth of your code base, and to change something in one module, let\u2019s say messages, you will have to go through multiple top-level folders.\\n\\nThat\u2019s why we prefer **vertical structure**, where your code is organized according to the use-case of the module. So on the top level we can have folders such as \u201cprofile\u201d, \u201cmessages\u201d etc. Inside these folders we can have nested sub-modules, extract shared models into a sub-folder or keep it as a flat list in a simple case:\\n\\n```\\n\ud83d\udcc1 profile\\n  profile.dart\\n  profile_bloc.dart\\n  profile_screen.dart\\n\ud83d\udcc1 messages\\n  \ud83d\udcc1 models\\n    message.dart\\n    thread.dart\\n  messages_bloc.dart\\n  messages_screen.dart\\n```\\n\\nLet\u2019s say in our app we have a \u201cmessages\u201d module. It means that we will have a top-level \u201cmessages\u201d folder. For threads screen we will use shared models, messages repository and screen-specific code will be located in the \u201cthreads\u201d folder.\\n\\n```\\n\ud83d\udcc1 messages\\n  \ud83d\udcc1 create_thread\\n    create_thread_bloc.dart\\n    create_thread_screen.dart\\n  \ud83d\udcc1 models\\n    message.dart\\n    message_author.dart\\n    message_thread.dart\\n  \ud83d\udcc1 thread_details\\n    thread_details_screen.dart\\n    thread_details_bloc.dart\\n  \ud83d\udcc1 threads\\n    threads_bloc.dart\\n    threads_screen.dart\\n    threads_tab.dart\\n  messages_repository.dart\\n```\\n\\nWhen we go to a new thread screen, we\u2019re still using these models and messages repository, and screen specific code is located in the \u201ccreate_thread\u201d folder.\\n\\n### Architecture\\n\\nAs Flutter is primarily a UI framework, it doesn\u2019t force you to use some specific architecture pattern, so you\u2019re free to use any of existing ones or invent your own. At the same time there\u2019s a pattern that\u2019s becoming a standard de facto in Flutter development: BLoC (Business Logic Component). The idea is rather simple and similar to redux pattern: you have a BLoC component that provides you an output stream of states and an input stream where you can send some events. BLoC transforms this incoming stream of events into an outcoming stream of new states. And the widget is supposed to consume a stream of states and send events.\\n\\nWe\u2019re using some mix between pure BLoC model and MVVM approach: our BL component defines a number of observable properties and exposes a set of methods that widget can use.\\n\\n:::note\\n\\nIt\'s worth noting here that we\'ve started developing our application in April 2019, when there was no unified opinion about building the architecture. As for now I would recommend going with [BLoC library](https://bloclibrary.dev/) which has a nice documentation and examples (I cannot say that it\'s now **the only** way to build your architecture, but BLoC approach in general, and this library in particular, is one of the most popular options). We\'re currently updating our app to use this library. Nevertheless, most of the points in this section make sense with this library as well.\\n\\n:::\\n\\nSo in the center of it there is a view model that communicates with the widget. Widget knows only about its own view model. It listens to observable properties and builds UI of them, and uses methods of view model to send events. A view model in a simple case can change observable properties based on these events.\\n\\n![](architecture.png)\\n\\nIn a more complex case view model can use some service (e.g. an API service) to retrieve some data. It sends a request and receives a response (it can be both synchronous and asynchronous request).\\n\\nBased on the response of the service, some of its observable properties can change and these changes will be propagated to the widget.\\n\\nAnother option for a view model is to \u201cfire and forget\u201d some request to a service. After this request is processed, service can update a repository, which exposes its state via stream as well. View model listens to this repository state and updates its data for the widget if necessary.\\n\\nIn this case the widget again receives an updated state. In any case widget knows only about its view model, view model knows about repositories and services and the latest ones know nothing about widgets and view models. That allows to build a cleaner architecture, where high levels don\u2019t depend on low levels.\\n\\nLet\u2019s say we have a \\"create message thread\\" screen and there\u2019s an input field with the title of the thread. BLoC provides us a stream of strings with the current title value, so we connect to this stream on widget initialization and with each update force title controller to use the new value:\\n\\n```dart\\nclass CreateThreadScreen extends StatefulWidget {\u2026}\\n\\nclass _CreateThreadScreenState extends State<CreateThreadScreen> {\\n  @override\\n  void afterInitState() {\\n    super.afterInitState();\\n\\n    bloc.title\\n        .map((v) => _titleController.value.copyWith(text: v))\\n        .listen((v) => _titleController.value = v, onError: ignore)\\n        .addTo(_subscriptions);\\n  }\\n}\\n```\\n\\nIn that case our BLoC can contain such a code:\\n\\n```dart\\nclass CreateThreadBloc extends BlocBase {\\n  /// Title of the conversation\\n  Stream<String> get title => _title.transform(emptyValidationTransformer);\\n  final BehaviorSubject<String> _title = BehaviorSubject.seeded(\'\');\\n\\n  /// Creates new message thread or updates existing one.\\n  Future<Either<Exception, MessageThread>> submit() async {\\n    Either<Exception, MessageThread> result;\\n    if (initialThread == null) {\\n      result = await _createThread();\\n    } else {\\n      result = await _updateThread();\\n    }\\n    return result;\\n  }\\n}\\n```\\n\\nFor the title stream we are actually using behavior subject under the hood, but we expose only a stream, so that client (widget) cannot change it directly, only through a predefined interface.\\n\\nAnd let\u2019s say we need some method to submit a thread to the server. It can be either creating a new thread or updating an existing one.\\n\\nCreating a new thread can look like this \u2013 we prepare some data and call a method from data layer:\\n\\n```dart\\nFuture<Either<Exception, MessageThread>> _createThread() async {\\n    final selectedEmployees =\\n      _selectedEmployees.value.map((employee) => employee.id).toList();\\n\\n    return data.createNewThread(_title.value, selectedEmployees).map((thread) {\\n      repository.saveThread(thread);\\n      return thread;\\n    });\\n  }\\n```\\n\\nData layer provides another abstraction layer of the REST client. Since communication with a server is an infrastructure task, our business layer shouldn\u2019t depend on it, also we would be able to unit test the business layer without providing or mocking REST clients.\\n\\n```dart\\nabstract class ThreadDataLayer {\\n  Future<Either<Exception, MessageThread>> createNewThread(\\n    String subject,\\n    List<String> employeeIds,\\n  );\\n}\\n```\\n\\nThat means we can define an interface \u2013 actually, an abstract class since Dart doesn\u2019t have an interface keyword \u2013 that will abstract over thread creating.\\n\\nThis interface can be placed into the module with the view model itself, since it\u2019s just an abstract dependency for our business logic. We can easily implement a stub class for our unit tests. For a real application we need real communication, so we can create an `ApiThreadDataLayer` that depends on `RestClient` and does real API calls. As this is an implementation detail, we can place this class somewhere in the infrastructure level:\\n\\n```dart\\nclass ApiThreadDataLayer implements ThreadDataLayer {\\n  final RestClient _restClient;\\n\\n  @override\\n  Future<Either<Exception, MessageThread>> createNewThread(\u2026) async {\u2026}\\n}\\n```\\n\\nThese are the most important libraries that we\u2019re using almost for each Flutter project. Of course there are tons of them implementing UI widgets, native plugins and so on, making a detailed review is out of the scope for this presentation, so let\u2019s continue with other tips that can be useful for a production-ready app.\\n\\n## Other tips. TLDR: do it well\\n\\n### Code style\\n\\nCode formatting can be a very arguable topic. But as they say in the army: there are 2 opinions \u2013 one is mine, another is wrong. This is the position of a built in dart formatter: there is only one right way to format your code.\\n\\nAnd if you accept this position you can actually make your collaboration and code reviewing easier, like we did by setting up CI server. If any of the files in PR is not formatted correctly from the dartfmt point of view, the build will fail and you cannot merge it into master branch.\\n\\nThis code, for example, looks ok to me:\\n\\n```dart\\nclass SharedPrefTokenRepository implements TokenRepository {\\n  @override\\n  Future<void> save(String token) async =>\\n      (await SharedPreferences.getInstance())\\n          .setString(_keyToken, token);\\n\\n  @override\\n  Future<String> load() async => (await SharedPreferences.getInstance())\\n      .getString(_keyToken);\\n\\n  static const String _keyToken = \'token\';\\n}\\n```\\n\\nBut `dartfmt` says that it should be formatted in a different way:\\n\\n```dart\\nclass SharedPrefTokenRepository implements TokenRepository {\\n  @override\\n  Future<void> save(String token) async =>\\n      (await SharedPreferences.getInstance()).setString(_keyToken, token);\\n\\n  @override\\n  Future<String> load() async =>\\n      (await SharedPreferences.getInstance()).getString(_keyToken);\\n\\n  static const String _keyToken = \'token\';\\n}\\n```\\n\\n### Static analysis\\n\\nAnother moment that can greatly help you with catching hidden bugs and unifying code style is static analysis, and luckily we have a built in analyzer as well. Though by default it\u2019s too kind, as for me. That\u2019s why we went through most of its rules and defined our own importance levels for them.\\n\\nSome of them we defined as warning, it means that IDE will mark them with yellow color, but, unlike errors, warnings won\u2019t prevent you from running and hot reloading your app. That\u2019s very convenient, because things like not closed sinks or empty statements can happen while you\u2019re experimenting with your code and you don\u2019t usually want to waste your time to prettify your churn code.\\n\\nAt the same time CI server runs analysis as well, and will fail the build if it contains errors or warnings, so before requesting a code review you will need to take care of them.\\n\\n### Extract widgets\\n\\nWhen you start developing with Flutter, you can often come to a situation with a bloated build method that contains a lot of nesting:\\n\\n```dart\\n@override\\nWidget build(BuildContext context) => Scaffold(\\n      body: SingleChildScrollView(\\n        child: Padding(\\n          padding: const EdgeInsets.symmetric(horizontal: 16),\\n          child: Column(\\n            children: <Widget>[\\n              Padding(\\n                padding: const EdgeInsets.only(top: 145, bottom: 102),\\n                child: SvgPicture.asset(\\n                  \'assets/mews_logo.svg\',\\n                  height: 28,\\n                  width: 136,\\n                ),\\n              ),\\n              StreamBuilder<String>(\\n                stream: bloc.email,\\n                builder: (context, snapshot) => MewsInputField(\\n                  textInputAction: TextInputAction.next,\\n                  onSubmitted: (_) {\\n                    FocusScope.of(context).requestFocus(_passwordFocus);\\n                  },\\n                  label: _translate(TranslationKey.UserNameOrEmail),\\n                  placeholder: _translate(TranslationKey.UserNameOrEmail),\\n                  onChanged: bloc.onEmailChanged,\\n                  keyboardType: TextInputType.emailAddress,\\n                  error: (snapshot.error as ValidationError)?.message,\\n                  isRequired: true,\\n                ),\\n              ),\\n              Padding(\\n                padding: const EdgeInsets.only(top: 24),\\n                child: StreamBuilder<String>(\\n                  stream: bloc.password,\\n                  builder: (context, snapshot) => MewsInputField(\\n                    enableInteractiveSelection: true,\\n                    textInputAction: TextInputAction.go,\\n                    onSubmitted: (_) => _logIn(),\\n                    focusNode: _passwordFocus,\\n                    isPasswordField: true,\\n                    label: _translate(TranslationKey.Password),\\n                    placeholder: _translate(TranslationKey.Password),\\n                    onChanged: bloc.onPasswordChanged,\\n                    error: (snapshot.error as ValidationError)?.message,\\n                    isRequired: true,\\n                  ),\\n                ),\\n              ),\\n              Padding(\\n                padding: const EdgeInsets.only(top: 40),\\n                child: MewsFillButton(\\n                  minWidth: double.infinity,\\n                  onPressed: _logIn,\\n                  text: _translate(TranslationKey.SignIn),\\n                ),\\n              ),\\n              Padding(\\n                padding: const EdgeInsets.only(top: 16),\\n                child: StreamBuilder<Environment>(\\n                  stream: _environmentBloc.environment,\\n                  initialData: Environment.production,\\n                  builder: (context, snapshot) => MewsGhostButton(\\n                    minWidth: double.infinity,\\n                    text: \'Environment: ${snapshot.data.name}\',\\n                    onPressed: _displayChangeEnvironmentDialog,\\n                  ),\\n                ),\\n              )\\n            ],\\n          ),\\n        ),\\n      ),\\n    );\\n```\\n\\nSo when it comes to building a layout, main advice is to keep your build method flat and readable. For example with a minimum effort this code can look much better:\\n\\n```dart\\n@override\\nWidget build(BuildContext context) => Scaffold(\\n      body: SingleChildScrollView(\\n        child: Padding(\\n          padding: const EdgeInsets.symmetric(horizontal: 16),\\n          child: Column(\\n            children: <Widget>[\\n              const _Logo(),\\n              _buildEmailField(),\\n              _buildPasswordField(),\\n              _buildSubmitButton(),\\n              _buildChangeEnvironmentButton()\\n            ],\\n          ),\\n        ),\\n      ),\\n    );\\n```\\n\\nOne option is to extract some part of your code into a separate widget. And if it doesn\u2019t depend on properties of your parent widget you can even declare it a constant and gain a performance improvement.\\n\\nIf it\u2019s not possible or doesn\u2019t seem to be reasonable you can at least define some helper build methods that will improve readability.\\n\\n### Logging\\n\\nWhen we\u2019ve rewritten our app with Flutter, we\u2019ve got this picture in Crashlytics:\\n\\n![](crashlytics.png)\\n\\nThis doesn\u2019t mean of course, that we\u2019ve become perfect developers or that Flutter doesn\u2019t allow you to make any error in your code. It\u2019s about the way Flutter works: it\u2019s actually very hard to make Flutter app crash. It can crash if there\u2019s an error in native plugin or in native part of Flutter itself, but errors in your Dart code will trigger a red screen of death in debug mode, and be swallowed in production.\\n\\nIt can be both an advantage and a drawback: yes, users won\u2019t probably see your app crashing, but at the same time if you have an error while displaying a modal loader dialog, a user has a chance to be stuck at this screen forever.\\n\\nThat\u2019s why for a production app it\u2019s crucial to have a proper logging system. For our project we\u2019re using the same stack as other platforms in Mews: Sentry for error reporting and InsightOps for all the logging. You can set up your Flutter app to use these systems pretty easily.\\n\\n```yaml\\ndependencies:\\n  logging: ^0.11.3+2\\n  sentry: ^2.2.0\\n  insightops_dart: ^0.0.6\\n```\\n\\n```dart\\nawait runZoned<Future<void>>(\\n  () async => runApp(app),\\n  onError: _reportError,\\n);\\n\\nFlutterError.onError = (FlutterErrorDetails details) {\\n  Zone.current.handleUncaughtError(details.exception, details.stack);\\n};\\n```\\n\\nThat\u2019s it! Of course, each of these sections can be discussed in a separate article (or even a book), so if you\u2019re interested we can continue with this how-to series and share our experience in creating cross-platform apps that can be even better than native ones."},{"id":"/2020/01/29/flutter-web","metadata":{"permalink":"/blog/2020/01/29/flutter-web","source":"@site/blog/2020-01-29-flutter-web.md","title":"Flutter for Web: is it a killer of React?","description":"During one of our recent discussions about Flutter and Flutter for Web (and I do like talking about Flutter a lot), I was asked a question, whether the final goal of our Application Development department is to fire all the front-end developers and replace them with Flutter developers. It was a joke, of course, but I think it\u2019s a good question to think about and to discuss: what role Flutter is going to play in Web development.","date":"2020-01-29T00:00:00.000Z","formattedDate":"January 29, 2020","tags":[],"readingTime":3.21,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Flutter for Web: is it a killer of React?"},"prevItem":{"title":"Intro to Flutter: a practical guide to cross-platform development","permalink":"/blog/2020/05/19/intro-to-flutter"},"nextItem":{"title":"Flutter: how to draw text along an arc","permalink":"/blog/2019/12/12/flutter-arc"}},"content":"During one of our recent discussions about Flutter and Flutter for Web (and I do like talking about Flutter a lot), I was asked a question, whether the final goal of our Application Development department is to fire all the front-end developers and replace them with Flutter developers. It was a joke, of course, but I think it\u2019s a good question to think about and to discuss: what role Flutter is going to play in Web development.\\n\\nLet\u2019s think about types of Web applications we usually develop.\\n\\n\x3c!--truncate--\x3e\\n\\n## Landing page\\n\\nHowever good Flutter may be, using it for a static page is a huge overkill. Actually, the same I can say for React here, in the simplest case you can just go with plain old HTML and a little bit vanilla JS. Users will be thankful to you, if they don\u2019t need to download megabytes of JS for a couple paragraphs of text.\\n\\nIn a more complex case though, with interactivity or animations, it can be easier to go with some framework. Just grab something like GatsbyJS and you\u2019re good to go.\\n\\n:::danger\\n\\nVerdict: NO\\n\\n:::\\n\\nAs an experiment, I\u2019ve created a landing page in Flutter for Web. The development process was fun, but the result was unusable\u2026\\n\\n## Blog\\n\\nBlog means text. A lot of text. And a lot of SEO. Using \u201cUI toolkit for building beautiful, natively compiled applications\u201d sounds weird for me. Again, you can instead use GatsbyJS, or Jekyll, or (if you\u2019re slightly old-fashioned) fall back to WordPress.\\n\\n:::danger\\n\\nVerdict: NO\\n\\n:::\\n\\n## Admin pages, dashboards\\n\\nSounds slightly better. As it\u2019s usually something private, you don\u2019t need SEO; there are no long reads; it can be highly interactive \u2013 charts, toggles, gauges. But at the same time: tables, pretty standard column layout, modest amount of animations. Framework like React or Angular will be more useful here. And if you don\u2019t want to use JavaScript (and who does?) you can switch to TypeScript or even AngularDart.\\n\\n:::caution\\n\\nVerdict: maybe, but\u2026 NO\\n\\n:::\\n\\n## Progressive Web Apps\\n\\nWhat do we expect from PWA? Let me think\u2026 Custom UI, a lot of interactions and animations, local storage, mobile-app-without-installation\u2026 Sounds like a job for \u201cUI toolkit for building beautiful, natively compiled applications\u201d. And what do you say to a single codebase for Web, Android and iOS? Abstraction over key-value database for all platforms with e.g. hive? Hot reload and PWA support out of the box? Statically typed language? Shut up and take my money!\\n\\n:::success\\n\\nVerdict: YESSSSSS!\\n\\n:::\\n\\nI\u2019m looking forward to seeing Flutter for Web in production. We have a couple of side projects, where it would be a perfect fit.\\n\\n## Games\\n\\nNever developed them, so it\u2019s hard for me to say something for sure. There is Rive that can be used for animations, kinematics, effects and stuff like that. But maybe for some complex game you should prefer Unity.\\n\\n:::caution\\n\\nVerdict: maybe\\n\\n:::\\n\\n---\\n\\nSo, looking at these types, I would say the best use case for Flutter for Web is PWA with custom UI, unified across platforms. Especially, if you already have mobile app written in Flutter, and need a simple and limited version of it for Web. Flutter will rise and shine here, allow you to re-use almost all of your code (but yeah, we need it to become production-ready, it\u2019s still in beta).\\n\\nThat means, I wouldn\u2019t even consider Flutter for Web as a separate product. It\u2019s just another compilation target, so use it together with Flutter for Android and Flutter for iOS.\\n\\nReturning to the question in the beginning of the article \u2013 no, flutter-for-web developers won\u2019t replace front-end guys. Flutter for Web is a tool with rather limited functionality, but in its field it\u2019s shining. And in no way Flutter is a killer of React. It\u2019s a killer of React Native, though \ud83d\ude09"},{"id":"/2019/12/12/flutter-arc","metadata":{"permalink":"/blog/2019/12/12/flutter-arc","source":"@site/blog/2019-12-12-flutter-arc/index.md","title":"Flutter: how to draw text along an arc","description":"- Flutter package","date":"2019-12-12T00:00:00.000Z","formattedDate":"December 12, 2019","tags":[],"readingTime":6.02,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Flutter: how to draw text along an arc"},"prevItem":{"title":"Flutter for Web: is it a killer of React?","permalink":"/blog/2020/01/29/flutter-web"},"nextItem":{"title":"Flutter: \u0440\u0438\u0441\u0443\u0435\u043c \u0442\u0435\u043a\u0441\u0442 \u0432\u0434\u043e\u043b\u044c \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u0438","permalink":"/blog/2019/12/01/flutter-arc-ru"}},"content":":::note\\n\\n- [Flutter package](https://pub.dev/packages/flutter_arc_text)\\n- [GitHub](https://github.com/ookami-kb/flutter_arc_text)\\n- [\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f](../2019-12-01-flutter-arc-ru.md)\\n\\n:::\\n\\nFor one of our side projects (highly experimental and written in Flutter for Web, by the way) I needed to implement something like this:\\n\\n![](./arc_1.png)\\n\\n\x3c!--truncate--\x3e\\n\\nThe code is actually the same for mobile and web, so, for the sake of simplicity (and because they look nicer), I\'ll share screenshots from the mobile app.\\n\\nThe problem is that Flutter doesn\'t support drawing text along a custom path (and it [doesn\'t look like it will](https://github.com/flutter/flutter/issues/16477), at least not in the near future). So I decided to implement the functionality on my own. Drawing text along any custom path would be quite complex, but luckily I only had to implement text along an arc. I\'d like to share with you one way to do that.\\n\\nFor this implementation, your first geometry course should be more than enough (though, shame on me, I\'ve realised that I\'ve forgot almost all of mine). It won\'t be the best possible implementation, but for our use case it will be good enough.\\n\\nLet\'s start with defining the interface of our widget (let it be `ArcText`):\\n\\n```dart\\nclass ArcText extends StatelessWidget {\\n  const ArcText({\\n    Key key,\\n    @required this.radius,\\n    @required this.text,\\n    @required this.textStyle,\\n    this.startAngle = 0,\\n  }) : super(key: key);\\n\\n  final double radius;\\n  final String text;\\n  final double startAngle;\\n  final TextStyle textStyle;\\n}\\n```\\n\\n`startAngle` is the initial angle where the text will start, and `radius` is the arc\'s radius \u2013 the text will be drawn along its side. We can use it like this:\\n\\n```dart\\nContainer(\\n  decoration: BoxDecoration(\\n    border: Border.all(),\\n    color: Colors.white,\\n  ),\\n  width: 300,\\n  height: 300,\\n  child: ArcText(\\n    radius: 100,\\n    text: \'Hello, Mews! I am ArcText widget. I can draw circular text.\',\\n    textStyle: TextStyle(fontSize: 18, color: Colors.black),\\n    startAngle: -pi / 2,\\n  ),\\n)\\n```\\n\\nFor the text rendering we\'ll be using `CustomPainter`. This is where the magic happens:\\n\\n```dart\\nclass ArcText extends StatelessWidget {\\n  const ArcText({\\n    Key key,\\n    @required this.radius,\\n    @required this.text,\\n    @required this.textStyle,\\n    this.startAngle = 0,\\n  }) : super(key: key);\\n\\n  final double radius;\\n  final String text;\\n  final double startAngle;\\n  final TextStyle textStyle;\\n\\n  @override\\n  Widget build(BuildContext context) => CustomPaint(\\n        painter: _Painter(\\n          radius,\\n          text,\\n          textStyle,\\n          initialAngle: startAngle,\\n        ),\\n      );\\n}\\n```\\n\\nBefore starting to implement the `_Painter` class let\'s think about how it will work:\\n\\n![](arc_2.png)\\n\\nThe idea here is that we will draw each letter on top of a chord. The radius of the circle the cord belongs to is our defined radius. `d` \u2013 the chord\'s length \u2013 equals the letter\'s width. That means that after drawing each letter we can rotate the canvas to a specified angle and move it to a distance `d` along the x axis. It\'s easier to transform the canvas than to calculate new coordinates.\\n\\nLet\'s start implementing the `_Painter` class:\\n\\n```dart\\nclass _Painter extends CustomPainter {\\n  _Painter(this.radius, this.text, this.textStyle, {this.initialAngle = 0});\\n\\n  final num radius;\\n  final String text;\\n  final double initialAngle;\\n  final TextStyle textStyle;\\n\\n  @override\\n  void paint(Canvas canvas, Size size) {}\\n\\n  @override\\n  bool shouldRepaint(CustomPainter oldDelegate) => true;\\n}\\n```\\n\\nFor rendering we will need: the radius, the text itself, the text style (so that we can get a width of each letter) and the initial angle. The `shouldRepaint` method defines whether the `paint` method needs to be called and, in the simplest case (when we don\'t have any complex calculations there), it can always return `true`.\\n\\nNow we can continue implementing `paint`:\\n\\n```dart\\n@override\\nvoid paint(Canvas canvas, Size size) {\\n  canvas.translate(size.width / 2, size.height / 2);\\n  canvas.drawCircle(Offset.zero, radius, Paint()..style=PaintingStyle.stroke);\\n  canvas.translate(0, -radius);\\n}\\n```\\n\\nIn this code snippet we\'re moving the canvas so that circle radius is in the center of a container, drawing the circle (it\'s just a helper, we\'ll remove it later), and moving the canvas again to a -radius along the y axis \u2013 later it will be easy to move and rotate it. We should get the following picture:\\n\\n![](arc_3.png)\\n\\nLet\'s add text rendering:\\n\\n```dart\\n@override\\nvoid paint(Canvas canvas, Size size) {\\n  canvas.translate(size.width / 2, size.height / 2);\\n  canvas.drawCircle(Offset.zero, radius, Paint()..style=PaintingStyle.stroke);\\n  canvas.translate(0, -radius);\\n\\n  double angle = 0;\\n  for (int i = 0; i < text.length; i++) {\\n    angle = _drawLetter(canvas, text[i], angle);\\n  }\\n}\\n\\ndouble _drawLetter(Canvas canvas, String letter, double prevAngle) {\\n  _textPainter.text = TextSpan(text: letter, style: textStyle);\\n  _textPainter.layout(\\n    minWidth: 0,\\n    maxWidth: double.maxFinite,\\n  );\\n\\n  final double d = _textPainter.width;\\n  final double alpha = 2 * math.asin(d / (2 * radius));\\n\\n  final newAngle = _calculateRotationAngle(prevAngle, alpha);\\n  canvas.rotate(newAngle);\\n\\n  _textPainter.paint(canvas, Offset(0, -_textPainter.height));\\n  canvas.translate(d, 0);\\n\\n  return alpha;\\n}\\n\\ndouble _calculateRotationAngle(double prevAngle, double alpha) =>\\n    (alpha + prevAngle) / 2;\\n```\\n\\nAs I said, the idea is rather simple: with each letter drawn we\'re rotating the canvas to a calculated angle, so that the chord of the current letter is parallel to the x axis; then we draw the letter and move the canvas along the x axis to a distance equal to the letter width.\\n\\nWe can use our knowledge of geometry to find a chord\'s angle and the new angle to rotate the canvas.\\n\\nA chord\'s length can be found from the following equation:\\n\\n$$d=2r\\\\sin {\\\\frac {\\\\alpha }{2}}$$\\n\\nSo it can be transformed like this to find the chord\'s central angle:\\n\\n$$\\\\alpha=2\\\\arcsin({\\\\frac d {2r}})$$\\n\\nThe angle to rotate the canvas can be found with this simple formula:\\n\\n$$\\\\Delta=(\\\\frac{\\\\alpha+\\\\beta} 2)$$\\n\\n`\u237a` is the central angle of the previous chord, `\u03b2` is the central angle of the current chord.\\n\\nNow it looks like this:\\n\\n![](arc_4.png)\\n\\nNow we can remove the helper circle and take the initial angle into account:\\n\\n```dart\\n@override\\nvoid paint(Canvas canvas, Size size) {\\n  canvas.translate(size.width / 2, size.height / 2 - radius);\\n\\n  if (initialAngle != 0) {\\n    final d = 2 * radius * math.sin(initialAngle / 2);\\n    final rotationAngle = _calculateRotationAngle(0, initialAngle);\\n    canvas.rotate(rotationAngle);\\n    canvas.translate(d, 0);\\n  }\\n\\n  double angle = initialAngle;\\n  for (int i = 0; i < text.length; i++) {\\n    angle = _drawLetter(canvas, text[i], angle);\\n  }\\n}\\n```\\n\\n![](arc_5.png)\\n\\nThat\'s all! Here\'s the final source code:\\n\\n```dart\\nimport \'dart:math\' as math;\\n\\nimport \'package:flutter/material.dart\';\\nimport \'package:flutter/widgets.dart\';\\n\\nclass ArcText extends StatelessWidget {\\n  const ArcText({\\n    Key key,\\n    @required this.radius,\\n    @required this.text,\\n    @required this.textStyle,\\n    this.startAngle = 0,\\n  }) : super(key: key);\\n\\n  final double radius;\\n  final String text;\\n  final double startAngle;\\n  final TextStyle textStyle;\\n\\n  @override\\n  Widget build(BuildContext context) => CustomPaint(\\n        painter: _Painter(\\n          radius,\\n          text,\\n          textStyle,\\n          initialAngle: startAngle,\\n        ),\\n      );\\n}\\n\\nclass _Painter extends CustomPainter {\\n  _Painter(this.radius, this.text, this.textStyle, {this.initialAngle = 0});\\n\\n  final num radius;\\n  final String text;\\n  final double initialAngle;\\n  final TextStyle textStyle;\\n\\n  final _textPainter = TextPainter(textDirection: TextDirection.ltr);\\n\\n  @override\\n  void paint(Canvas canvas, Size size) {\\n    canvas.translate(size.width / 2, size.height / 2 - radius);\\n\\n    if (initialAngle != 0) {\\n      final d = 2 * radius * math.sin(initialAngle / 2);\\n      final rotationAngle = _calculateRotationAngle(0, initialAngle);\\n      canvas.rotate(rotationAngle);\\n      canvas.translate(d, 0);\\n    }\\n\\n    double angle = initialAngle;\\n    for (int i = 0; i < text.length; i++) {\\n      angle = _drawLetter(canvas, text[i], angle);\\n    }\\n  }\\n\\n  double _drawLetter(Canvas canvas, String letter, double prevAngle) {\\n    _textPainter.text = TextSpan(text: letter, style: textStyle);\\n    _textPainter.layout(\\n      minWidth: 0,\\n      maxWidth: double.maxFinite,\\n    );\\n\\n    final double d = _textPainter.width;\\n    final double alpha = 2 * math.asin(d / (2 * radius));\\n\\n    final newAngle = _calculateRotationAngle(prevAngle, alpha);\\n    canvas.rotate(newAngle);\\n\\n    _textPainter.paint(canvas, Offset(0, -_textPainter.height));\\n    canvas.translate(d, 0);\\n\\n    return alpha;\\n  }\\n\\n  double _calculateRotationAngle(double prevAngle, double alpha) =>\\n      (alpha + prevAngle) / 2;\\n\\n  @override\\n  bool shouldRepaint(CustomPainter oldDelegate) => true;\\n}\\n```\\n\\nBy the way, it\'s also available as a Flutter package [here](https://pub.dev/packages/flutter_arc_text/)."},{"id":"/2019/12/01/flutter-arc-ru","metadata":{"permalink":"/blog/2019/12/01/flutter-arc-ru","source":"@site/blog/2019-12-01-flutter-arc-ru.md","title":"Flutter: \u0440\u0438\u0441\u0443\u0435\u043c \u0442\u0435\u043a\u0441\u0442 \u0432\u0434\u043e\u043b\u044c \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u0438","description":"- Flutter package","date":"2019-12-01T00:00:00.000Z","formattedDate":"December 1, 2019","tags":[],"readingTime":5.2,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Flutter: \u0440\u0438\u0441\u0443\u0435\u043c \u0442\u0435\u043a\u0441\u0442 \u0432\u0434\u043e\u043b\u044c \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u0438"},"prevItem":{"title":"Flutter: how to draw text along an arc","permalink":"/blog/2019/12/12/flutter-arc"},"nextItem":{"title":"Mews Challenge","permalink":"/blog/2019/10/14/mews-challenge"}},"content":":::note\\n\\n- [Flutter package](https://pub.dev/packages/flutter_arc_text)\\n- [GitHub](https://github.com/ookami-kb/flutter_arc_text)\\n- [English version](./2019-12-12-flutter-arc/index.md)\\n\\n:::\\n\\n\u041f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u043c\u043d\u0435 \u0442\u0443\u0442 \u043d\u0430 \u0434\u043d\u044f\u0445 \u0432 \u043e\u0434\u043d\u043e\u043c \u043c\u0438\u043d\u0438-\u043f\u0440\u043e\u0435\u043a\u0442\u0435 (\u043f\u0440\u043e\u0435\u043a\u0442, \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439, \u0441\u0434\u0435\u043b\u0430\u043d \u043d\u0430 Flutter Web) \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u0448\u0442\u0443\u043a\u0443:\\n\\n![](./2019-12-12-flutter-arc/arc_1.png)\\n\\n\x3c!--truncate--\x3e\\n\\n\u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043a\u043e\u0434 \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c \u0438 \u0434\u043b\u044f \u0432\u0435\u0431\u0430 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u0441 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\\n\\n\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e Flutter \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432\u0434\u043e\u043b\u044c path (\u0438 [\u0432\u0440\u044f\u0434 \u043b\u0438 \u0431\u0443\u0434\u0435\u0442](https://github.com/flutter/flutter/issues/16477) \u0432 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f). \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0435\u0448\u0435\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e \u0432\u0440\u0443\u0447\u043d\u0443\u044e (\u0431\u043b\u0430\u0433\u043e, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u0430 \u0431\u044b\u043b\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0430\u0441\u0442\u043d\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f \u2013 \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432\u0434\u043e\u043b\u044c \u0430\u0440\u043a\u0438). \u041e\u0434\u043d\u0438\u043c \u0438\u0437 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u044f \u0438 \u0445\u043e\u0447\u0443 \u0441 \u0432\u0430\u043c\u0438 \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f.\\n\\n\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0448\u043a\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0438 (\u043a\u043e\u0442\u043e\u0440\u0443\u044e, \u043a\u0430\u043a \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043a \u043c\u043e\u0435\u043c\u0443 \u0441\u0442\u044b\u0434\u0443, \u044f \u0443\u0436\u0435 \u0443\u0441\u043f\u0435\u043b \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u043c \u043f\u043e\u0434\u0437\u0430\u0431\u044b\u0442\u044c), \u0438 \u0445\u043e\u0442\u044f \u044d\u0442\u043e \u043d\u0435 \u0441\u0430\u043c\u044b\u0439 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0435\u0433\u043e \u0432\u043f\u043e\u043b\u043d\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e use-case.\\n\\n\u0418\u0442\u0430\u043a, \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043d\u0430\u0448\u0435\u0433\u043e \u0432\u0438\u0434\u0436\u0435\u0442\u0430 (\u043d\u0430\u0437\u043e\u0432\u0435\u043c \u0435\u0433\u043e `ArcText`):\\n\\n```dart\\nclass ArcText extends StatelessWidget {\\n  const ArcText({\\n    Key key,\\n    @required this.radius,\\n    @required this.text,\\n    @required this.textStyle,\\n    this.startAngle = 0,\\n  }) : super(key: key);\\n\\n  final double radius;\\n  final String text;\\n  final double startAngle;\\n  final TextStyle textStyle;\\n}\\n```\\n\\n\u0417\u0434\u0435\u0441\u044c `startAngle` \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0433\u043e\u043b, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0435\u043a\u0441\u0442, \u0438 `radius` \u2013 \u0440\u0430\u0434\u0438\u0443\u0441 \u0430\u0440\u043a\u0438, \u0432\u0434\u043e\u043b\u044c \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u044d\u0442\u043e\u0442 \u0442\u0435\u043a\u0441\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0449\u0430\u0442\u044c\u0441\u044f. \u0412\u0438\u0434\u0436\u0435\u0442 \u043c\u044b \u0441\u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0430\u043a:\\n\\n```dart\\nContainer(\\n  decoration: BoxDecoration(\\n    border: Border.all(),\\n    color: Colors.white,\\n  ),\\n  width: 300,\\n  height: 300,\\n  child: ArcText(\\n    radius: 100,\\n    text: \'Hello, Habr! I am ArcText widget. I can draw circular text.\',\\n    textStyle: TextStyle(fontSize: 18, color: Colors.black),\\n    startAngle: -pi / 2,\\n  ),\\n)\\n```\\n\\n\u0414\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `CustomPainter`, \u0432\u0441\u0435 \u043c\u0430\u0433\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u043d\u0435\u043c:\\n\\n```dart\\nclass ArcText extends StatelessWidget {\\n  const ArcText({\\n    Key key,\\n    @required this.radius,\\n    @required this.text,\\n    @required this.textStyle,\\n    this.startAngle = 0,\\n  }) : super(key: key);\\n\\n  final double radius;\\n  final String text;\\n  final double startAngle;\\n  final TextStyle textStyle;\\n\\n  @override\\n  Widget build(BuildContext context) => CustomPaint(\\n    painter: _Painter(\\n      radius,\\n      text,\\n      textStyle,\\n      initialAngle: startAngle,\\n    ),\\n  );\\n}\\n```\\n\\n\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 `_Painter`, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c\u0441\u044f, \u043a\u0430\u043a \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. \u0421\u0445\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u044f \u044d\u0442\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0437\u0438\u043b \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0440\u0438\u0441\u0443\u043d\u043a\u0435:\\n\\n![](./2019-12-12-flutter-arc/arc_2.png)\\n\\n\u0421\u0443\u0442\u044c \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0449\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u0443\u044e \u0431\u0443\u043a\u0432\u0443 \u043d\u0430 \u0445\u043e\u0440\u0434\u0435 \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0440\u0430\u0434\u0438\u0443\u0441\u0443. `d` \u2013 \u0434\u043b\u0438\u043d\u0430 \u044d\u0442\u043e\u0439 \u0445\u043e\u0440\u0434\u044b \u2013 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0448\u0438\u0440\u0438\u043d\u0435 \u0431\u0443\u043a\u0432\u044b. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u0431\u0443\u043a\u0432\u044b \u043c\u044b \u043f\u043e\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0445\u043e\u043b\u0441\u0442 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0443\u0433\u043e\u043b \u0438 \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u043c \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 `d` (\u0445\u043e\u043b\u0441\u0442 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0434\u043e\u0431\u043d\u0435\u0435, \u0447\u0435\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b).\\n\\n\u0418\u0442\u0430\u043a, \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u043c \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 `_Painter`:\\n\\n```dart\\nclass _Painter extends CustomPainter {\\n  _Painter(this.radius, this.text, this.textStyle, {this.initialAngle = 0});\\n\\n  final num radius;\\n  final String text;\\n  final double initialAngle;\\n  final TextStyle textStyle;\\n\\n  @override\\n  void paint(Canvas canvas, Size size) {}\\n\\n  @override\\n  bool shouldRepaint(CustomPainter oldDelegate) => true;\\n}\\n```\\n\\n\u0414\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f: \u0440\u0430\u0434\u0438\u0443\u0441, \u0441\u0430\u043c \u0442\u0435\u043a\u0441\u0442, \u0441\u0442\u0438\u043b\u044c, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0448\u0438\u0440\u0438\u043d\u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0431\u0443\u043a\u0432\u044b, \u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0433\u043e\u043b. \u041c\u0435\u0442\u043e\u0434 `shouldRepaint` \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043d\u0430\u0434\u043e \u043b\u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 `paint`, \u0438 \u0432 \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (\u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043a\u0430\u043a\u0438\u0445-\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439), \u043c\u043e\u0436\u0435\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c `true`.\\n\\n\u0421\u043b\u0435\u0434\u0443\u044f \u043d\u0430\u0448\u0435\u0439 \u043b\u043e\u0433\u0438\u043a\u0435, \u043d\u0430\u0447\u043d\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043c\u0435\u0442\u043e\u0434\u0430 `paint`:\\n\\n```dart\\n@override\\nvoid paint(Canvas canvas, Size size) {\\n  canvas.translate(size.width / 2, size.height / 2);\\n  canvas.drawCircle(Offset.zero, radius, Paint()..style=PaintingStyle.stroke);\\n  canvas.translate(0, -radius);\\n}\\n```\\n\\n\u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0434\u0432\u0438\u0433\u0430\u0435\u043c \u0445\u043e\u043b\u0441\u0442, \u0447\u0442\u043e\u0431\u044b \u0446\u0435\u043d\u0442\u0440 \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0448\u0435\u043b\u0441\u044f \u0432 \u0446\u0435\u043d\u0442\u0440 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430, \u0440\u0438\u0441\u0443\u0435\u043c \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u0438 (\u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043b\u044f \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u0442\u043e\u043c \u043c\u044b \u0435\u0435 \u0443\u0431\u0435\u0440\u0435\u043c), \u0438 \u0435\u0449\u0435 \u0441\u043c\u0435\u0449\u0430\u0435\u043c \u0445\u043e\u043b\u0441\u0442 \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 `-radius` \u043f\u043e \u043e\u0441\u0438 Y (\u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0443\u0434\u043e\u0431\u043d\u043e \u0431\u044b\u043b\u043e \u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0438 \u0441\u0434\u0432\u0438\u0433\u0430\u0442\u044c \u0445\u043e\u043b\u0441\u0442). \u041c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0442\u0430\u043a\u0443\u044e \u043a\u0430\u0440\u0442\u0438\u043d\u0443:\\n\\n![](./2019-12-12-flutter-arc/arc_3.png)\\n\\n\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0443 \u0431\u0443\u043a\u0432:\\n\\n```dart\\n@override\\nvoid paint(Canvas canvas, Size size) {\\n  canvas.translate(size.width / 2, size.height / 2);\\n  canvas.drawCircle(Offset.zero, radius, Paint()..style=PaintingStyle.stroke);\\n  canvas.translate(0, -radius);\\n\\n  double angle = 0;\\n  for (int i = 0; i < text.length; i++) {\\n    angle = _drawLetter(canvas, text[i], angle);\\n  }\\n}\\n\\ndouble _drawLetter(Canvas canvas, String letter, double prevAngle) {\\n  _textPainter.text = TextSpan(text: letter, style: textStyle);\\n  _textPainter.layout(\\n    minWidth: 0,\\n    maxWidth: double.maxFinite,\\n  );\\n\\n  final double d = _textPainter.width;\\n  final double alpha = 2 * math.asin(d / (2 * radius));\\n\\n  final newAngle = _calculateRotationAngle(prevAngle, alpha);\\n  canvas.rotate(newAngle);\\n\\n  _textPainter.paint(canvas, Offset(0, -_textPainter.height));\\n  canvas.translate(d, 0);\\n\\n  return alpha;\\n}\\n\\ndouble _calculateRotationAngle(double prevAngle, double alpha) =>\\n    (alpha + prevAngle) / 2;\\n```\\n\\n\u041a\u0430\u043a \u044f \u0443\u0436\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u0438\u0434\u0435\u044f \u043f\u0440\u043e\u0441\u0442\u0430: \u0441 \u043a\u0430\u0436\u0434\u043e\u0439 \u0431\u0443\u043a\u0432\u043e\u0439 \u043c\u044b \u043f\u043e\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0445\u043e\u043b\u0441\u0442 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0443\u0433\u043e\u043b, \u0447\u0442\u043e\u0431\u044b \u0445\u043e\u0440\u0434\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0431\u0443\u043a\u0432\u044b \u0441\u0442\u0430\u043b\u0430 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0441\u0438 X, \u0440\u0438\u0441\u0443\u0435\u043c \u0431\u0443\u043a\u0432\u0443, \u0438 \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u043c \u0445\u043e\u043b\u0441\u0442 \u043f\u043e \u043e\u0441\u0438 X \u043d\u0430 \u0448\u0438\u0440\u0438\u043d\u0443 \u044d\u0442\u043e\u0439 \u0431\u0443\u043a\u0432\u044b. \u0428\u043a\u043e\u043b\u044c\u043d\u044b\u0439 \u043a\u0443\u0440\u0441 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0443\u0433\u043e\u043b, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u044d\u0442\u043e\u0439 \u0445\u043e\u0440\u0434\u0435, \u0438 \u043d\u043e\u0432\u044b\u0439 \u0443\u0433\u043e\u043b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0445\u043e\u043b\u0441\u0442.\\n\\n\u0418\u0437 \u0444\u043e\u0440\u043c\u0443\u043b\u044b \u0434\u043b\u0438\u043d\u044b \u0445\u043e\u0440\u0434\u044b:\\n\\n$$display$${\\\\displaystyle d=2r\\\\sin {\\\\frac {\\\\alpha }{2}}}$$display$$\\n\\n\u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u0443\u043b\u0443 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0443\u0433\u043b\u0430:\\n\\n$$display$$\\\\alpha=2\\\\arcsin({\\\\frac d {2r}})$$display$$\\n\\n\u0423\u0433\u043e\u043b \u0436\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0445\u043e\u043b\u0441\u0442, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e:\\n\\n$$display$$\\\\Delta=(\\\\frac{\\\\alpha+\\\\beta} 2)$$display$$\\n\\n\u0433\u0434\u0435 `\u237a` \u2013 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0433\u043e\u043b \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0445\u043e\u0440\u0434\u044b, `\u03b2` \u2013 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0433\u043e\u043b \u043d\u043e\u0432\u043e\u0439 \u0445\u043e\u0440\u0434\u044b.\\n\\n\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u0430\u043a\u0443\u044e \u043a\u0430\u0440\u0442\u0438\u043d\u0443:\\n\\n![](./2019-12-12-flutter-arc/arc_4.png)\\n\\n\u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u043c \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0443\u0447\u0435\u0441\u0442\u044c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0433\u043e\u043b \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0443 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0433\u043e \u043a\u0440\u0443\u0433\u0430:\\n\\n```dart\\n@override\\nvoid paint(Canvas canvas, Size size) {\\n  canvas.translate(size.width / 2, size.height / 2 - radius);\\n\\n  if (initialAngle != 0) {\\n    final d = 2 * radius * math.sin(initialAngle / 2);\\n    final rotationAngle = _calculateRotationAngle(0, initialAngle);\\n    canvas.rotate(rotationAngle);\\n    canvas.translate(d, 0);\\n  }\\n\\n  double angle = initialAngle;\\n  for (int i = 0; i < text.length; i++) {\\n    angle = _drawLetter(canvas, text[i], angle);\\n  }\\n}\\n```\\n\\n![](./2019-12-12-flutter-arc/arc_5.png)\\n\\n\u0418\u0442\u043e\u0433\u043e, \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a:\\n\\n```dart\\nimport \'dart:math\' as math;\\n\\nimport \'package:flutter/material.dart\';\\nimport \'package:flutter/widgets.dart\';\\n\\nclass ArcText extends StatelessWidget {\\n  const ArcText({\\n    Key key,\\n    @required this.radius,\\n    @required this.text,\\n    @required this.textStyle,\\n    this.startAngle = 0,\\n  }) : super(key: key);\\n\\n  final double radius;\\n  final String text;\\n  final double startAngle;\\n  final TextStyle textStyle;\\n\\n  @override\\n  Widget build(BuildContext context) => CustomPaint(\\n    painter: _Painter(\\n      radius,\\n      text,\\n      textStyle,\\n      initialAngle: startAngle,\\n    ),\\n  );\\n}\\n\\nclass _Painter extends CustomPainter {\\n  _Painter(this.radius, this.text, this.textStyle, {this.initialAngle = 0});\\n\\n  final num radius;\\n  final String text;\\n  final double initialAngle;\\n  final TextStyle textStyle;\\n\\n  final _textPainter = TextPainter(textDirection: TextDirection.ltr);\\n\\n  @override\\n  void paint(Canvas canvas, Size size) {\\n    canvas.translate(size.width / 2, size.height / 2 - radius);\\n\\n    if (initialAngle != 0) {\\n      final d = 2 * radius * math.sin(initialAngle / 2);\\n      final rotationAngle = _calculateRotationAngle(0, initialAngle);\\n      canvas.rotate(rotationAngle);\\n      canvas.translate(d, 0);\\n    }\\n\\n    double angle = initialAngle;\\n    for (int i = 0; i < text.length; i++) {\\n      angle = _drawLetter(canvas, text[i], angle);\\n    }\\n  }\\n\\n  double _drawLetter(Canvas canvas, String letter, double prevAngle) {\\n    _textPainter.text = TextSpan(text: letter, style: textStyle);\\n    _textPainter.layout(\\n      minWidth: 0,\\n      maxWidth: double.maxFinite,\\n    );\\n\\n    final double d = _textPainter.width;\\n    final double alpha = 2 * math.asin(d / (2 * radius));\\n\\n    final newAngle = _calculateRotationAngle(prevAngle, alpha);\\n    canvas.rotate(newAngle);\\n\\n    _textPainter.paint(canvas, Offset(0, -_textPainter.height));\\n    canvas.translate(d, 0);\\n\\n    return alpha;\\n  }\\n\\n  double _calculateRotationAngle(double prevAngle, double alpha) =>\\n      (alpha + prevAngle) / 2;\\n\\n  @override\\n  bool shouldRepaint(CustomPainter oldDelegate) => true;\\n}\\n```"},{"id":"/2019/10/14/mews-challenge","metadata":{"permalink":"/blog/2019/10/14/mews-challenge","source":"@site/blog/2019-10-14-mews-challenge.md","title":"Mews Challenge","description":"At the latest WebExpo conference we had a mini-game in our booth (or 2 mini-games to be precise \u2013 tests for designers and developers). The candidate selects one right answer per question and had only one attempt to pass the test. The ranking was done by the number of correct answers and by the time (in the case of a tie).","date":"2019-10-14T00:00:00.000Z","formattedDate":"October 14, 2019","tags":[],"readingTime":5.625,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Mews Challenge"},"prevItem":{"title":"Flutter: \u0440\u0438\u0441\u0443\u0435\u043c \u0442\u0435\u043a\u0441\u0442 \u0432\u0434\u043e\u043b\u044c \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u0438","permalink":"/blog/2019/12/01/flutter-arc-ru"},"nextItem":{"title":"Dependency Injection in Flutter","permalink":"/blog/2019/03/26/flutter-di"}},"content":"At the latest [WebExpo](https://www.webexpo.net/prague2019) conference we had a mini-game in our booth (or 2 mini-games to be precise \u2013 tests for designers and developers). The candidate selects one right answer per question and had only one attempt to pass the test. The ranking was done by the number of correct answers and by the time (in the case of a tie).\\n\\nThe designer test included 20 questions where you needed to select one of 2 images that presented \\"the right way\\" and \\"the wong way\\" from UX and UI points of view.\\n\\nThe developer test was more complicated. It consisted of 20 questions across all our technology stack with 4 options to choose from: C# for backend questions, JavaScript for frontend questions, Dart for mobile development, Python and SQL from Data department (if you\'re interested in our technology stack check out [this repo](https://github.com/MewsSystems/developers)).\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\nI decided to write this game in Dart, so for the framework I had to choose between Flutter Web and AngularDart. While it would be great to use Flutter Web, as we\'re using it in our department to write iOS/Android app, it\'s still in technical preview, and I didn\'t know if there would be some blockers for our game (speaking ahead \u2013 there were, but more on this later). So I\'ve decided to use AngularDart, though I had no experience with it (well, I used to code in AngularJS several years ago, but that\'s it).\\n\\nDespite my lack of experience with AngularDart, the game was written within a couple of working days (the code was **far** from perfect though) \u2013 and btw it reminded me exactly why I wasn\'t a fan of Angular: too much magic under the hood comparing to e.g. React.\\n\\nDuring the event I was asked if we were going to open source the game, and I\'ve promised to raise this question intenrally. So we did discuss it, and the result of discussion was _why not?_.\\n\\nI\'ve started preparing the code and it occurred to me that this code wouldn\'t be very useful for the community: as I\'ve already mentioned, my knowledge of AngularDart consisted of going through official tutorial, so the code probably would be good only as a _how-not-to_ guide. Besides that I still wanted to experiment with Flutter Web, so I\'ve decided to create another version of this app in Flutter.\\n\\nSo I\'ve extracted the common code (models and services for communicating with Firebase) and created a Flutter Web project \u2013 that took roughly another working day.\\n\\n> Actually, it would be interesting to further maintain and update both these versions, so I have an offer for the community: let\'s work on this project together and come to some proper implementations for both frameworks. If you have any ideas feel free to create an issue or make a pull request: <https://github.com/MewsSystems/mews-challenge>.\\n\\nBut in the meantime let\'s dive into some technical details.\\n\\n## Backend\\n\\nFor the backend part I decided to use Firebase Firestore database + Firebase Functions. On the top level there are 3 collections: games, results and users.\\n\\n### Games\\n\\nBasic information about the game:\\n\\n```json\\n{\\n  \\"design\\": {\\n    \\"id\\": \\"design\\",\\n    \\"description\\": \\"Are you UIcasso or da UXinci? Let\'s see your eye...\\",\\n    \\"title\\": \\"\ud83d\udd8c Design game\\"\\n  },\\n  \\"developer\\": {\\n    \\"id\\": \\"developer\\",\\n    \\"description\\": \\"Frontend, backend, data, applications\u2026 We know it all! How about you?\\",\\n    \\"title\\": \\"\ud83d\udcbb Developer game\\"\\n  }\\n}\\n```\\n\\nEach game contains a sub-collection questions. Here\'s an example developer question:\\n\\n```json\\n{\\n  \\"cs_01\\": {\\n    \\"id\\": \\"cs_01\\",\\n    \\"title\\": \\"What will be printed in a console?\\",\\n    \\"code\\": \\"Console.WriteLine(1 << 8);\\",\\n    \\"tag\\": \\"C#\\",\\n    \\"rightAnswer\\": \\"a\\",\\n    \\"answers\\": [\\n      { \\"id\\": \\"a\\", \\"text\\": \\"256\\" },\\n      { \\"id\\": \\"b\\", \\"text\\": \\"128\\" },\\n      { \\"id\\": \\"c\\", \\"text\\": \\"64\\" },\\n      { \\"id\\": \\"d\\", \\"text\\": \\"512\\" }\\n    ]\\n  }\\n}\\n```\\n\\nAnd this is how it looks for a design question:\\n\\n```json\\n{\\n  \\"design_01\\": {\\n    \\"id\\": \\"design_01\\",\\n    \\"title\\": \\"Which label of the button is better?\\",\\n    \\"rightAnswer\\": \\"b\\",\\n    \\"answers\\": [\\n      { \\"id\\": \\"a\\", \\"image\\": \\"q1_fail.jpg\\" },\\n      { \\"id\\": \\"b\\", \\"text\\": \\"q1_right.jpg\\" }\\n    ]\\n  }\\n}\\n```\\n\\nAs you can see, the answer can contain either text or an image. Images are stored in Firebase Storage, in the questions folder.\\n\\n### Users\\n\\nContains information about the user. We\'re only keeping the email and display name that we get from Firebase Auth, so the data looks like this:\\n\\n```json\\n{\\n  \\"fxXAEKGZJOaTVHzT6fbufm4MgVu1\\": {\\n    \\"name\\": \\"Kirill Bubochkin\\",\\n    \\"email\\": \\"kirill@mewssystems.com\\"\\n  }\\n}\\n```\\n\\nWe also have here a sub-collection games with the information about the games this user played.\\n\\n### Results\\n\\nThis collection contains information that is displayed on the Results page:\\n\\n```json\\n{\\n  \\"GAME_ID\\": {\\n    \\"results\\": {\\n      \\"USER_GAME_ID\\": {\\n        \\"start\\": \\"DATE_TIME\\",\\n        \\"end\\": \\"DATE_TIME\\",\\n        \\"questionCount\\": 20,\\n        \\"rightAnswerCount\\": 17,\\n        \\"name\\": \\"Kirill B.\\",\\n        \\"userId\\": \\"USER_ID\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\nAll the data except top-level games collection are filled in automatically by Firebase Functions and you don\'t need to do anything with them.\\n\\n## Frontend\\n\\nAs I\'ve already mentioned, the frontend part is written for both AngularDart and Flutter Web, so we have the following structure:\\n\\n- `core` \u2013 common code with models and services reused by both frameworks.\\n- `app_angular` \u2013 AngularDart app.\\n- `app_flutter` \u2013 Flutter Web app.\\n\\nWriting the app for Flutter Web was very similar to the mobile Flutter, but you need to keep in mind that for now Flutter plugins are not supported. Also instead of e.g. Flutter Firebase library you need to use the `firebase` package for browser-based applications.\\n\\nAlso I\'ve run into 2 major bugs, that currently prevent us from publishing our Flutter Web version to production:\\n\\n- custom font rendering in Safari isn\'t working (so it affects Safari on macOS and all browsers on iOS): https://github.com/flutter/flutter/issues/41483\\n- links in `RichText` are not always working: https://github.com/flutter/flutter/issues/39226\\n\\nApart from that, the development process was pretty straightforward, widgets were pretty much the same as I would write for a mobile app. If you\'re interested, I can write a separate article about developing the Flutter part of the app with more technical details.\\n\\n> 10,000 foot view: it\'s a pretty common app with `rxdart` and `provider` packages. Instead of BLoC pattern I\'ve just re-used services from the `core` package: for such a simple app it\'s enough. I\'ve also used `universal_html` for processing external links, and `flutter_html` for turning HTML code into Flutter widgets.\\n\\nVerdict? While Flutter Web is definitely not yet ready for the production, it\'s still great to see the direction it is heading in, and I\'m looking forward to the stable version. It would be the perfect choice for a true multi-platform app.\\n\\nSo without any further ado, go to the app repo, create issues, make pull requests, and let\'s work together to make this app a showcase for using Dart in web development.\\n\\nOh, and you can try the game here: https://mews-challenge.firebaseapp.com/"},{"id":"/2019/03/26/flutter-di","metadata":{"permalink":"/blog/2019/03/26/flutter-di","source":"@site/blog/2019-03-26-flutter-di.md","title":"Dependency Injection in Flutter","description":"As I wrote in a previous article, we\u2019re experimenting with Flutter while developing our side project for step challenges with colleagues. This side project should also be considered as a playground, where we can check if we can use Flutter in more serious projects. That\u2019s why we want to use some approaches there that can look like an over-engineering for such a small project.","date":"2019-03-26T00:00:00.000Z","formattedDate":"March 26, 2019","tags":[],"readingTime":4.935,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Dependency Injection in Flutter"},"prevItem":{"title":"Mews Challenge","permalink":"/blog/2019/10/14/mews-challenge"},"nextItem":{"title":"Multi-platform apps: are we there yet?","permalink":"/blog/2019/03/10/multiplatform"}},"content":"As I wrote in a [previous article](https://developers.mews.com/multiplatform-apps-are-we-there-yet/), we\u2019re experimenting with Flutter while developing our side project for step challenges with colleagues. This side project should also be considered as a playground, where we can check if we can use Flutter in more serious projects. That\u2019s why we want to use some approaches there that can look like an over-engineering for such a small project.\\n\\nSo one of the first questions was what can we use for dependency injection. A quick search in the internet revealed 2 libraries with positive reviews: [get_it](https://pub.dartlang.org/packages/get_it) and [kiwi](https://pub.dartlang.org/packages/kiwi). As `get_it` turned out to be a Service Locator (and I\u2019m not a fan of this pattern), I was going to play with `kiwi`, which looked more promising, but then I\u2019ve found another one library: [inject.dart](https://github.com/google/inject.dart). It is heavily inspired by Dagger library, and as we use the latest one in our other Android projects, I\u2019ve decided to dig into it.\\n\\n\x3c!--truncate--\x3e\\n\\nIt\u2019s worth saying that though this library is located in Google GitHub repository, it\u2019s not an official library from Google and no support is currently provided:\\n\\n> This library is currently offered as-is (developer preview) as it is open-sourced from an internal repository inside Google. As such we are not able to act on bugs or feature requests at this time.\\n\\nNevertheless it looks like the library does everything that we need for now, so I\u2019d like to share some info on how you can use this library in your project.\\n\\n## Installation\\n\\nAs there\u2019s no package in [official repository](https://pub.dartlang.org/), we have to install it manually. I prefer to do it as a git submodule, so I\u2019m creating a folder `vendor` in my project source directory and running the following command from this directory:\\n\\n```shell\\ngit submodule add https://github.com/google/inject.dart\\n```\\n\\nAnd now we can set it up by adding following lines into `pubspec.yaml`:\\n\\n```yaml\\ndependencies:\\n  // other dependencies here\\n  inject:\\n    path: ./vendor/inject.dart/package/inject\\n\\ndev_dependencies:\\n  // other dev_dependencies here\\n  build_runner: ^1.0.0\\n  inject_generator:\\n    path: ./vendor/inject.dart/package/inject_generator\\n```\\n\\n## Usage\\n\\nWhat functionality do we usually expect from a DI library? Let\u2019s go through some common use cases:\\n\\n### Concrete class injection\\n\\nIt can be as simple as this:\\n\\n```dart\\nimport \'package:inject/inject.dart\';\\n\\n@provide\\nclass StepService {\\n  // implementation\\n}\\nWe can use it e.g. with Flutter widgets like this:\\n\\n@provide\\nclass SomeWidget extends StatelessWidget {\\n  final StepService _service;\\n\\n  SomeWidget(this._service);\\n}\\n```\\n\\n### Interface injection\\n\\nFirst of all we need to define an abstract class with some implementation class, e.g.:\\n\\n```dart\\nabstract class UserRepository {\\n  Future<List<User>> allUsers();\\n}\\n\\nclass FirestoreUserRepository implements UserRepository {\\n  @override\\n  Future<List<User>> allUsers() {\\n    // implementation\\n  }\\n}\\n```\\n\\nAnd now we can provide dependencies in our module:\\n\\n```dart\\nimport \'package:inject/inject.dart\';\\n\\n@module\\nclass UsersServices {\\n  @provide\\n  UserRepository userRepository() => FirestoreUserRepository();\\n}\\n```\\n\\n### Providers\\n\\nWhat to do if we need not an instance of some class to be injected, but rather a provider, that will give us a new instance of this class each time? Or if we need to resolve the dependency lazily instead of getting concrete instance in constructor? I didn\u2019t find it neither in documentation (well, because there\u2019s no documentation at all) nor in provided examples, but it actually works this way that you can request a function returning the required instance and it will be injected properly.\\nWe can even define a helper type like this:\\n\\n```dart\\ntypedef Provider<T> = T Function();\\n```\\n\\nand use it in our classes:\\n\\n```dart\\n@provide\\nclass SomeWidget extends StatelessWidget {\\n  final Provider<StepService> _service;\\n\\n  SomeWidget(this._service);\\n\\n  void _someFunction() {\\n    final service = _service();\\n    // use service\\n  }\\n}\\n```\\n\\n### Assisted injection\\n\\nThere\u2019s no built in functionality to inject objects that require arguments known at runtime only, so we can use the common pattern with factories in this case: create a factory class that takes all the compile-time dependencies in constructor and inject it, and provide a factory method with runtime argument that will create a required instance.\\n\\n### Singletons, qualifiers and asynchronous injection\\n\\nYes, the library supports all of this. There\u2019s actually a good explanation in the official example.\\n\\n### Wiring it up\\n\\nThe final step in order to make everything work is to create an injector (aka component from Dagger), e.g. like this:\\n\\n```dart\\nimport \'main.inject.dart\' as g;\\n\\n@Injector(const [UsersServices, DateResultsServices])\\nabstract class Main {\\n  @provide\\n  MyApp get app;\\n  static Future<Main> create(\\n    UsersServices usersModule,\\n    DateResultsServices dateResultsModule,\\n  ) async {\\n    return await g.Main$Injector.create(\\n      usersModule,\\n      dateResultsModule,\\n    );\\n  }\\n}\\n```\\n\\nHere `UserServices` and `DateResultsServices` are previously defined modules, `MyApp` is the root widget of our application, and `main.inject.dart` is an auto-generated file (more on this later).\\n\\nNow we can define our main function like this:\\n\\n```dart\\nvoid main() async {\\n  var container = await Main.create(\\n    UsersServices(),\\n    DateResultsServices(),\\n  );\\n  runApp(container.app);\\n}\\n```\\n\\n## Running\\n\\nAs inject works with code generation, we need to use build runner to generate the required code. We can use this command:\\n\\n```shell\\nflutter packages pub run build_runner build\\n```\\n\\nor watch command in order to keep the source code synced automatically:\\n\\n```shell\\nflutter packages pub run build_runner watch\\n```\\n\\nBut there\u2019s one important moment here: by default the code will be generated into the cache folder and Flutter doesn\u2019t currently support this (though there\u2019s a work in progress in order to solve this problem). So we need to add the file `inject_generator.build.yaml` with the following content:\\n\\n```yaml\\nbuilders:\\n  inject_generator:\\n    target: \\":inject_generator\\"\\n    import: \\"package:inject_generator/inject_generator.dart\\"\\n    builder_factories:\\n      - \\"summarizeBuilder\\"\\n      - \\"generateBuilder\\"\\n    build_extensions:\\n      \\".dart\\":\\n        - \\".inject.summary\\"\\n        - \\".inject.dart\\"\\n    auto_apply: dependents\\n    build_to: source\\n```\\n\\nIt\u2019s actually the same content as in file `vendor/inject.dart/package/inject_generator/build.yaml` except for one line: `build_to: cache` has been replaced with `build_to: source`.\\n\\nNow we can run the `build_runner`, it will generate the required code (and provide error messages if some dependencies cannot be resolved) and after that we can run Flutter build as usual.\\n\\n## Profit\\n\\nThat\u2019s all. You should also check the examples provided with the library itself, and if you have some experience with Dagger library, inject will be really very familiar to you."},{"id":"/2019/03/10/multiplatform","metadata":{"permalink":"/blog/2019/03/10/multiplatform","source":"@site/blog/2019-03-10-multiplatform.md","title":"Multi-platform apps: are we there yet?","description":"The weekend was rather rainy, so I was playing with Flutter. Last time I\u2019ve tried it, it was still in beta (or even alpha?), so I was interested if it finally became useful for building multi-platform apps.","date":"2019-03-10T00:00:00.000Z","formattedDate":"March 10, 2019","tags":[],"readingTime":4.3,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Multi-platform apps: are we there yet?"},"prevItem":{"title":"Dependency Injection in Flutter","permalink":"/blog/2019/03/26/flutter-di"},"nextItem":{"title":"\u041e \u0447\u0435\u043c \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 developer.android.com \u043f\u0440\u043e RecyclerView","permalink":"/blog/2018/11/22/recycler-view"}},"content":"The weekend was rather rainy, so I was playing with Flutter. Last time I\u2019ve tried it, it was still in beta (or even alpha?), so I was interested if it finally became useful for building multi-platform apps.\\n\\nI\u2019ve decided to re-make our MileFarClub app (it\u2019s our internal side project for tracking steps and competing with colleagues). Here\u2019s what I was able to achieve while investing into it several hours for 2 days:\\n\\n\x3c!--truncate--\x3e\\n\\n- Initial screen with authorization by google account, requesting permissions from Google Fit on Android and Health Kit on iOS.\\n- Main screen with displaying user information and total/today steps count.\\n- Rank screen with the list of users and their total results.\\n- All the data are read-only for now, but it\u2019s not a problem to add cross-platform updating as well. Due to the fact that we\u2019re using different sources of activity information (Google Fit vs Health Kit) it\u2019s not possible to make it totally cross-platform, so this part needs to be implemented separately. Same with background notifications and updates, as the process differs a lot between these 2 platforms.\\n\\nOverall impressions from Flutter is rather positive, I was able to share 100% of UI code and some high-level logic. Integrating with native code was rather smooth as well, so it\u2019s not a problem to write some mini-plugin to use native solution for each platform. Even Dart has become more usable as a language \ud83d\ude03.\\n\\nI definitely like it more than React Native, because e.g.:\\n\\n- it really compiles into native code without using bridge to JavaScript, so performance is the same as of native app, especially regarding animations;\\n- it uses its own widget library, so it\u2019s not a problem to create brand-oriented UI that looks the same on both platforms (at the same time it\u2019s not a problem to use different look&feel on each platform due to the standard library including both Material and Cupertino widgets) \u2013 while React Native uses standard widgets of each platform.\\n\\nYes, the project is way too simple to say something for sure, so I will definitely invest more time in exploring it, but for now it looks like the most promising solution for the near future, when comparing to the other ones:\\n\\n- React Native \u2013 I\u2019ve already wrote about it.\\n- Xamarin \u2013 it\u2019s really cool, but after MS abandons Windows Phone I\u2019m slightly afraid of Xamarin being abandoned as well;\\n- Kotlin Multiplatform \u2013 looks very good (and it\u2019s Kotlin \u2764\ufe0f), but it\u2019s too raw and not ready for production yet, it needs at least several more years to become production ready.\\n\\nBesides that there\u2019re rumors about Google replacing Android with Fuchsia, and Flutter is the only native framework for it. Although I\u2019m pretty sure that Google will provide some tool to convert Android app into Fuchsia app or there will be some VM to run Android apps (even Google isn\u2019t crazy enough to kill OS with ~90% of market), but still adopting native solution in its early stage can be useful.\\n\\nP.S. For a really long time I hope to find some solution to build high-quality cross platform apps and at the same time being rather sceptical about available options. I think I\u2019ve tried almost all of them: Titanium, Phonegap, Ionic, React Native, Kotlin Multiplatform, Xamarin, Flutter\u2026 you name it. There always was some discomfort with them, so every time I was returning to native development. But I guess now I\u2019ve found the reason of this discomfort: when they say, that with This-One-Universal-Framework-To-Rule-Them-All you don\'t need to have experience with iOS/Android native development at all \u2013 no, it won\u2019t work. It can be useful only when you team has experience with developing native apps. So this equation:\\n\\n```\\n2 Flutter guys = 2 Android guys + 2 iOS guys\\n```\\n\\nis totally wrong, but this one:\\n\\n```\\n1 Flutter guy + 1 Android guy + 1 iOS guy = 2 Android guys + 2 iOS guys\\n```\\n\\nlooks more like a truth for me.\\n\\nAnd you still have a benefit, because 3-person team will be as productive as 4-person one (well, yeah, it\u2019s only my theory for now), but you **need** to have developers in you team who know native development for each platform.\\n\\nAnd I believe that cross-platform will eventually win, mainly because (yes, I\u2019m quoting an official Flutter FAQ, so you can argue about these points being slightly opinionated, but I agree with them):\\n\\n- Modern app design trends point towards designers and users wanting more motion-rich UIs and brand-first designs. In order to achieve that level of customized, beautiful design, Flutter is designed to drive pixels instead of the OEM widgets.\\n- By using the same renderer, framework, and set of widgets, it\u2019s easier to publish for both iOS and Android concurrently, without having to do careful and costly planning to align two separate codebases and feature sets.\\n- By using a single language, a single framework, and a single set of libraries for all of your UI (regardless if your UI is different for each mobile platform or largely consistent), we also aim to help lower app development and maintenance costs."},{"id":"/2018/11/22/recycler-view","metadata":{"permalink":"/blog/2018/11/22/recycler-view","source":"@site/blog/2018-11-22-recycler-view.md","title":"\u041e \u0447\u0435\u043c \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 developer.android.com \u043f\u0440\u043e RecyclerView","description":"\u041d\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u044c\u0438 \u043c\u0435\u043d\u044f \u043f\u043e\u0434\u0442\u043e\u043b\u043a\u043d\u0443\u043b \u044d\u0442\u043e\u0442 \u043f\u043e\u0441\u0442 (\u0430 \u0442\u043e\u0447\u043d\u0435\u0435, \u0442\u043e \u0447\u0443\u0432\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u043a\u043e\u0433\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b \u0432 \u0440\u0430\u0439\u043e\u043d\u0435... \u0445\u043c, \u043f\u043e\u044f\u0441\u043d\u0438\u0446\u044b, \u043e\u0431\u044b\u0447\u043d\u043e \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0435\u0435, \u043a\u043e\u0433\u0434\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435 \u043a\u0442\u043e-\u0442\u043e \u043d\u0435\u043f\u0440\u0430\u0432).","date":"2018-11-22T00:00:00.000Z","formattedDate":"November 22, 2018","tags":[],"readingTime":3.075,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u041e \u0447\u0435\u043c \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 developer.android.com \u043f\u0440\u043e RecyclerView"},"prevItem":{"title":"Multi-platform apps: are we there yet?","permalink":"/blog/2019/03/10/multiplatform"},"nextItem":{"title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u043b\u043e\u0433\u0430 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u0430","permalink":"/blog/2018/07/22/ringtone"}},"content":"\u041d\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u044c\u0438 \u043c\u0435\u043d\u044f \u043f\u043e\u0434\u0442\u043e\u043b\u043a\u043d\u0443\u043b [\u044d\u0442\u043e\u0442 \u043f\u043e\u0441\u0442](https://habr.com/post/430402/) (\u0430 \u0442\u043e\u0447\u043d\u0435\u0435, \u0442\u043e \u0447\u0443\u0432\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u043a\u043e\u0433\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b \u0432 \u0440\u0430\u0439\u043e\u043d\u0435... \u0445\u043c, \u043f\u043e\u044f\u0441\u043d\u0438\u0446\u044b, \u043e\u0431\u044b\u0447\u043d\u043e \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0435\u0435, \u043a\u043e\u0433\u0434\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435 \u043a\u0442\u043e-\u0442\u043e \u043d\u0435\u043f\u0440\u0430\u0432).\\n\\n\u041d\u0430\u0447\u043d\u0435\u043c \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043d\u0430\u0447\u0430\u043b\u0430. \u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0433\u043b\u0430\u0441\u0435\u043d, \u0447\u0442\u043e _\\"\u043c\u0435\u0436\u0434\u0443 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0438 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 RecyclerView \u0435\u0441\u0442\u044c \u043d\u0435\u0447\u0442\u043e \u043e\u0431\u0449\u0435\u0435\\"_ \u2013 \u044d\u0442\u043e \\"\u043d\u0435\u0447\u0442\u043e\\" \u2013 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c, \u0447\u0442\u043e \u043c\u044b \u0434\u0435\u043b\u0430\u0435\u043c \u0438 \u0437\u0430\u0447\u0435\u043c. \u0418 \u0447\u0438\u0442\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e. \u0410 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0434\u0432\u0443\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u043a\u0430\u043a \u0438 \u0441\u043e\u043d \u0440\u0430\u0437\u0443\u043c\u0430, \u0440\u043e\u0436\u0434\u0430\u0435\u0442 \u043c\u043e\u043d\u0441\u0442\u0440\u043e\u0432. \u0422\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0442 \u0441 \u0442\u0435\u043c, \u043a\u0430\u043a \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0441 \u044d\u0442\u0438\u043c\u0438 \u043c\u043e\u043d\u0441\u0442\u0440\u0430\u043c\u0438 \u0431\u043e\u0440\u043e\u0442\u044c\u0441\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0430\u0432\u0442\u043e\u0440, \u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435 \u0441\u043e\u0433\u043b\u0430\u0441\u0435\u043d.\\n\\n\x3c!--truncate--\x3e\\n\\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c 2 \u0443\u0441\u043b\u043e\u0432\u0438\u044f.\\n\\n## \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u2116 \u0440\u0430\u0437\\n\\n\u0415\u0441\u043b\u0438 \u0432\u044b \u0433\u0434\u0435-\u0442\u043e \u043d\u0430\u0432\u0435\u0448\u0438\u0432\u0430\u0435\u0442\u0435 listener, \u0442\u043e \u0433\u0434\u0435-\u0442\u043e \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0435\u0433\u043e \u043e\u0442\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c. \u0414\u0435\u043b\u0430\u044e\u0442 \u044d\u0442\u043e \u043e\u0431\u044b\u0447\u043d\u043e \u0432 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 \u2013 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432 `onViewAttachedToWindow`, \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0432 `onViewDetachedFromWindow`. \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432 `onBindViewHolder`... \u041d\u0435 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432 `onBindViewHolder`. \u042d\u0442\u043e\u0442 \u0432\u044b\u0437\u043e\u0432 \u043d\u0435 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u044b\u0439, \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439. \u041d\u0435 \u043d\u0430\u0434\u043e \u0443\u0441\u043b\u043e\u0436\u043d\u044f\u0442\u044c \u0441\u0435\u0431\u0435 \u0436\u0438\u0437\u043d\u044c.\\n\\n\u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u0430\u043c, \u043a\u0430\u043a \u0438 \u0430\u0432\u0442\u043e\u0440\u0443 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0438 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0432 \u0433\u043e\u043b\u043e\u0432\u0443 \u043c\u044b\u0441\u043b\u044c: _\\"\u041d\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0438, \u043a\u043e\u0433\u0434\u0430... \u0432 \u0441\u043b\u0443\u0448\u0430\u0442\u0435\u043b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435, \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 onBindViewHolder() \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 onViewAttachedToWindow()\\"_, \u0442\u043e \u0433\u043e\u043d\u0438\u0442\u0435 \u044d\u0442\u0443 \u043c\u044b\u0441\u043b\u044c \u043f\u0440\u043e\u0447\u044c. \u0422\u0430\u043a \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f. \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0447\u0435\u0442\u0441\u044f. \u041a\u0430\u043a \u0441\u043a\u0430\u0437\u0430\u043d\u043e \u0432 [\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#onbindviewholder), \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d, \u0435\u0441\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e **\u043f\u043e\u0437\u0438\u0446\u0438\u044f** \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u043d\u043e \u043d\u0435 \u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0440\u0438\u0441\u043a\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0448\u0430\u0442\u0435\u043b\u0435 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 `getAdapterPosition`.\\n\\n## \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u2116 \u0434\u0432\u0430\\n\\n`RecyclerView` \u2013 \u0448\u0442\u0443\u043a\u0430 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u0430\u044f. \u041d\u0435 \u043d\u0430\u0434\u043e \u0443\u0441\u043b\u043e\u0436\u043d\u044f\u0442\u044c \u0441\u0435\u0431\u0435 \u0436\u0438\u0437\u043d\u044c \u0435\u0449\u0435 \u0431\u043e\u043b\u044c\u0448\u0435. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0432\u0430\u043c **\u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c** \u0432\u0430\u0436\u043d\u043e, \u043f\u043e\u043f\u0430\u043b \u044d\u0442\u043e\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u043f\u0443\u043b \u0438\u043b\u0438 \u043d\u0435\u0442.\\n\\n## \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\\n\\n\u041f\u0440\u0438 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0438 \u044d\u0442\u0438\u0445 \u0434\u0432\u0443\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u0432\u0430\u043c \u0432\u0440\u044f\u0434 \u043b\u0438 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u0442\u0430\u0442\u044c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434 \u0432 \u0432\u0438\u0434\u0435 \u0444\u043b\u0430\u0433\u0430 \u0442\u0438\u043f\u0430 `viewWasRecycled`.\\n\\n## \u0427\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442?\\n\\n\u0427\u0442\u043e \u0432\u043e\u043e\u0431\u0449\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0432 `RecyclerView`? \u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u043d\u0430\u0434\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u0435\u0441\u0442\u044c 2 \\"\u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430\\" \u2013 \u043a\u044d\u0448 \u0438 \u043f\u0443\u043b. \u0412 \u043a\u044d\u0448 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442, \u0435\u0441\u043b\u0438 \u043e\u043d \u0443\u0448\u0435\u043b \u0437\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u044d\u043a\u0440\u0430\u043d\u0430, \u043d\u043e \u0432 \u043b\u044e\u0431\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0441\u043d\u043e\u0432\u0430 \u2013 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u0430\u0436\u0435 \u043d\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u044d\u0442\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 (\u0442.\u0435. \u043c\u0435\u0442\u043e\u0434 `onBindViewHolder` \u0432\u044b\u0437\u0432\u0430\u043d **\u043d\u0435 \u0431\u0443\u0434\u0435\u0442**). \u0415\u0441\u043b\u0438 \u043a\u044d\u0448 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0441\u044f, \u0438\u043b\u0438 **\u043f\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u0440\u0438\u0447\u0438\u043d\u0435** `RecyclerView` \u0440\u0435\u0448\u0438\u043b, \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430\u043c \u0432 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f, \u043e\u043d \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0432 \u043f\u0443\u043b (\u0432\u043e\u0442 \u0437\u0434\u0435\u0441\u044c \u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d `onViewRecycled`). \u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0438\u0437 \u043f\u0443\u043b\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d (\u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0435\u0433\u043e \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c), \u0438 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0432\u044b\u0437\u043e\u0432 `onBindViewHolder`. \u0410 \u0432\u043e\u0442 \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0443\u0448\u0435\u043b \u0438 \u0438\u0437 \u043f\u0443\u043b\u0430, \u0442\u043e\u0433\u0434\u0430 \u043d\u043e\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u0440\u043e\u0439\u0434\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 \u0432\u0435\u0441\u044c \u0446\u0438\u043a\u043b \u2013 `onCreateViewHolder`, `onBindViewHolder`, `onViewAttachedToWindow`.\\n\\n\u0418\u0442\u043e\u0433\u043e, \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c 3 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439:\\n\\n- \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0440\u0430\u043d\u044c\u0448\u0435 \u043d\u0435 \u0431\u044b\u043b\u043e: \u0441\u043e\u0437\u0434\u0430\u0435\u043c, \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c, \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c;\\n- \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0431\u044b\u043b \u0432 \u043f\u0443\u043b\u0435: \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c, \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c;\\n- \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0431\u044b\u043b \u0432 \u043a\u044d\u0448\u0435: \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c.\\n\\n## \u0413\u0434\u0435 \u0438 \u043a\u0430\u043a?\\n\\n\u0427\u0442\u043e \u0438 \u043d\u0430 \u043a\u0430\u043a\u0438\u0445 \u044d\u0442\u0430\u043f\u0430\u0445 \u043b\u0443\u0447\u0448\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c?\\n\\n- `onCreateViewHolder`. \u0421\u043e\u0437\u0434\u0430\u0435\u043c, \u0445\u043c, `ViewHolder`. \u041d\u0435 \u043d\u0430\u0434\u043e \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0442\u044c listener, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u043e\u043c \u0438 \u0442.\u0434. \u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u0442\u0438\u043f \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0435\u0433\u043e.\\n- `onBindViewHolder`. \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0443 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u2013 \u0442\u0435\u043a\u0441\u0442, \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `position` \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u0430\u043c\u043e\u043c \u043c\u0435\u0442\u043e\u0434\u0435 \u2013 \u043d\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0435\u0433\u043e, \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0437\u0430\u043c\u044b\u043a\u0430\u043d\u0438\u044f, \u043f\u043e\u043c\u043d\u0438\u043c, \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u0435\u0449\u0435 \u0440\u0430\u0437 \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0435 (\u0438 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442, \u0435\u0441\u043b\u0438 \u043f\u043e\u043c\u0435\u043d\u044f\u043b\u043e\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435). Listener \u044f \u0431\u044b \u0442\u043e\u0436\u0435 \u043d\u0435 \u0441\u0442\u0430\u043b \u0437\u0434\u0435\u0441\u044c \u043d\u0430\u0432\u0435\u0448\u0438\u0432\u0430\u0442\u044c \u2013 \u0438\u0437 \u0441\u043e\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0438.\\n- `onViewAttachedToWindow`. \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u0431\u0443\u0434\u0435\u0442 \u0441\u0435\u0439\u0447\u0430\u0441 \u0432\u0438\u0434\u0435\u043d \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043c\u043e\u0436\u0435\u0442 \u0441 \u043d\u0438\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u2013 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c listener. \u041f\u043e\u043c\u043d\u0438\u043c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u043d\u0435\u0433\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0435\u0435 \u0447\u0435\u0440\u0435\u0437 `getAdapterPosition`.\\n- `onViewDetachedFromWindow`. \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442 \u0441 \u043d\u0438\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c. \u0423\u0431\u0438\u0440\u0430\u0435\u043c listener.\\n- `onViewRecycled`. \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 ~~\u0430\u0434~~ \u043f\u0443\u043b. \u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0432\u043e\u0431\u043e\u0434\u0438\u0442\u044c \u0442\u044f\u0436\u0435\u043b\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b (\u0437\u0430\u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440). \u0415\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u2013 \u0442\u043e, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438.\\n\\n\u0412\u043e\u0442 \u0432\u0440\u043e\u0434\u0435 \u0431\u044b \u0438 \u0432\u0441\u0451. \u041d\u0430\u0434\u0435\u044e\u0441\u044c, \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u043b \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043f\u0443\u0442\u0430\u043b, \u043d\u043e \u0435\u0441\u043b\u0438 \u0447\u0442\u043e \u2013 \u0442\u044b\u043a\u0430\u0439\u0442\u0435 \u043d\u043e\u0441\u043e\u043c, \u043d\u0435 \u0441\u0442\u0435\u0441\u043d\u044f\u0439\u0442\u0435\u0441\u044c."},{"id":"/2018/07/22/ringtone","metadata":{"permalink":"/blog/2018/07/22/ringtone","source":"@site/blog/2018-07-22-ringtone/index.md","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u043b\u043e\u0433\u0430 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u0430","description":"\u041f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u043c\u043d\u0435 \u0442\u0443\u0442 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0434\u0438\u0430\u043b\u043e\u0433 \u0441 \u0432\u044b\u0431\u043e\u0440\u043e\u043c \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u0430 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445. \u0421\u0440\u0430\u0437\u0443 \u043f\u043e 2 \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c \u2013 \u0432\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u0432 support library RingtonePreference \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0442\u0430\u043a \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0434\u0438\u0430\u043b\u043e\u0433 \u0432 PreferenceFragmentCompat \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f. \u0410 \u0432\u043e-\u0432\u0442\u043e\u0440\u044b\u0445, \u043c\u043d\u0435 \u043d\u0430\u0434\u043e \u0431\u044b\u043b\u043e \u0442\u0443\u0434\u0430 \u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c \u043c\u0435\u043b\u043e\u0434\u0438\u044f\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0432\u0443\u043a\u043e\u0432 \u0438\u0437 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. \u0422\u0430\u043a \u0447\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u0431\u044b\u043b\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0434\u0438\u0430\u043b\u043e\u0433.","date":"2018-07-22T00:00:00.000Z","formattedDate":"July 22, 2018","tags":[],"readingTime":4.155,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u043b\u043e\u0433\u0430 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u0430"},"prevItem":{"title":"\u041e \u0447\u0435\u043c \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 developer.android.com \u043f\u0440\u043e RecyclerView","permalink":"/blog/2018/11/22/recycler-view"},"nextItem":{"title":"Developing a Kiosk Application","permalink":"/blog/2018/07/19/developing-kiosk"}},"content":"\u041f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u043c\u043d\u0435 \u0442\u0443\u0442 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0434\u0438\u0430\u043b\u043e\u0433 \u0441 \u0432\u044b\u0431\u043e\u0440\u043e\u043c \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u0430 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445. \u0421\u0440\u0430\u0437\u0443 \u043f\u043e 2 \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c \u2013 \u0432\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u0432 support library `RingtonePreference` \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0442\u0430\u043a \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0434\u0438\u0430\u043b\u043e\u0433 \u0432 `PreferenceFragmentCompat` \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f. \u0410 \u0432\u043e-\u0432\u0442\u043e\u0440\u044b\u0445, \u043c\u043d\u0435 \u043d\u0430\u0434\u043e \u0431\u044b\u043b\u043e \u0442\u0443\u0434\u0430 \u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c \u043c\u0435\u043b\u043e\u0434\u0438\u044f\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0432\u0443\u043a\u043e\u0432 \u0438\u0437 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. \u0422\u0430\u043a \u0447\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u0431\u044b\u043b\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0434\u0438\u0430\u043b\u043e\u0433.\\n\\n\x3c!--truncate--\x3e\\n\\n\u041f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u0434\u0438\u0430\u043b\u043e\u0433\u0430 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u044d\u043a\u0440\u0430\u043d\u0435 \u0435\u0441\u0442\u044c \u043a\u043d\u043e\u043f\u043a\u0430 \\"Play ringtone\\", \u043d\u0430\u0436\u0430\u0442\u0438\u0435 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u0440\u0438\u043d\u0433\u0442\u043e\u043d, \u0438 \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438:\\n\\n![](ringtone_1.png)\\n\\n\u042f \u043d\u0435 \u0431\u0443\u0434\u0443 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0434\u0432\u0443\u0445 \u044d\u043a\u0440\u0430\u043d\u043e\u0432 \u2013 \u0442\u0430\u043c \u0432\u0441\u0435 \u043a\u0430\u043a \u0432\u0441\u0435\u0433\u0434\u0430. \u041d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0432 \u043a\u043e\u043d\u0446\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441 \u043a\u043e\u0434\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\\n\\n\u0418\u0442\u0430\u043a, \u043d\u0430\u0447\u043d\u0435\u043c \u0441 xml-\u0444\u0430\u0439\u043b\u0430 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u044d\u043a\u0440\u0430\u043d\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a. \u0420\u0430\u0437\u043c\u0435\u0441\u0442\u0438\u043c \u0444\u0430\u0439\u043b `settings.xml` \u0432 `res/xml` \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c:\\n\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<PreferenceScreen xmlns:android=\\"http://schemas.android.com/apk/res/android\\">\\n    <Preference\\n            android:key=\\"ringtone\\"\\n            android:title=\\"Ringtone\\"/>\\n</PreferenceScreen>\\n```\\n\\n\u0418 \u0442\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u044d\u0442\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432 \u043d\u0430\u0448 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442:\\n\\n```kotlin\\nclass SettingsFragment : PreferenceFragmentCompat() {\\n    override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\\n        setPreferencesFromResource(R.xml.settings, rootKey)\\n    }\\n}\\n```\\n\\n\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c, \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u044d\u043a\u0440\u0430\u043d \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438, \u0432\u0438\u0434\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435:\\n\\n![](ringtone_2.png)\\n\\n\u0412\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u044d\u0442\u043e\u043c \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u043c, \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u0446\u0435\u043b\u0438 \u0441\u0442\u0430\u0442\u044c\u0438. \u041f\u043b\u0430\u043d \u0442\u0430\u043a\u043e\u0439: \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 \\"Ringtone\\" \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u0438\u0430\u043b\u043e\u0433 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u043e\u0432 \u0438 \u043a\u043d\u043e\u043f\u043a\u0430\u043c\u0438 OK \u0438 Cancel, \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u0435 \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u0430 \u043e\u043d \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f (\u043a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e `RingtonePreference`), \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 OK \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445.\\n\\n\u0418\u0442\u0430\u043a, \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442:\\n\\n```kotlin\\nclass RingtonePreferenceDialog : DialogFragment() {\\n    private val prefKey: String\\n        get() = arguments?.getString(ARG_PREF_KEY) ?: throw IllegalArgumentException(\\"ARG_PREF_KEY not set\\")\\n\\n    companion object {\\n        private const val ARG_PREF_KEY = \\"ARG_PREF_KEY\\"\\n\\n        fun create(prefKey: String): RingtonePreferenceDialog {\\n            val fragment = RingtonePreferenceDialog()\\n            fragment.arguments = Bundle().apply {\\n                putString(ARG_PREF_KEY, prefKey)\\n            }\\n            return fragment\\n        }\\n    }\\n}\\n```\\n\\n\u0412 `prefKey` \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043a\u043b\u044e\u0447, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u0442 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0440\u0438\u043d\u0433\u0442\u043e\u043d, \u0438 \u0442\u0443\u0434\u0430 \u0436\u0435 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043a\u043d\u043e\u043f\u043a\u0438 OK.\\n\\n\u0414\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 `Ringtone`, \u043e\u0431\u044a\u044f\u0432\u0438\u043c \u0435\u0433\u043e \u0432\u043d\u0443\u0442\u0440\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430:\\n\\n```kotlin\\nprivate data class Ringtone(val title: String, val uri: Uri)\\n```\\n\\n\u0418 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0442\u0430\u0449\u0438\u0442 \u0432\u0441\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u044b \u0432 \u0410\u043d\u0434\u0440\u043e\u0438\u0434\u0435, \u0438 \u0432\u0435\u0440\u043d\u0435\u0442 \u043d\u0430\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 `Ringtone`:\\n\\n```kotlin\\nprivate fun getAndroidRingtones(): List<Ringtone> {\\n    val ringtoneManager = RingtoneManager(context)\\n    val cursor = ringtoneManager.cursor\\n    return (0 until cursor.count).map {\\n        cursor.moveToPosition(it)\\n        Ringtone(\\n                title = cursor.getString(RingtoneManager.TITLE_COLUMN_INDEX),\\n                uri = ringtoneManager.getRingtoneUri(it)\\n        )\\n    }\\n}\\n```\\n\\n\u0417\u0434\u0435\u0441\u044c `ringtoneManager.cursor` \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u0443\u0440\u0441\u043e\u0440 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c\u0438 \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u0430\u043c\u0438, \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0432\u0441\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c \u0438 \u043c\u0430\u043f\u0438\u043c \u0438\u0445 \u0432 \u043d\u0430\u0448 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 `Ringtone` (\u0442\u0430\u043a \u0441 \u043d\u0438\u043c\u0438 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c).\\n\\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u043e\u0432 \u2013 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0442\u043e\u043c \u043d\u0430\u0448\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0431\u0443\u0434\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0438\u0430\u043b\u043e\u0433, \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044f \u043c\u0435\u0442\u043e\u0434 `onCreateDialog`:\\n\\n```kotlin\\nprivate var ringtones: List<Ringtone> = emptyList()\\nprivate var currentUri: Uri? = null\\n\\noverride fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\\n    ringtones = getAndroidRingtones()\\n    currentUri = getCurrentRingtoneUri()\\n    val currentPosition = ringtones.indexOfFirst { currentUri == it.uri }\\n    return AlertDialog.Builder(context!!)\\n            .setPositiveButton(android.R.string.ok) { _, _ -> saveCurrentUri() }\\n            .setNegativeButton(android.R.string.cancel) { _, _ -> dialog.dismiss() }\\n            .setSingleChoiceItems(adapter, currentPosition) { _, which ->\\n                currentUri = ringtones[which].uri\\n            }\\n            .create()\\n}\\n```\\n\\n\u0410\u0434\u0430\u043f\u0442\u0435\u0440 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0434\u0438\u0430\u043b\u043e\u0433\u0435, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0430\u043a:\\n\\n```kotlin\\nprivate val adapter by lazy {\\n    SimpleAdapter(\\n            context,\\n            ringtones.map { mapOf(\\"title\\" to it.title) },\\n            R.layout.simple_list_item_single_choice,\\n            arrayOf(\\"title\\"),\\n            intArrayOf(R.id.text1)\\n    )\\n}\\n```\\n\\n\u0418 \u043d\u0443\u0436\u0435\u043d \u0435\u0449\u0435 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 (\u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 OK):\\n\\n```kotlin\\nprivate fun saveCurrentUri() {\\n    PreferenceManager.getDefaultSharedPreferences(context)\\n            .edit()\\n            .putString(prefKey, currentUri?.toString())\\n            .apply()\\n}\\n```\\n\\n\u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u0442\u044c \u043d\u0430\u0448 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a \u0434\u0438\u0430\u043b\u043e\u0433\u0443, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u043c:\\n\\n```kotlin\\nfun Preference.connectRingtoneDialog(fragmentManager: FragmentManager?) = setOnPreferenceClickListener {\\n    RingtonePreferenceDialog.create(key).apply {\\n        fragmentManager?.let { show(it, \\"SOUND\\") }\\n    }\\n    true\\n}\\n```\\n\\n\u0418 \u0434\u043e\u0431\u0430\u0432\u0438\u043c `findPreference(\\"ringtone\\").connectRingtoneDialog(fragmentManager)` \u0432 \u043d\u0430\u0448 `SettingsFragment`, \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a:\\n\\n```kotlin\\nclass SettingsFragment : PreferenceFragmentCompat() {\\n    override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\\n        setPreferencesFromResource(R.xml.settings, rootKey)\\n        findPreference(\\"ringtone\\").connectRingtoneDialog(fragmentManager)\\n    }\\n}\\n```\\n\\n\u0415\u0441\u043b\u0438 \u043c\u044b \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u0438 \u043d\u0430\u0436\u043c\u0435\u043c \u043d\u0430 \\"Ringtone\\", \u0442\u043e \u0443\u0432\u0438\u0434\u0438\u043c \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0435:\\n\\n![](ringtone_3.png)\\n\\n\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u044b \u0438\u0437 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0434\u0438\u0430\u043b\u043e\u0433\u0443. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0440\u0438\u043d\u0433\u0442\u043e\u043d `sample.mp3` \u0432 \u043f\u0430\u043f\u043a\u0435 `res/raw`, \u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u043f\u0438\u0441\u043a\u0430. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u043c\u0435\u0442\u043e\u0434 \u0432 \u043a\u043b\u0430\u0441\u0441 \u0434\u0438\u0430\u043b\u043e\u0433\u0430:\\n\\n```kotlin\\nprivate fun getResourceRingtones(): List<Ringtone> = listOf(\\n        Ringtone(\\n                title = \\"Sample ringtone\\",\\n                uri = Uri.parse(\\"${ContentResolver.SCHEME_ANDROID_RESOURCE}://${context!!.packageName}/raw/sample\\")\\n        )\\n)\\n```\\n\\n\u0418 \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u0447\u043a\u0443 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 `onCreateDialog`:\\n\\n```kotlin\\nringtones = getResourceRingtones() + getAndroidRingtones()\\n```\\n\\n\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c, \u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0440\u0430\u0434\u0443\u0435\u043c\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0435 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e:\\n\\n![](ringtone_4.png)\\n\\n\u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \\"\u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\\" \u0434\u043b\u044f \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u043e\u0432. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u0432\u0435\u0434\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435:\\n\\n```kotlin\\nprivate var playingRingtone: android.media.Ringtone? = null\\n```\\n\\n\u0418 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043c callback-\u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f `setSingleChoiceItems`:\\n\\n```kotlin\\nplayingRingtone?.stop()\\nringtones[which].also {\\n    currentUri = it.uri\\n    playingRingtone = it.uri?.let { RingtoneManager.getRingtone(context, it) }\\n    playingRingtone?.play()\\n}\\n```\\n\\n\u0427\u0442\u043e \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442: \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u0430 (\u0435\u0441\u043b\u0438 \u043e\u043d \u043d\u0435 null), \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435. \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u0435 \u0440\u0438\u043d\u0442\u043e\u043d\u0430 \u0432 \u0434\u0438\u0430\u043b\u043e\u0433\u0435 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f. \u0427\u0442\u043e\u0431\u044b \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0438 \u0434\u0438\u0430\u043b\u043e\u0433\u0430, \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043c\u0435\u0442\u043e\u0434 `onPause`:\\n\\n```kotlin\\noverride fun onPause() {\\n    super.onPause()\\n    playingRingtone?.stop()\\n}\\n```\\n\\n\u041d\u0443 \u0438 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u0442\u044c \u043a\u043d\u043e\u043f\u043a\u0443 \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u044d\u043a\u0440\u0430\u043d\u0435 \u043a \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0430\u043a:\\n\\n```kotlin\\nfindViewById<Button>(R.id.playRingtone).setOnClickListener {\\n    val ringtone = PreferenceManager.getDefaultSharedPreferences(this)\\n            .getString(\\"ringtone\\", null)\\n            ?.let { RingtoneManager.getRingtone(this, Uri.parse(it)) }\\n    if (ringtone == null) {\\n        Toast.makeText(this, \\"Select ringtone in settings\\", Toast.LENGTH_SHORT).show()\\n    } else {\\n        ringtone.play()\\n    }\\n}\\n```\\n\\n\u0412\u043e\u0442 \u0438 \u0432\u0441\u0435. \u041a\u0430\u043a \u0438 \u043e\u0431\u0435\u0449\u0430\u043b, \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c [\u0437\u0434\u0435\u0441\u044c](https://github.com/ookami-kb/RingtoneDialog)."},{"id":"/2018/07/19/developing-kiosk","metadata":{"permalink":"/blog/2018/07/19/developing-kiosk","source":"@site/blog/2018-07-19-developing-kiosk.md","title":"Developing a Kiosk Application","description":"In this article, I\'ll show how to turn your Android application into Kiosk App.","date":"2018-07-19T00:00:00.000Z","formattedDate":"July 19, 2018","tags":[],"readingTime":4.73,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Developing a Kiosk Application"},"prevItem":{"title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u043b\u043e\u0433\u0430 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u0440\u0438\u043d\u0433\u0442\u043e\u043d\u0430","permalink":"/blog/2018/07/22/ringtone"},"nextItem":{"title":"Rounded image view in Android","permalink":"/blog/2018/03/02/rounded-images"}},"content":"In this article, I\'ll show how to turn your Android application into Kiosk App.\\n\\n:::info\\n\\nKiosk App is a special type of application that is designed to always run fullscreen and does not allow the user to exit the app.\\n\\n:::\\n\\n\x3c!--truncate--\x3e\\n\\nIn order to achieve that, we need to set our app a device owner.\\n\\n## Why Do I Need This?\\n\\nThe main point of a Kiosk App is that the user has no way to exit your app \u2013 a device is locked to use only your app. This feature exists natively starting with Android 5.0 and is called Lock task mode: with lock task mode, a user can\u2019t escape the app and the Home and Recents buttons are hidden. But only apps whitelisted by DPC (device policy controller) can be locked.\\n\\nWhile you can use a third-party enterprise mobility management (EMM) solution to enable lock task mode (and do another fancy stuff), that can be an overkill in case you just need a single-purpose device \u2013 you either have to pay to EMM provider or become an EMM provider yourself (which is not an easy way).\\n\\n## What Will I Need?\\n\\nFor developing purposes, any device with Android >= 5.0 will be ok, device owner mode can be set up with `adb` command. However, in order to provision device in real life, you will need a clean (or factory reset) device with Android >= 7.0 (actually 5.0-6.0 _can_ be put into device owner mode, but only using NFC \u2013 so you will need 2 devices with NFC support, one of them should use _NFC programmer app_ which needs to be written separately. In this article, we will talk about the simpler method with QR-code, but it\'s supported starting with Android 7.0 only \u2013 well, the good news about enterprise development is that you _can_ control what devices will be used).\\n\\nYou will also need to register admin receiver: it will get a notification when the app is put into device owner mode. It can be as simple as that:\\n\\n```kotlin\\npackage com.example.ookami.myapplication\\n\\nimport android.app.admin.DeviceAdminReceiver\\nimport android.app.admin.DevicePolicyManager\\nimport android.content.ComponentName\\nimport android.content.Context\\nimport android.content.Intent\\n\\nclass AdminReceiver : DeviceAdminReceiver() {\\n    override fun onEnabled(context: Context, intent: Intent?) {\\n        super.onEnabled(context, intent)\\n        val manager = context.getSystemService(Context.DEVICE_POLICY_SERVICE) as DevicePolicyManager\\n        val component = ComponentName(context.applicationContext, AdminReceiver::class.java)\\n        manager.setLockTaskPackages(component, arrayOf(context.packageName))\\n    }\\n}\\n```\\n\\nIn this code, we\'re granting permission to our app to enter lock task mode.\\n\\nRegister this receiver in `AndroidManifest`:\\n\\n```xml\\n<receiver\\n        android:name=\\".AdminReceiver\\"\\n        android:permission=\\"android.permission.BIND_DEVICE_ADMIN\\">\\n    <meta-data\\n            android:name=\\"android.app.device_admin\\"\\n            android:resource=\\"@xml/device_admin\\"/>\\n    <intent-filter>\\n        <action android:name=\\"android.app.action.DEVICE_ADMIN_ENABLED\\"/>\\n    </intent-filter>\\n</receiver>\\n```\\n\\nAnd add file `device_admin.xml` to `res/xml` with the following content:\\n\\n```xml title=\\"res/xml/device_admin.xml\\"\\n<device-admin>\\n</device-admin>\\n```\\n\\nNow if we just add `android:lockTaskMode=\\"if_whitelisted\\"` to every activity in `AndroidManifest`, they will be automatically launched in lock task mode.\\n\\n## How Can I Test It?\\n\\nSo let\'s start with provisioning app in develop mode. Actually, it\'s as simple as that:\\n\\n```shell\\nadb shell dpm set-device-owner com.example.ookami.myapplication/.AdminReceiver\\n```\\n\\nwhere `com.example.ookami.myapplication/.AdminReceiver` is the path to our admin receiver.\\n\\nIn order to unset the app as a device owner, run this (but for this to work, your application tag in `AndroidManifest` should have `android:testOnly=\\"true\\"` attribute):\\n\\n```shell\\nadb shell dpm remove-active-admin com.example.ookami.myapplication/.AdminReceiver\\n```\\n\\n## How Can I Distribute It?\\n\\nThe app is ready and tested, time to give it customer. `adb` method is, of course, unacceptable here, and we need some simpler way to install our app.\\n\\nAs official docs say:\\n\\n> The QR code provisioning method sets up and configures device owner mode by scanning a QR code from the setup wizard. The QR code contains a payload of key-value pairs with all the information that\u2019s needed for the DPC to provision a device.\\n\\nSo you will need to provide a client with a QR-code. If you need to pass some dynamic parameters (depending on the customer, or app configuration for example) then you have to generate this QR-code dynamically, otherwise you can just create this QR-code once and give it to ll your clients (though it still needs to be updated whenever a new version is released if you use package checksum \u2013 more on this later).\\n\\nIn the simplest case, this QR-code can be generated with some online tool, like [this](https://www.the-qrcode-generator.com/). You just need to paste JSON there with all the required parameters.\\n\\nYou can see all the possible parameters [here](https://developers.google.com/android/work/prov-devices#create_a_qr_code), I\'ll just provide minimal configuration:\\n\\n```json\\n{\\n  \\"android.app.extra.PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\\": \\"com.example.ookami.myapplication/.AdminReceiver\\",\\n  \\"android.app.extra.EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\\": \\"http://example.com/app.apk\\",\\n  \\"android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM\\": \\"gJD2YwtOiWJHkSMkkIfLRlj-quNqG1fb6v100QmzM9w=\\"\\n}\\n```\\n\\n- `android.app.extra.PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME` is the same path to the admin receiver that we\'ve used in develop mode\\n- `android.app.extra.EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION` is the direct path to our app apk\\n- `android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM` is a string holding the URL-safe base64 encoded SHA-256 hash ot this apk. On Linux/MacOS, it can be get with the following command:\\n\\n  ```shell\\n  cat /path/to/app.apk | openssl dgst -binary -sha256 | openssl base64 | tr \'+/\' \'-_\' | tr -d \'=\'\\n  ```\\n\\nPay attention that if you use this package signature, you\'ll have to update your QR-code every time a new version of an app is released. You can use `android.app.extra.PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM` that should contain the URL-safe base64 encoded SHA-256 checksum of any signature of the Android package (but I failed to make it work properly).\\n\\nNow when your customer has QR-code and clean (or factory reset) device, he needs to do the following:\\n\\n- Power on the device and wait for a Welcome screen to appear.\\n- Tap 6 times wherever on this screen \u2013 this will launch provisioning mode.\\n- Connect to WiFi network by entering credentials and wait for the tablet to download and launch QR-code scanner.\\n- Scan this QR-code, the app will be downloaded and installed automatically.\\n\\nIf everything goes well, your app will receive device owner mode and can grant itself the necessary permissions."},{"id":"/2018/03/02/rounded-images","metadata":{"permalink":"/blog/2018/03/02/rounded-images","source":"@site/blog/2018-03-02-rounded-images.md","title":"Rounded image view in Android","description":"The common use-case is like this: you need to get an image from some server, resize and cache it (you\u2019re using Picasso for this, aren\u2019t you?), make corners rounded (ok, this is not the most popular use-case, but it\u2019s what this article is about) and load it into view. So, how can we make rounded corners?","date":"2018-03-02T00:00:00.000Z","formattedDate":"March 2, 2018","tags":[],"readingTime":2.525,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Rounded image view in Android"},"prevItem":{"title":"Developing a Kiosk Application","permalink":"/blog/2018/07/19/developing-kiosk"},"nextItem":{"title":"Email-\u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430: \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u044b\u0435 \u043a\u0430\u043c\u043d\u0438","permalink":"/blog/2016/01/17/email"}},"content":"The common use-case is like this: you need to get an image from some server, resize and cache it (you\u2019re using Picasso for this, aren\u2019t you?), make corners rounded (ok, this is not _the most_ popular use-case, but it\u2019s what this article is about) and load it into view. So, how can we make rounded corners?\\n\\nAs usual, we have several ways to achieve this in Android.\\n\\n\x3c!--truncate--\x3e\\n\\n## Option #1. Overlay\\n\\nSome desperate person can offer you to place your image view inside `FrameLayout`, add another image above it with a transparent body and solid corners and\u2026 you\u2019re done. Do I need to tell you that this is very bad practice, and you should never do that?\\n\\n## Option #2. clipPath\\n\\nRather a simple method. You just need to create a custom view with an overridden `onDraw` method of `ImageView` and use method `clipPath` on canvas instance there. The problem is that path clipping doesn\u2019t support anti-aliasing, so your image will have ugly sharp edges.\\n\\n## Option #3. BitmapShader\\n\\nA way better option is to use a `Paint` with `BitmapShader`. It allows filling the rounded rectangle with a texture, not only with a simple color. Luckily we have `RoundedBitmapDrawable` within support library that uses this technique, we just need to combine image loading with Picasso and transforming it into one view, which leads us to option #4:\\n\\n## Option #4. RoundedBitmapDrawable\\n\\nSo, let\u2019s start. The code is written in Kotlin, because\u2026 well, why would you write in Java when you have Kotlin?\\n\\nAs we will use our view with Picasso only, we don\u2019t even need to inherit it from `ImageView`, simple `View` would be enough:\\n\\n```kotlin\\nclass RoundedImageView(\\n  context: Context,\\n  attributeSet: AttributeSet?\\n) : View(context, attributeSet), Target {\\n    constructor(context: Context) : this(context, null)\\n}\\n```\\n\\nIn order to allow Picasso to load an image into our view, it should implement `Target` interface, which includes 3 methods: `onPrepareLoad`, `onBitmapFailed` and `onBitmapLoaded`. All the magic is done in `onBitmapLoaded` method:\\n\\n```kotlin\\noverride fun onBitmapLoaded(bitmap: Bitmap?, from: Picasso.LoadedFrom?) {\\n    val roundedDrawable = RoundedBitmapDrawableFactory.create(resources, bitmap)\\n    roundedDrawable.cornerRadius = dip(DEFAULT_RADIUS).toFloat()\\n    drawable = roundedDrawable\\n}\\n```\\n\\nFinally, we need to draw our `Drawable` in `onDraw` method (sounds _very_ reasonable, isn\u2019t it?):\\n\\n```kotlin\\noverride fun onDraw(canvas: Canvas?) {\\n    drawable?.setBounds(0, 0, width, height)\\n    drawable?.draw(canvas)\\n}\\n```\\n\\nSo the complete code together with helper method for loading image by URL string is here:\\n\\n```kotlin\\nclass RoundedImageView(context: Context, attributeSet: AttributeSet?) : View(context, attributeSet), Target {\\n    constructor(context: Context) : this(context, null)\\n\\n    private var drawable: Drawable? = null\\n        set(value) {\\n            field = value\\n            postInvalidate()\\n        }\\n\\n    fun loadImage(url: String?) {\\n        if (url == null) {\\n            drawable = null\\n        } else {\\n            Picasso.with(context)\\n                    .load(url)\\n                    .placeholder(R.drawable.image_stub)\\n                    .error(R.drawable.image_stub)\\n                    .into(this)\\n        }\\n    }\\n\\n    override fun onDraw(canvas: Canvas?) {\\n        drawable?.setBounds(0, 0, width, height)\\n        drawable?.draw(canvas)\\n    }\\n\\n    override fun onPrepareLoad(placeHolderDrawable: Drawable?) {\\n        drawable = placeHolderDrawable\\n    }\\n\\n    override fun onBitmapFailed(errorDrawable: Drawable?) {\\n        drawable = errorDrawable\\n    }\\n\\n    override fun onBitmapLoaded(bitmap: Bitmap?, from: Picasso.LoadedFrom?) {\\n        val roundedDrawable = RoundedBitmapDrawableFactory.create(resources, bitmap)\\n        roundedDrawable.cornerRadius = dip(DEFAULT_RADIUS).toFloat()\\n        drawable = roundedDrawable\\n    }\\n\\n    companion object {\\n        private const val DEFAULT_RADIUS = 4\\n    }\\n}\\n```"},{"id":"/2016/01/17/email","metadata":{"permalink":"/blog/2016/01/17/email","source":"@site/blog/2016-01-17-email.md","title":"Email-\u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430: \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u044b\u0435 \u043a\u0430\u043c\u043d\u0438","description":"\u041d\u0435\u0434\u0430\u0432\u043d\u043e \u043c\u044b \u043f\u043e \u0440\u044f\u0434\u0443 \u043f\u0440\u0438\u0447\u0438\u043d \u0440\u0435\u0448\u0438\u043b\u0438 \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0434\u043b\u044f email-\u0440\u0430\u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438 \u0441\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u042f \u0431\u044b \u0445\u043e\u0442\u0435\u043b \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430 \u0440\u044f\u0434 \u0442\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u0435\u0439, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043c\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0438\u0441\u044c \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435, \u0438 \u043f\u0443\u0442\u0438 \u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f.","date":"2016-01-17T00:00:00.000Z","formattedDate":"January 17, 2016","tags":[],"readingTime":3.69,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Email-\u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430: \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u044b\u0435 \u043a\u0430\u043c\u043d\u0438"},"prevItem":{"title":"Rounded image view in Android","permalink":"/blog/2018/03/02/rounded-images"},"nextItem":{"title":"Adding flavor-specific tasks to Gradle","permalink":"/blog/2016/01/13/gradle"}},"content":"\u041d\u0435\u0434\u0430\u0432\u043d\u043e \u043c\u044b \u043f\u043e \u0440\u044f\u0434\u0443 \u043f\u0440\u0438\u0447\u0438\u043d \u0440\u0435\u0448\u0438\u043b\u0438 \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0434\u043b\u044f email-\u0440\u0430\u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438 \u0441\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u042f \u0431\u044b \u0445\u043e\u0442\u0435\u043b \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430 \u0440\u044f\u0434 \u0442\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u0435\u0439, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043c\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0438\u0441\u044c \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435, \u0438 \u043f\u0443\u0442\u0438 \u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\\n\\n\u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0434\u0430\u0432\u043d\u043e \u0432 \u0442\u0435\u043c\u0435, \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u0441\u043e\u0432\u0435\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0431\u0430\u043d\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u043c\u0438, \u043d\u043e \u043d\u0435\u043a\u0438\u0439 \u0441\u0432\u043e\u0434 \u0445\u0438\u0442\u0440\u043e\u0441\u0442\u0435\u0439 \u0438 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u043c \u0440\u0430\u0441\u0441\u044b\u043b\u044c\u0449\u0438\u043a\u0430\u043c.\\n\\n\x3c!--truncate--\x3e\\n\\n## \u0410\u0432\u0442\u043e\u043e\u0442\u0432\u0435\u0442\u0447\u0438\u043a\\n\\n\u0411\u0443\u0434\u044c\u0442\u0435 \u0433\u043e\u0442\u043e\u0432\u044b \u043a \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043b\u044e\u0434\u0438 \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e\u0442, \u0437\u0430\u0447\u0435\u043c \u043d\u0443\u0436\u0435\u043d \u0430\u0432\u0442\u043e\u043e\u0442\u0432\u0435\u0442\u0447\u0438\u043a. \u041d\u0430 \u0432\u0430\u0441 \u043f\u043e\u0441\u044b\u043f\u044f\u0442\u0441\u044f \u0441\u043e\u0442\u043d\u0438 \u043e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u043e\u0442\u0432\u0435\u0442\u043e\u0432: \\"\u0421\u043f\u0430\u0441\u0438\u0431\u043e!\\", \\"\u042f \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0432\u0430\u0448\u0435 \u043f\u0438\u0441\u044c\u043c\u043e, \u043e\u0442\u0432\u0435\u0447\u0443, \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043c\u043e\u0433\u0443\\" (\u0432\u043e\u0442 \u0437\u0430\u0447\u0435\u043c \u043c\u043d\u0435 \u044d\u0442\u043e?), \u0438\u043b\u0438 \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \\"\u0430\u0434\u044b\u043b\u043e\u043f\u0440\u044b\u0434\u0430\\". \u0418\u0445 \u0447\u0442\u043e, \u043d\u0430\u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u0435 \u0430\u0432\u0442\u043e\u043e\u0442\u0432\u0435\u0442\u0430?! \u041f\u0440\u0438\u0447\u0435\u043c \u0443 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0430\u0432\u0442\u043e\u043e\u0442\u0432\u0435\u0442\u043e\u0444\u0438\u043b\u043e\u0432 \u044f\u0449\u0438\u043a \u043d\u0430 mail.ru (\u0441 \u0442\u0440\u0443\u0434\u043e\u043c \u0432\u043e\u0437\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0441\u044c \u043e\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0432\u043e\u0434\u0443).\\n\\n\u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044f, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0438\u0441\u044c\u043c\u0430 \u043f\u043e \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0435 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0442\u0438\u043a\u0435\u0442\u044b \u0432 \u0445\u0435\u043b\u043f\u0434\u0435\u0441\u043a\u0435, \u0437\u0430\u0432\u0430\u043b\u0438\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0441\u043e\u0442\u043d\u044f\u043c\u0438 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0442\u0438\u043a\u0435\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0435 \u0445\u043e\u0447\u0435\u0442\u0441\u044f.\\n\\n\u041a\u0430\u043a \u0441 \u043d\u0438\u043c\u0438 \u0431\u043e\u0440\u043e\u0442\u044c\u0441\u044f? \u041a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0431\u044b, \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c [RFC](https://tools.ietf.org/html/rfc3834#section-5), \u0447\u0438\u0442\u0430\u0435\u043c, \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `Auto-Submitted:` \u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0435\u0433\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438 \u043d\u0435\u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0432\u0443 `no` \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u0440\u043e\u0444\u0438\u0442. \u0422\u0430\u043a? \u041d\u0435\u0430. \u041a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0442\u0430\u043c **SHOULD**. \u0418 \u0435\u0441\u043b\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, gmail, yandex \u0438 yahoo \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u044f\u043b\u0438 \u044d\u0442\u043e \u043a\u0430\u043a \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044e, \u0442\u043e \u0432\u043e\u0442 mail.ru (\u043e\u043f\u044f\u0442\u044c \u0442\u044b?) \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0433\u043e\u0440\u0434, \u0447\u0442\u043e\u0431\u044b \u0441\u043b\u0443\u0448\u0430\u0442\u044c \u0447\u044c\u0438-\u0442\u043e \u0441\u043e\u0432\u0435\u0442\u044b. \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0445\u043e\u0442\u044c \u0437\u0430 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `X-AutoReply`. \u0422\u0443\u0434\u0430 \u0436\u0435 \u0438\u0434\u0435\u0442 \u0438 rambler \u0441\u043e \u0441\u0432\u043e\u0438\u043c `X-Autogenerated`. \u0421\u0442\u0440\u0430\u0448\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c, \u0447\u0442\u043e \u043d\u0430 \u044d\u0442\u043e\u0442 \u0441\u0447\u0435\u0442 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u043b\u0438 \u0435\u0449\u0435 \u0431\u043e\u043b\u0435\u0435 \u043d\u0435\u0432\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u044b \u0442\u0438\u043f\u0430 i.ua (\u043e \u043d\u0438\u0445 \u0435\u0449\u0435 \u043f\u043e\u0439\u0434\u0435\u0442 \u0440\u0435\u0447\u044c), \u043d\u043e \u043e\u0442 \u043d\u0438\u0445 \u043f\u043e\u043a\u0430 \u0430\u0432\u0442\u043e\u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u043b\u043e. \u041c\u043e\u0436\u0435\u0442, \u0443 \u043d\u0438\u0445 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u043e\u043e\u0431\u0449\u0435 \u0442\u0430\u043a\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435\u0442?\\n\\n## Server name\\n\\n\u041f\u043e\u043c\u043d\u0438\u0442\u0435, \u0447\u0442\u043e \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 [myhostname](http://www.postfix.org/BASIC_CONFIGURATION_README.html#myhostname) postfix\'\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d FQDN. \u0418 \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0442\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u0441\u0442\u043e\u044f\u0442\u044c \u043d\u0435 `example.com`, \u0430 \u043f\u0440\u043e\u0441\u0442\u043e `example`, \u0442\u043e \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439 \u043f\u0438\u0441\u044c\u043c\u0430. \u041e\u043f\u044f\u0442\u044c \u0436\u0435, Gmail, Yandex \u0438 \u0434\u0430\u0436\u0435 MailRu \u043d\u0430 \u044d\u0442\u043e \u0437\u0430\u0431\u0438\u0432\u0430\u044e\u0442, \u043d\u043e \u0432\u043e\u0442 \u0442\u043e\u0442 \u0441\u0430\u043c\u044b\u0439 \u0437\u043b\u043e\u043f\u043e\u043b\u0443\u0447\u043d\u044b\u0439 i.ua (\u0430 \u0442\u0430\u043a\u0436\u0435 ukr.net) \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0438\u043d\u044b\u0432\u0430\u0435\u0442 \u043f\u0438\u0441\u044c\u043c\u0430, \u043d\u0438\u043a\u0430\u043a \u044d\u0442\u043e \u043d\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u044f.\\n\\n## Greylisting\\n\\n\u0415\u0449\u0435 \u043e\u0434\u043d\u0430 \u043f\u043e\u0434\u043b\u044f\u043d\u043a\u0430 \u043e\u0442 ukr.net. \u041d\u0430 \u044d\u0442\u0443 \u0442\u0435\u043c\u0443 \u0443 \u043d\u0438\u0445 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e [\u0432\u043e\u0442 \u0442\u0430\u043a\u043e\u0439](http://www.ukr.net/mta/std3.html) \u043f\u0440\u0438\u0434\u0443\u0440\u043a\u043e\u0432\u0430\u0442\u044b\u0439 FAQ. \u0421\u0443\u0442\u044c \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432\u0430\u0448 \u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u0443\u043a\u0440\u043d\u0435\u0442\u0443, \u0442\u043e \u043f\u0438\u0441\u044c\u043c\u0430 \u043e\u043d \u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442. \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043f\u0430\u0441\u0442\u044c \u0432 \u0435\u0433\u043e \u0431\u0435\u043b\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a, \u043d\u0430\u0434\u043e \u043f\u043e\u0441\u043b\u0430\u0442\u044c \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043f\u0438\u0441\u044c\u043c\u043e \u0447\u0435\u0440\u0435\u0437 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041a \u0441\u0447\u0430\u0441\u0442\u044c\u044e, postfix \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u044d\u0442\u0443 \u043e\u043f\u0446\u0438\u044e, \u0442\u0430\u043a \u0447\u0442\u043e \u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0434\u043e\u0436\u0434\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0438\u0441\u044c\u043c\u0430.\\n\\n## Quarantine\\n\\n\u041d\u0430\u0441 \u0432\u043d\u043e\u0432\u044c [\u0440\u0430\u0434\u0443\u0435\u0442](http://mail.i.ua/quarantine/) i.ua. \u041f\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e, \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u043c\u0443, \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u043e\u043d \u0440\u0435\u0448\u0438\u043b \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0447\u0430\u0441\u0442\u044c \u043d\u0430\u0448\u0438\u0445 \u043f\u0438\u0441\u0435\u043c \u0432 \u043a\u0430\u0440\u0430\u043d\u0442\u0438\u043d. \u0427\u0442\u043e\u0431\u044b \u0432\u044b\u0442\u0430\u0449\u0438\u0442\u044c \u0438\u0445 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043a\u0430\u0440\u0430\u043d\u0442\u0438\u043d\u0430, \u043d\u0443\u0436\u043d\u043e \u0432\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u0434, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0432 \u043f\u0438\u0441\u044c\u043c\u0435, \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 \u0432 \u044d\u0442\u043e\u043c \u0436\u0435 \u043f\u0438\u0441\u044c\u043c\u0435. \u0422\u0443\u0442 \u044f \u0443\u0436\u0435 \u0441\u0434\u0430\u043b\u0441\u044f - \u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0445 \u043f\u0438\u0441\u0435\u043c \u0434\u043b\u044f \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0445\u043e\u0442\u0438 \u043f\u0430\u0440\u0430\u043d\u043e\u0438\u0434\u0430\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0430\u0434\u043c\u0438\u043d\u043e\u0432 \u0432 \u043c\u043e\u0438 \u043f\u043b\u0430\u043d\u044b \u043d\u0435 \u0432\u0445\u043e\u0434\u0438\u043b\u043e.\\n\\n## \u0412\u0435\u0440\u0441\u0442\u043a\u0430\\n\\n\u041f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 \u0441\u0430\u043c\u043e\u0439 \u0432\u0435\u0440\u0441\u0442\u043a\u0438 \u043f\u0438\u0441\u0435\u043c \u043d\u0430 \u0445\u0430\u0431\u0440\u0435 \u0443\u0436\u0435 \u0431\u044b\u043b\u0430 \u043a\u0443\u0447\u0430 \u0441\u0442\u0430\u0442\u0435\u0439, \u0432\u0440\u044f\u0434 \u043b\u0438 \u044f \u0434\u043e\u0431\u0430\u0432\u043b\u044e \u043a \u043d\u0438\u043c \u0447\u0442\u043e-\u0442\u043e \u043d\u043e\u0432\u043e\u0435. \u042f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u044e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438: \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u043a\u043e\u0433\u0434\u0430 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u0441\u0432\u0435\u0440\u0441\u0442\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435, \u0430 \u0435\u0435 \u043d\u0430\u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0438\u0441\u044c\u043c\u043e\u043c. \u0423 \u043d\u0430\u0441, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u0442\u044c \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435. \u041d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0440\u0441\u0442\u044b\u0432\u0430\u0442\u044c \u0436\u0435 \u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434 \u043f\u0438\u0441\u044c\u043c\u043e? \u0410 \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u043e\u0447\u0442\u0438 200? \u0418 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438 \u0432 \u043d\u0438\u0445 \u0432\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u043f\u0440\u0430\u0432\u043a\u0438?\\n\\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u043d\u0430\u0448\u0435\u043b \u0434\u043b\u044f \u0441\u0435\u0431\u044f [\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443](https://github.com/premailer/premailer), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437 \u0433\u043e\u0442\u043e\u0432\u043e\u0433\u043e \\"\u0441\u0430\u0439\u0442\u043e\u0432\u043e\u0433\u043e\\" \u0445\u0442\u043c\u043b\u0430 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e email-\u0432\u0435\u0440\u0441\u0438\u044e, \u0441 \u0438\u043d\u043b\u0430\u0439\u043d\u043e\u0432\u044b\u043c\u0438 \u0441\u0442\u0438\u043b\u044f\u043c\u0438, \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u043c\u0438 \u043f\u0443\u0442\u044f\u043c\u0438 \u0434\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a, \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u0434 email-\u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0441\u0442\u0438\u043b\u044f\u043c\u0438 \u0438 \u0442.\u0434. \u041d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u044d\u0442\u043e \u0443 \u043d\u0435\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e, \u043d\u043e \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0434\u043e \u043f\u0438\u0441\u044c\u043c\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u043d\u0430\u0434\u043e, \u0430 \u0434\u0435\u0434\u043b\u0430\u0439\u043d - \u0432\u0447\u0435\u0440\u0430, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043e\u0447\u0435\u043d\u044c \u0432\u044b\u0440\u0443\u0447\u0430\u0435\u0442.\\n\\n\u0412 \u043f\u043b\u0430\u043d\u0430\u0445 \u0432\u043e\u0442 \u0435\u0449\u0435 \u0435\u0441\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0435\u0435 \u0432 \u0441\u0430\u0439\u0442\u043e\u0432\u044b\u0439 workflow, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u043b\u0430 email-\u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430.\\n\\n## \u041e\u0442\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438\\n\\n\u041f\u0440\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `List-Unsubscribe` \u043d\u0430 \u0442\u043e\u043c \u0436\u0435 \u0445\u0430\u0431\u0440\u0435 \u043f\u0438\u0441\u0430\u043b\u0438 \u0435\u0449\u0435 [\u0432 2010 \u0433\u043e\u0434\u0443](http://geektimes.ru/post/101440/). \u0422\u0443\u0442 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043f\u043e\u043c\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u0432 \u0442\u043e\u043c \u0436\u0435 Gmail, \u0447\u0442\u043e\u0431\u044b \u0432 \u043f\u0438\u0441\u044c\u043c\u0435 \u043f\u043e\u044f\u0432\u0438\u043b\u0430\u0441\u044c \u043a\u043d\u043e\u043f\u043a\u0430 \\"\u041e\u0442\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f\\", \u043d\u0430\u0434\u043e, \u0447\u0442\u043e\u0431\u044b \u0433\u0443\u0433\u043b \u0441\u0447\u0438\u0442\u0430\u043b \u0432\u0430\u0441 \u0434\u043e\u0431\u0440\u043e\u0441\u043e\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u0435\u043c. \u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u043d\u0430\u0434\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c DKIM, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0443\u0447\u0435\u0441\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0443\u043d\u043a\u0442. \u0422\u0430\u043a\u0436\u0435, \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c, \u0433\u0443\u0433\u043b \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442, \u0447\u0442\u043e\u0431\u044b \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 `List-Unsubscribe` \u0431\u044b\u043b\u0430 \u0438\u043c\u0435\u043d\u043d\u043e `mailto:` \u0441\u0441\u044b\u043b\u043a\u0430, \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0441\u0430\u0439\u0442 \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439 \u043e\u0442\u043f\u0438\u0441\u043a\u0438.\\n\\n## DKIM: Body hash did not verify\\n\\n\u0421\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0441\u044f \u0441 \u0442\u0430\u043a\u043e\u0439 \u0444\u0440\u0430\u0437\u043e\u0439 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u0445 \u043f\u0438\u0441\u044c\u043c\u0430, \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u043c\u0435\u0442\u0438\u043b, \u0447\u0442\u043e \u0432 \u0447\u0430\u0441\u0442\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0438\u0441\u0435\u043c GMail \u043d\u0435 \u043f\u043e\u043c\u0435\u0449\u0430\u0435\u0442 \u043a\u043d\u043e\u043f\u043a\u0443 \\"\u041e\u0442\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f\\". \u041f\u043e \u0441\u0443\u0442\u0438, \u0437\u0434\u0435\u0441\u044c \u0432\u0441\u0451 \u043f\u0440\u043e\u0441\u0442\u043e - \u0442\u0435\u043b\u043e \u043f\u0438\u0441\u044c\u043c\u0430 \u0431\u044b\u043b\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043e \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u043d\u0438\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0445\u044d\u0448\u0438 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442.\\n\\n\u0412\u044b\u044f\u0441\u043d\u0438\u0442\u044c \u043f\u0440\u0438\u0447\u0438\u043d\u0443 \u044d\u0442\u043e\u0433\u043e \u0431\u044b\u043b\u043e \u0443\u0436\u0435 \u043d\u0435 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e. \u041d\u043e \u043f\u043e\u043a\u043e\u043f\u0430\u0432\u0448\u0438\u0441\u044c, \u044f \u0432\u044b\u044f\u0441\u043d\u0438\u043b, \u0447\u0442\u043e \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e RFC2822 \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0435\u043b\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0442\u044c 998 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041f\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 postfix (\u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044f \u043f\u043e\u043d\u044f\u043b) \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u043d\u0438\u044f \u043f\u0438\u0441\u044c\u043c\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0444\u0438\u043a\u0441\u0443 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0438\u0441\u044c\u043c\u043e \u0441 \u0443\u0436\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430\u043c\u0438.\\n\\n\u0412\u043e\u0442 \u043f\u043e\u043a\u0430 \u0438 \u0432\u0441\u0451."},{"id":"/2016/01/13/gradle","metadata":{"permalink":"/blog/2016/01/13/gradle","source":"@site/blog/2016-01-13-gradle.md","title":"Adding flavor-specific tasks to Gradle","description":"Suppose you have a multi-flavored project. Each flavor is a separate app, so you have to use separate google-services.json file for each flavor.","date":"2016-01-13T00:00:00.000Z","formattedDate":"January 13, 2016","tags":[],"readingTime":1.1,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Adding flavor-specific tasks to Gradle"},"prevItem":{"title":"Email-\u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430: \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u044b\u0435 \u043a\u0430\u043c\u043d\u0438","permalink":"/blog/2016/01/17/email"},"nextItem":{"title":"\u041f\u043e\u0447\u0435\u043c\u0443 \u044f \u043d\u0435 \u043c\u043e\u0433\u0443 \u0441\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c?","permalink":"/blog/2014/09/22/django-email"}},"content":"Suppose you have a multi-flavored project. Each flavor is a separate app, so you have to use separate `google-services.json` file for each flavor.\\n\\nThe problem is that `google-services.json` file must be placed in the `app/` directory (**update:** as of version 2.0.0-alpha3 of the plugin support was added for build types), so we have to copy this file to `app/` directory on every flavor build process.\\n\\n\x3c!--truncate--\x3e\\n\\nIf we want to automate this process, we can add flavor-specific tasks to our `build.gradle` file and make them run depending on what flavor we are building.\\n\\nHere is my way of achieving this.\\n\\nFirst of all, Add this code to `productFlavors` section:\\n\\n```groovy\\nall { flavor ->\\n    task(\\"${flavor.name}GoogleServices\\", type: Copy) {\\n      description = \'Switches to google-services.json depending on flavor\'\\n      from \\"src/${flavor.name}\\"\\n      include \\"google-services.json\\"\\n      into \\".\\"\\n    }\\n}\\n```\\n\\nThis will create tasks `flavor1GoogleServices`, `flavor2GoogleServices` and so on. This task will copy `google-services.json` file from `src/flavor1/` folder to `app/` folder.\\n\\nNow add this code to the end of the `build.gradle` file:\\n\\n```groovy\\nafterEvaluate {\\n    android.productFlavors.all {\\n      flavor ->\\n        tasks.\\"generate${flavor.name.capitalize()}DebugResources\\".dependsOn \\"${flavor.name}GoogleServices\\"\\n        tasks.\\"generate${flavor.name.capitalize()}ReleaseResources\\".dependsOn \\"${flavor.name}GoogleServices\\"\\n    }\\n}\\n```\\n\\nThis code runs after a project is evaluated. It adds dependencies to tasks `generateFlavor1DebugResources`, `generateFlavor2DebugResources` etc. on our tasks.\\n\\nThat\u2019s all. After switching build variant in Android Studio the right task for this variant will run and update json-file."},{"id":"/2014/09/22/django-email","metadata":{"permalink":"/blog/2014/09/22/django-email","source":"@site/blog/2014-09-22-django-email.md","title":"\u041f\u043e\u0447\u0435\u043c\u0443 \u044f \u043d\u0435 \u043c\u043e\u0433\u0443 \u0441\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c?","description":"\u0422\u0430\u043a\u043e\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u0440\u0438\u0448\u0435\u043b \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u0432 \u0442\u0435\u0445\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f, \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0432\u043e\u0439 email, \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442 \u043a\u043d\u043e\u043f\u043a\u0443 \\"\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\\". \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0440\u0430\u0434\u043e\u0441\u0442\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442, \u0447\u0442\u043e email \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u044f\u0449\u0438\u043a, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0432\u0438\u0434\u0438\u0442 \u043f\u0438\u0441\u044c\u043c\u0430, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435\u0434\u043e\u0432\u043e\u043b\u0435\u043d.","date":"2014-09-22T00:00:00.000Z","formattedDate":"September 22, 2014","tags":[],"readingTime":2.615,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u041f\u043e\u0447\u0435\u043c\u0443 \u044f \u043d\u0435 \u043c\u043e\u0433\u0443 \u0441\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c?"},"prevItem":{"title":"Adding flavor-specific tasks to Gradle","permalink":"/blog/2016/01/13/gradle"},"nextItem":{"title":"Android: \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0421\u041c\u0421","permalink":"/blog/2012/08/14/sms"}},"content":"\u0422\u0430\u043a\u043e\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u0440\u0438\u0448\u0435\u043b \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u0432 \u0442\u0435\u0445\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f, \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0432\u043e\u0439 email, \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442 \u043a\u043d\u043e\u043f\u043a\u0443 \\"\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\\". \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0440\u0430\u0434\u043e\u0441\u0442\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442, \u0447\u0442\u043e email \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u044f\u0449\u0438\u043a, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0432\u0438\u0434\u0438\u0442 \u043f\u0438\u0441\u044c\u043c\u0430, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435\u0434\u043e\u0432\u043e\u043b\u0435\u043d.\\n\\n\x3c!--truncate--\x3e\\n\\n\u0414\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435:\xa0\\"\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430 email\'\u0430, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u043f\u0438\u0441\u044c\u043c\u043e \u043d\u0435 \u043f\u043e\u043f\u0430\u043b\u043e \u0432 \u0441\u043f\u0430\u043c\\". \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b\u0438-\u0443\u0431\u0435\u0434\u0438\u043b\u0438\u0441\u044c, \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u043b\u043e. \u0417\u0430\u0445\u043e\u0436\u0443 \u043d\u0430 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440 - \u043f\u0438\u0441\u044c\u043c\u043e \u0434\u0430\u0436\u0435 \u043d\u0435 \u0431\u044b\u043b\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e.\\n\\n\u041e\u0442\u0440\u044b\u0432\u0430\u044e\u0441\u044c \u043e\u0442 \u0432\u0441\u0435\u0445 \u0434\u0435\u043b \u0438 \u0431\u0440\u043e\u0441\u0430\u044e\u0441\u044c \u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u0417\u0430\u0445\u043e\u0436\u0443 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0432\u0432\u043e\u0436\u0443 \u0441\u0432\u043e\u0439 email - \u0432\u0441\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043f\u0438\u0441\u044c\u043c\u043e \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u043e\u0439 \u043d\u0430 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442. \u0412\u0432\u043e\u0436\u0443 email \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - \u0442\u0438\u0448\u0438\u043d\u0430. \u041f\u0438\u0441\u044c\u043c\u043e \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f. \u0412 \u043b\u043e\u0433\u0435 - \u043d\u0438\u0447\u0435\u0433\u043e (\u043e\u0442 \u0441\u043b\u043e\u0432\u0430 \\"\u0441\u043e\u0432\u0441\u0435\u043c\\").\\n\\n\u0414\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441 \u043f\u043e\u043b\u0447\u0430\u0441\u0430 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043c\u0435\u0442\u0430\u043d\u0438\u0439, \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043d\u0435\u0434\u043e\u0443\u043c\u0435\u043d\u0438\u044f \u0438 \u043c\u043d\u043e\u0433\u043e \u043d\u0435\u0446\u0435\u043d\u0437\u0443\u0440\u043d\u043e\u0439 \u043b\u0435\u043a\u0441\u0438\u043a\u0438. \u0423\u0441\u043f\u043e\u043a\u0430\u0438\u0432\u0430\u0435\u043c\u0441\u044f, \u0434\u0435\u043b\u0430\u0435\u043c \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u0432\u0434\u043e\u0445 \u0438 \u043b\u0435\u0437\u0435\u043c \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 Django.\\n\\n\u0417\u0430 \u0441\u0431\u0440\u043e\u0441 \u043f\u0430\u0440\u043e\u043b\u044f \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 `password_reset`:\\n\\n```python\\n@csrf_protect\\ndef password_reset(request, is_admin_site=False,\\n                   template_name=\'registration/password_reset_form.html\',\\n                   email_template_name=\'registration/password_reset_email.html\',\\n                   subject_template_name=\'registration/password_reset_subject.txt\',\\n                   password_reset_form=PasswordResetForm,\\n                   token_generator=default_token_generator,\\n                   post_reset_redirect=None,\\n                   from_email=None,\\n                   current_app=None,\\n                   extra_context=None):\\n    if post_reset_redirect is None:\\n        post_reset_redirect = reverse(\'password_reset_done\')\\n    else:\\n        post_reset_redirect = resolve_url(post_reset_redirect)\\n    if request.method == \\"POST\\":\\n        form = password_reset_form(request.POST)\\n        if form.is_valid():\\n            opts = {\\n                \'use_https\': request.is_secure(),\\n                \'token_generator\': token_generator,\\n                \'from_email\': from_email,\\n                \'email_template_name\': email_template_name,\\n                \'subject_template_name\': subject_template_name,\\n                \'request\': request,\\n            }\\n            if is_admin_site:\\n                opts = dict(opts, domain_override=request.get_host())\\n            form.save(**opts)\\n            return HttpResponseRedirect(post_reset_redirect)\\n    else:\\n        form = password_reset_form()\\n    context = {\\n        \'form\': form,\\n    }\\n    if extra_context is not None:\\n        context.update(extra_context)\\n    return TemplateResponse(request, template_name, context,\\n                            current_app=current_app)\\n```\\n\\n\u0420\u0430\u0437 \u0440\u0435\u0434\u0438\u0440\u0435\u043a\u0442 \u043d\u0430 `post_reset_redirect` \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442, \u0437\u043d\u0430\u0447\u0438\u0442, `form.save()` \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f. \u0421\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0435\u0433\u043e \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c:\\n\\n```python\\ndef save(self, domain_override=None,\\n             subject_template_name=\'registration/password_reset_subject.txt\',\\n             email_template_name=\'registration/password_reset_email.html\',\\n             use_https=False, token_generator=default_token_generator,\\n             from_email=None, request=None):\\n        \\"\\"\\"\\n        Generates a one-use only link for resetting password and sends to the\\n        user.\\n        \\"\\"\\"\\n        from django.core.mail import send_mail\\n        UserModel = get_user_model()\\n        email = self.cleaned_data[\\"email\\"]\\n        active_users = UserModel._default_manager.filter(\\n            email__iexact=email, is_active=True)\\n        for user in active_users:\\n            # Make sure that no email is sent to a user that actually has\\n            # a password marked as unusable\\n            if not user.has_usable_password():\\n                continue\\n            if not domain_override:\\n                current_site = get_current_site(request)\\n                site_name = current_site.name\\n                domain = current_site.domain\\n            else:\\n                site_name = domain = domain_override\\n            c = {\\n                \'email\': user.email,\\n                \'domain\': domain,\\n                \'site_name\': site_name,\\n                \'uid\': urlsafe_base64_encode(force_bytes(user.pk)),\\n                \'user\': user,\\n                \'token\': token_generator.make_token(user),\\n                \'protocol\': \'https\' if use_https else \'http\',\\n            }\\n            subject = loader.render_to_string(subject_template_name, c)\\n            # Email subject *must not* contain newlines\\n            subject = \'\'.join(subject.splitlines())\\n            email = loader.render_to_string(email_template_name, c)\\n            send_mail(subject, email, from_email, [user.email])\\n```\\n\\n\u0422\u0443\u0442, \u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u0434\u043e \u043c\u0435\u043d\u044f \u0434\u043e\u0445\u043e\u0434\u0438\u0442. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. \u041f\u043e\u0442\u043e\u043c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b email. \u0418 \u043e\u0442\u0432\u044f\u0437\u0430\u043b \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. \u0418 \u0432\u043e\u0442 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 \u0412\u041a \u0435\u043c\u0443, \u0442.\u0435. \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u043d\u0430\u0437\u043d\u0430\u0447\u0430\u043b\u0438 `set_unusable_password()` (\u0438\u0431\u043e \u043f\u0430\u0440\u043e\u043b\u044f-\u0442\u043e \u0443 \u043d\u0435\u0433\u043e \u043d\u0435 \u0431\u044b\u043b\u043e).\\n\\n\u0412\u0435\u0441\u044c \u044d\u0442\u043e\u0442 \u043f\u043e\u0442\u043e\u043a \u044d\u043c\u043e\u0446\u0438\u0439 \u0431\u044b\u043b \u0432\u044b\u0437\u0432\u0430\u043d \u0432\u043e\u0442 \u044d\u0442\u0438\u043c\u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438:\\n\\n```python\\n# Make sure that no email is sent to a user that actually has\\n# a password marked as unusable\\nif not user.has_usable_password():\\n  continue\\n```\\n\\n\u0417\u0430\u0447\u0435\u043c? \u041f\u043e\u0447\u0435\u043c\u0443? \u041a\u0442\u043e \u0432\u0438\u043d\u043e\u0432\u0430\u0442? \u041f\u043e\u0447\u0435\u043c\u0443 \u043d\u0435\u043b\u044c\u0437\u044f \u0441\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c, \u0435\u0441\u043b\u0438 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043e\u043d \u043d\u0435 \u0431\u044b\u043b \u0437\u0430\u0434\u0430\u043d? \u0410 \u0433\u043b\u0430\u0432\u043d\u043e\u0435, \u043f\u043e\u0447\u0435\u043c\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431 \u044d\u0442\u043e\u043c \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442, \u0430, \u0445\u0438\u0445\u0438\u043a\u0430\u044f, \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 `post_reset_redirect`?! \u041a\u0430\u043a \u0442\u0430\u043c \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u0441\u044f, \\"\u044f\u0432\u043d\u043e\u0435 \u043b\u0443\u0447\u0448\u0435 \u043d\u0435\u044f\u0432\u043d\u043e\u0433\u043e\\"?\\n\\n\u0412 \u043e\u0431\u0449\u0435\u043c, \u0438\u043c\u0435\u0439\u0442\u0435 \u0432 \u0432\u0438\u0434\u0443. \u0418 \u043d\u0435 \u043d\u0430\u0441\u0442\u0443\u043f\u0430\u0439\u0442\u0435 \u043d\u0430 \u044d\u0442\u0438 \u0433\u0440\u0430\u0431\u043b\u0438.\\n\\n**Update:**\\n\\n\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0442\u043e\u0432\u0430\u0440\u0438\u0449\u0443 [@zzeus](https://habr.com/ru/post/237701/#comment_7992609):\\n\\n> Users flagged with an unusable password (see set_unusable_password() aren\u2019t allowed to request a password reset to prevent misuse when using an external authentication source like LDAP. Note that they won\u2019t receive any error message since this would expose their account\u2019s existence but no mail will be sent either."},{"id":"/2012/08/14/sms","metadata":{"permalink":"/blog/2012/08/14/sms","source":"@site/blog/2012-08-14-sms.md","title":"Android: \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0421\u041c\u0421","description":"0. \u0412\u043c\u0435\u0441\u0442\u043e \u0432\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f","date":"2012-08-14T00:00:00.000Z","formattedDate":"August 14, 2012","tags":[],"readingTime":4.06,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Android: \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0421\u041c\u0421"},"prevItem":{"title":"\u041f\u043e\u0447\u0435\u043c\u0443 \u044f \u043d\u0435 \u043c\u043e\u0433\u0443 \u0441\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c?","permalink":"/blog/2014/09/22/django-email"}},"content":"## 0. \u0412\u043c\u0435\u0441\u0442\u043e \u0432\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f\\n\\n\u041f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438 (\u043a\u043e\u0433\u0434\u0430 \u0443 \u043c\u0435\u043d\u044f \u0432\u044b\u043f\u0430\u0434\u0430\u0435\u0442 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u0432\u0435\u0447\u0435\u0440, \u0438 \u043d\u0430\u0448 \\"\u043a\u043b\u0443\u0431\\" \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u0442 \u0438\u0433\u0440\u0443) \u044f \u0438\u0433\u0440\u0430\u044e \u0432 \u0440\u0435\u0433\u0431\u043e\u043b. \\"\u041a\u043b\u0443\u0431\\" \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e \u0432 \u0434\u0435\u043d\u044c \u0438\u0433\u0440\u044b \u0432\u0441\u0435\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0421\u041c\u0421 \u0442\u0430\u043a\u043e\u0433\u043e \u0432\u0438\u0434\u0430:\\n\\n> \u0420\u0435\u0433\u0431\u043e\u043b! \u0421\u0435\u0433\u043e\u0434\u043d\u044f \u0432 19-30. \u0414\u0432\u043e\u0440 \u0448\u043a\u043e\u043b\u044b \u211630: \u0443\u043b. \u0412\u043e\u043b\u043e\u0434\u0430\u0440\u0441\u043a\u043e\u0433\u043e, 20. \u041e\u0442\u043a\u0440\u044b\u0442\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0430 \u0441 \u0440\u0435\u0437\u0438\u043d\u043e\u0432\u044b\u043c \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435\u043c. \u0422\u0435\u043b. 8 (951) **\\\\*-**-\\\\*\\\\*.\\n\\n\u0418 \u0432\u043e\u0442 \u044f \u043f\u043e\u0434\u0443\u043c\u0430\u043b - \u043f\u043e\u0447\u0435\u043c\u0443 \u0431\u044b \u043d\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043b\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u044d\u0442\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0438 \u0437\u0430\u0431\u0438\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 \u0433\u0443\u0433\u043b-\u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c. \u0417\u0430\u0447\u0435\u043c? \u0414\u0430, \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c, just for fun, \u0438\u0431\u043e \u044f \u043d\u0435 \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043d\u044f\u0442\u043e\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a, \u0447\u0442\u043e\u0431\u044b \u043c\u043d\u0435 \u0431\u044b\u043b\u0438 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u0440\u0438.\\n\\n\u0418\u0442\u0430\u043a, \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435:\\n\\n- \u0421\u043b\u0435\u0434\u0438\u0442\u044c \u0437\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438. \u0415\u0441\u043b\u0438 \u043f\u0440\u0438\u0448\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u0430\u0434\u0440\u0435\u0441\u0430\u0442\u0430 RM FIGHT, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u0432\u0435\u0440\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u043c, \u0438 \u043f\u0440\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435 \u0432 \u0433\u0443\u0433\u043b-\u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u0435. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u043c \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u043d\u043e\u0432\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0448\u043b\u0438), \u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0431\u0430\u0437\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0435\u0433\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c.\\n- \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\u0442\u0430, \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u0435 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \\"\u041e\u043f\u043e\u0432\u0435\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u0438\u0433\u0440\u0435\\" (\u043d\u043e\u0432\u043e\u0441\u0442\u0438, \u0440\u0435\u043a\u043b\u0430\u043c\u0430 \u0438 \u0442.\u0434.).\\n\\n\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0441\u0442\u0430\u0442\u044c\u0438 \u044f \u043f\u043e\u043b\u0430\u0433\u0430\u044e, \u0447\u0442\u043e \u0443 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u043d\u0438\u044f - \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0444\u0430\u0439\u043b Manifest, \u0438 \u0441 \u0447\u0435\u0433\u043e \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u043e\u0434 \u0430\u043d\u0434\u0440\u043e\u0438\u0434 - \u043d\u0430 \u044d\u0442\u043e\u0442 \u0441\u0447\u0435\u0442 \u0435\u0441\u0442\u044c \u043a\u0443\u0447\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0443\u0442\u043e\u0440\u0438\u0430\u043b\u043e\u0432, \u0438 \u0437\u0434\u0435\u0441\u044c \u043d\u0430 \u044d\u0442\u043e\u043c \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u043c. \u0412 \u0442\u043e \u0436\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u043d\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0445 \u0430\u043d\u0434\u0440\u043e\u0438\u0434-\u0434\u0435\u0432\u0435\u043b\u043e\u043f\u0435\u0440\u043e\u0432, \u0432 \u043d\u0435\u0439 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0432\u0435\u0449\u0438, \u0432\u0440\u043e\u0434\u0435 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043c\u0441, \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u043e HTTP.\\n\\n\x3c!--truncate--\x3e\\n\\n\u0418\u0442\u0430\u043a, \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u043c. \u041a\u0441\u0442\u0430\u0442\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f SDK - 14 (Android 4.0).\\n\\n## 1. \u041f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0421\u041c\u0421\\n\\n\u0414\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0421\u041c\u0421 \u043f\u0435\u0440\u0432\u044b\u043c \u0434\u0435\u043b\u043e\u043c \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u0438\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432 \u0444\u0430\u0439\u043b `AndroidManifest.xml` \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044c \u0432\u0438\u0434\u0430:\\n\\n```xml\\n<uses-permission android:name=\\"android.permission.RECEIVE_SMS\\" />\\n```\\n\\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442-\u0444\u0430\u0439\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c _receiver_:\\n\\n```xml\\n<receiver android:name=\\"SMSMonitor\\">\\n    <intent-filter android:priority=\\"100\\">\\n        <action android:name=\\"android.provider.Telephony.SMS_RECEIVED\\"/>\\n    </intent-filter>\\n</receiver>\\n```\\n\\n\u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0440\u0430\u0432\u043d\u044b\u043c 100, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u043c\u0443 \u0421\u041c\u0421 \u0440\u0430\u043d\u044c\u0448\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0421\u041c\u0421, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u043c\u0435\u0435\u0442 \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442. \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u043e\u0442\u0434\u0430\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u0438 \u043f\u043e\u043c\u0435\u0449\u0430\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u0412\u0445\u043e\u0434\u044f\u0449\u0438\u0435.\\n\\n\u0422\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441, \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0438\u0439 `BroadcastReceiver`:\\n\\n```java\\npublic class SMSMonitor extends BroadcastReceiver {\\n    private static final String ACTION = \\"android.provider.Telephony.SMS_RECEIVED\\";\\n    @Override\\n    public void onReceive(Context context, Intent intent) {\\n\\n    }\\n\\n}\\n```\\n\\n\u0412 \u044d\u0442\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 `onReceive()`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c:\\n\\n```java\\nif (intent != null && intent.getAction() != null &&\\n        ACTION.compareToIgnoreCase(intent.getAction()) == 0) {\\n    Object[] pduArray = (Object[]) intent.getExtras().get(\\"pdus\\");\\n    SmsMessage[] messages = new SmsMessage[pduArray.length];\\n    for (int i = 0; i < pduArray.length; i++) {\\n        messages[i] = SmsMessage.createFromPdu((byte[]) pduArray[i]);\\n    }\\n}\\n```\\n\\n\u0417\u0434\u0435\u0441\u044c \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 `intent.getExtras().get(\\"pdus\\")`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 PDU - \u044d\u0442\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043c\u044b \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a \u0442\u0438\u043f\u0443 `SmsMessage` \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 `createFromPdu()`.\\n\\n\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435. \u0422\u043e, \u0447\u0442\u043e \u043c\u044b \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0434\u043e\u043b\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f **\u0431\u044b\u0441\u0442\u0440\u043e**. Broadcast receiver \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442, \u043d\u043e \u043e\u043d \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0437\u0430 \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u0442\u0430\u043a \u0447\u0442\u043e \u043d\u0430\u0448\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u044b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u043b\u0443\u0436\u0431\u0443, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432 \u043d\u0435\u0439. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0438 \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u0438\u0433\u0440\u0435 - \u043c\u044b \u0432\u044b\u0442\u0430\u0449\u0438\u043c \u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0441\u043b\u0443\u0436\u0431\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u0436\u0435 \u0438 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\\n\\n\u0414\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 `onReceive()`:\\n\\n```java\\nString sms_from = messages[0].getDisplayOriginatingAddress();\\nif (sms_from.equalsIgnoreCase(\\"RM FIGHT\\")) {\\n    StringBuilder bodyText = new StringBuilder();\\n    for (int i = 0; i < messages.length; i++) {\\n        bodyText.append(messages[i].getMessageBody());\\n    }\\n    String body = bodyText.toString();\\n    Intent mIntent = new Intent(context, SmsService.class);\\n    mIntent.putExtra(\\"sms_body\\", body);\\n    context.startService(mIntent);\\n\\n    abortBroadcast();\\n\\n}\\n```\\n\\n\u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u0434\u043b\u0438\u043d\u043d\u044b\u043c \u0438 \u043f\u0440\u0438\u0448\u043b\u043e \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u043c\u0441-\u043a\u0430\u0445, \u043a\u0430\u0436\u0434\u0430\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 `messages[i]`) \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u043c\u0435\u0442\u043e\u0434 `abortBroadcast()`, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c\u0438.\\n\\n## 2. \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0421\u041c\u0421\\n\\n\u0412 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u043f\u0443\u043d\u043a\u0442\u0435 \u043c\u044b \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438\u0441\u044c \u043d\u0430 \u0442\u043e\u043c, \u0447\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u043b\u0443\u0436\u0431\u0443 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043c\u0441 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 `startService()`. \u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0441\u043b\u0443\u0436\u0431\u044b \u0438 \u0441 \u0447\u0435\u043c \u0438\u0445 \u0435\u0434\u044f\u0442 \u0445\u043e\u0440\u043e\u0448\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0430 [\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435](http://developer.android.com/reference/android/app/Service.html), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0434\u0435\u0441\u044c \u043d\u0430 \u044d\u0442\u043e\u043c \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u043c.\\n\\n\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 `SmsService`, \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 `Service`:\\n\\n```java\\npublic class SmsService extends Service {\\n    @Override\\n    public IBinder onBind(Intent intent) {\\n        return null;\\n    }\\n}\\n```\\n\\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0443 \u043d\u0430\u0441 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430, \u043c\u0435\u0442\u043e\u0434 `onBind()` \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `null`.\\n\\n\u0414\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 `showNotification()`:\\n\\n```java\\nprivate void showNotification(String text) {\\n\\tPendingIntent contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, MainActivity.class), 0);\\n\\tContext context = getApplicationContext();\\n\\tNotification.Builder builder = new Notification.Builder(context)\\n\\t\\t.setContentTitle(\\"Rugball\\")\\n\\t\\t.setContentText(text)\\n\\t\\t.setContentIntent(contentIntent)\\n\\t\\t.setSmallIcon(R.drawable.ic_launcher)\\n\\t\\t.setAutoCancel(true);\\n\\tNotificationManager notificationManager = (NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);\\n\\tNotification notification = builder.getNotification();\\n\\tnotificationManager.notify(R.drawable.ic_launcher, notification);\\n}\\n```\\n\\n\u0412 \u043c\u0435\u0442\u043e\u0434\u0435 `onStartCommand()` \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c:\\n\\n```java\\n@Override\\npublic int onStartCommand(Intent intent, int flags, int startId) {\\n\\tString sms_body = intent.getExtras().getString(\\"sms_body\\");\\n\\tshowNotification(sms_body);\\n\\treturn START_STICKY;\\n}\\n```\\n\\n\u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c, \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 `smsProcess()`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u0431\u0430\u0432\u0438\u0442 \u0441\u043c\u0441 \u0432 \u0431\u0430\u0437\u0443 \u0438 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435 \u0432 \u0433\u0443\u0433\u043b-\u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u0435. \u042d\u0442\u0438\u043c \u0438 \u0437\u0430\u0439\u043c\u0435\u043c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0442\u0430\u0442\u044c\u0438.\\n\\n**UPDATE:** \u0432\u044b\u043b\u043e\u0436\u0438\u043b \u043a\u043e\u0434 \u043d\u0430 [GitHub](https://github.com/ookami-kb/rugball-notifier). \u0421\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e \u0441\u0442\u0430\u0442\u044c\u0438 \u043f\u043e\u043a\u0430 \u043d\u0435 \u0443\u0441\u043f\u0435\u0432\u0430\u044e, \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0443\u0436 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435. \u041d\u0430\u0434\u0435\u044e\u0441\u044c \u0432 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0441 \u044d\u0442\u0438\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u043c \u0440\u0430\u0437\u0431\u0435\u0440\u0443\u0441\u044c."}]}')}}]);