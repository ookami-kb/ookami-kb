"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8799],{9929:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>n,metadata:()=>s,toc:()=>p});var i=a(7462),o=(a(7294),a(3905));const n={sidebar_position:3},r="Flutter packages",s={unversionedId:"flutter-packages",id:"flutter-packages",title:"Flutter packages",description:"List of recommended packages",source:"@site/docs/flutter-packages.md",sourceDirName:".",slug:"/flutter-packages",permalink:"/docs/flutter-packages",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Flutter & Dart tips",permalink:"/docs/flutter-dart-tips"},next:{title:"Useful VS Code extensions",permalink:"/docs/vscode/"}},l={},p=[{value:"List of recommended packages",id:"list-of-recommended-packages",level:2},{value:"auto_route",id:"auto_route",level:3},{value:"bloc + bloc_concurrency + flutter_bloc",id:"bloc--bloc_concurrency--flutter_bloc",level:3},{value:"collection",id:"collection",level:3},{value:"decimal",id:"decimal",level:3},{value:"dio + retrofit",id:"dio--retrofit",level:3},{value:"drift",id:"drift",level:3},{value:"fast_immutable_collections",id:"fast_immutable_collections",level:3},{value:"freezed",id:"freezed",level:3},{value:"json_serializable",id:"json_serializable",level:3},{value:"provider",id:"provider",level:3},{value:"List of non-recommended packages",id:"list-of-non-recommended-packages",level:2},{value:"equatable",id:"equatable",level:3},{value:"flutter_hooks",id:"flutter_hooks",level:3},{value:"get",id:"get",level:3},{value:"riverpod",id:"riverpod",level:3}],d={toc:p};function c(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,i.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"flutter-packages"},"Flutter packages"),(0,o.kt)("h2",{id:"list-of-recommended-packages"},"List of recommended packages"),(0,o.kt)("p",null,"These are the packages that I use in the majority of applications, and I'm pretty happy with them."),(0,o.kt)("h3",{id:"auto_route"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/auto_route"},"auto_route")),(0,o.kt)("p",null,"Flutter navigation package, it allows for strongly-typed arguments passing, effortless deep-linking and it uses code generation to simplify routes setup, with that being said it requires a minimal amount of code to generate everything needed for navigation inside of your App."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The main advantages of this library:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"it generates code for routes, so that you have compile-time safety for page arguments;"),(0,o.kt)("li",{parentName:"ul"},"it has a decent support for nested routing.")),(0,o.kt)("p",{parentName:"admonition"},"Unfortunately, the documentation is pretty poor and some behavior can be confusing.")),(0,o.kt)("h3",{id:"bloc--bloc_concurrency--flutter_bloc"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/bloc"},"bloc")," + ",(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/bloc_concurrency"},"bloc_concurrency")," + ",(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/flutter_bloc"},"flutter_bloc")),(0,o.kt)("p",null,"BLoC pattern implementation + Flutter-specific widgets."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},'There are some discussions about whether to use BLoC as a part of business logic, or as a presentation logic (kind of ViewModel). For me, this library is not about "state management", but rather a FSM (Finite State Machine) pattern implementation.'),(0,o.kt)("p",{parentName:"admonition"},"That means, it can be used whenever this pattern seems to be suitable: most often, as an app logic holder, sometimes as a presentation logic holder (although, in general, I'm against ViewModel pattern in Flutter, sometimes it can be useful).")),(0,o.kt)("h3",{id:"collection"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/collection"},"collection")),(0,o.kt)("p",null,"Contains utility functions and classes in the style of dart:collection to make working with collections easier."),(0,o.kt)("h3",{id:"decimal"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/decimal"},"decimal")),(0,o.kt)("p",null,"Allows computations on decimal numbers without losing precision like double operations."),(0,o.kt)("h3",{id:"dio--retrofit"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/dio"},"dio")," + ",(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/retrofit"},"retrofit")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"retrofit.dart")," is a type conversion dio client generator using ",(0,o.kt)("inlineCode",{parentName:"p"},"source_gen")," and inspired by Chopper and Retrofit."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you have experience in developing native Android apps, you\u2019ve probably heard about the Android retrofit library that served as inspiration for this package. The idea is that you\u2019re defining an interface with methods communicating with backend API, then the library generates the bodies of those methods, taking care of the serialization/deserialization of request and response DTOs.")),(0,o.kt)("h3",{id:"drift"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/drift"},"drift")),(0,o.kt)("p",null,"Reactive persistence library for Flutter and Dart, built on top of sqlite."),(0,o.kt)("h3",{id:"fast_immutable_collections"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/fast_immutable_collections"},"fast_immutable_collections")),(0,o.kt)("p",null,"Immutable collections."),(0,o.kt)("h3",{id:"freezed"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/freezed"},"freezed")),(0,o.kt)("p",null,"Code generator for immutable data classes, unions etc."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},'Immutable objects are easier to deal with. You cannot accidentally change them, so they can be freely passed by as arguments. Sealed classes provide a nice feature of "limited" inheritance. Built-in support for serialization (implemented with ',(0,o.kt)("inlineCode",{parentName:"p"},"json_serializable"),").")),(0,o.kt)("h3",{id:"json_serializable"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/json_serializable"},"json_serializable")),(0,o.kt)("p",null,"Automatically generate code for converting to and from JSON by annotating Dart classes."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This is the most popular library for JSON serialization and deserialization.")),(0,o.kt)("h3",{id:"provider"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/provider"},"provider")),(0,o.kt)("p",null,"A wrapper around InheritedWidget to make them easier to use and more reusable."),(0,o.kt)("h2",{id:"list-of-non-recommended-packages"},"List of non-recommended packages"),(0,o.kt)("p",null,"These are the packages that are pretty popular and recommended by many developers, but I personally find them rather anti-patterns and advise to avoid in production code."),(0,o.kt)("h3",{id:"equatable"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/equatable"},"equatable")),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"It provides implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"==")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"hasCode")," methods based on the provided list of properties, but there are problems:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"it doesn't require classes to be immutable;"),(0,o.kt)("li",{parentName:"ul"},"it relies on the manual implementation of ",(0,o.kt)("inlineCode",{parentName:"li"},"props")," (the number of properties to take into account for equality check), which is error-prone."))),(0,o.kt)("h3",{id:"flutter_hooks"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/flutter_hooks"},"flutter_hooks")),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Two main problems with this package:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"this is React concept, it's not Flutter way;"),(0,o.kt)("li",{parentName:"ul"},"it break the convention of ",(0,o.kt)("inlineCode",{parentName:"li"},"build")," being a pure function free from side-effects.")),(0,o.kt)("p",{parentName:"admonition"},'Again, author tries to hide some "complexity" of pretty important Flutter concept: stateless vs stateful widgets and their lifecycles, bringing more confusion and some pitfalls.')),(0,o.kt)("h3",{id:"get"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/get"},"get")),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},'The idea of a framework inside another framework seems weird enough already. GetX introduces a lot of unnecessary abstractions and tries to "hide" the complexity of the Flutter (introducing its own complexity instead). Also, the code quality is pretty low.')),(0,o.kt)("h3",{id:"riverpod"},(0,o.kt)("a",{parentName:"h3",href:"https://pub.dev/packages/riverpod"},"riverpod")),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Despite the author claiming ",(0,o.kt)("inlineCode",{parentName:"p"},"riverpod")," to be the successor of ",(0,o.kt)("inlineCode",{parentName:"p"},"provider"),", they are totally different: ",(0,o.kt)("inlineCode",{parentName:"p"},"provider")," is just a wrapper over ",(0,o.kt)("inlineCode",{parentName:"p"},"InheritedWidget")," \u2013 thing you need to know anyway when dealing with Flutter. ",(0,o.kt)("inlineCode",{parentName:"p"},"provider")," just gives you convenient extensions and classes to reduce the boilerplate. ",(0,o.kt)("inlineCode",{parentName:"p"},"riverpod"),' is a "parallel" implementation of the same functionality that again tries to hide some "complexity" of the Flutter (obscuring some pretty important Flutter concepts, such as widget lifecycles).')))}c.isMDXComponent=!0}}]);